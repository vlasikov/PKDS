   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 27,1
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,1
  11              	 .eabi_attribute 18,4
  12              	 .file "xmc_sdmmc.c"
  13              	 .text
  14              	.Ltext0:
  15              	 .cfi_sections .debug_frame
  16              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  17              	 .align 1
  18              	 .global XMC_SDMMC_GetPowerStatus
  19              	 .arch armv7e-m
  20              	 .syntax unified
  21              	 .thumb
  22              	 .thumb_func
  23              	 .fpu fpv4-sp-d16
  25              	XMC_SDMMC_GetPowerStatus:
  26              	.LFB213:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *****************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Permission is hereby granted, free of charge, to any person or organization
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * obtaining a copy of the software and accompanying documentation covered by
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * do so, all subject to the following:
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The copyright notices in the Software and this entire statement, including
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the above license grant, this restriction and the following disclaimer,
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * must be included in all copies of the Software, in whole or in part, and
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * all derivative works of the Software, unless such copies or derivative
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * works are solely in the form of machine-executable object code generated by
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * a source language processor.
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DEALINGS IN THE SOFTWARE.
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * at XMCSupport@infineon.com.
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *****************************************************************************
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  53:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-07-11:
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - XMC_SDMMC_SetDataTransferMode() shall not invoke SetDateLineTimeout() <br>
  57:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  58:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2019-05-07:
  59:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Fixed compilation warnings
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  68:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  69:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  70:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  74:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  77:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  79:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  80:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  82:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  83:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  84:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  86:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  88:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  89:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  92:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  93:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  98:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  99:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
 104:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
 105:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
 109:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 110:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 113:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 114:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 115:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 119:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 120:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 122:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 123:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 124:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 125:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 128:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 129:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 130:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 132:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 133:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 134:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 138:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 139:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 142:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 143:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 144:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 148:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 149:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 153:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 155:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 160:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 161:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 163:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 164:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 167:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 169:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 170:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  28              	 .loc 1 172 1
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
 173:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 174:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 175:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  44              	 .loc 1 175 22
  45 0008 7B68     	 ldr r3,[r7,#4]
  46 000a 93F82930 	 ldrb r3,[r3,#41]
  47 000e DBB2     	 uxtb r3,r3
  48              	 .loc 1 175 35
  49 0010 03F00103 	 and r3,r3,#1
  50              	 .loc 1 175 10
  51 0014 002B     	 cmp r3,#0
  52 0016 14BF     	 ite ne
  53 0018 0123     	 movne r3,#1
  54 001a 0023     	 moveq r3,#0
  55 001c DBB2     	 uxtb r3,r3
 176:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  56              	 .loc 1 176 1
  57 001e 1846     	 mov r0,r3
  58 0020 0C37     	 adds r7,r7,#12
  59              	.LCFI3:
  60              	 .cfi_def_cfa_offset 4
  61 0022 BD46     	 mov sp,r7
  62              	.LCFI4:
  63              	 .cfi_def_cfa_register 13
  64              	 
  65 0024 5DF8047B 	 ldr r7,[sp],#4
  66              	.LCFI5:
  67              	 .cfi_restore 7
  68              	 .cfi_def_cfa_offset 0
  69 0028 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE213:
  73              	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
  74              	 .align 1
  75              	 .global XMC_SDMMC_Enable
  76              	 .syntax unified
  77              	 .thumb
  78              	 .thumb_func
  79              	 .fpu fpv4-sp-d16
  81              	XMC_SDMMC_Enable:
  82              	.LFB214:
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 180:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 181:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 183:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  83              	 .loc 1 183 1
  84              	 .cfi_startproc
  85              	 
  86              	 
  87 0000 80B5     	 push {r7,lr}
  88              	.LCFI6:
  89              	 .cfi_def_cfa_offset 8
  90              	 .cfi_offset 7,-8
  91              	 .cfi_offset 14,-4
  92 0002 82B0     	 sub sp,sp,#8
  93              	.LCFI7:
  94              	 .cfi_def_cfa_offset 16
  95 0004 00AF     	 add r7,sp,#0
  96              	.LCFI8:
  97              	 .cfi_def_cfa_register 7
  98 0006 7860     	 str r0,[r7,#4]
 184:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 185:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 186:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 188:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 189:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 191:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
  99              	 .loc 1 191 3
 100 0008 0348     	 ldr r0,.L4
 101 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 192:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 193:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 102              	 .loc 1 193 1
 103 000e 00BF     	 nop
 104 0010 0837     	 adds r7,r7,#8
 105              	.LCFI9:
 106              	 .cfi_def_cfa_offset 8
 107 0012 BD46     	 mov sp,r7
 108              	.LCFI10:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 0014 80BD     	 pop {r7,pc}
 112              	.L5:
 113 0016 00BF     	 .align 2
 114              	.L4:
 115 0018 40000010 	 .word 268435520
 116              	 .cfi_endproc
 117              	.LFE214:
 119              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
 120              	 .align 1
 121              	 .global XMC_SDMMC_Disable
 122              	 .syntax unified
 123              	 .thumb
 124              	 .thumb_func
 125              	 .fpu fpv4-sp-d16
 127              	XMC_SDMMC_Disable:
 128              	.LFB215:
 194:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 197:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 129              	 .loc 1 197 1
 130              	 .cfi_startproc
 131              	 
 132              	 
 133 0000 80B5     	 push {r7,lr}
 134              	.LCFI11:
 135              	 .cfi_def_cfa_offset 8
 136              	 .cfi_offset 7,-8
 137              	 .cfi_offset 14,-4
 138 0002 82B0     	 sub sp,sp,#8
 139              	.LCFI12:
 140              	 .cfi_def_cfa_offset 16
 141 0004 00AF     	 add r7,sp,#0
 142              	.LCFI13:
 143              	 .cfi_def_cfa_register 7
 144 0006 7860     	 str r0,[r7,#4]
 198:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 199:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 200:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 201:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 202:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 145              	 .loc 1 202 3
 146 0008 0348     	 ldr r0,.L7
 147 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 203:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 204:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 205:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 206:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 207:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 148              	 .loc 1 207 1
 149 000e 00BF     	 nop
 150 0010 0837     	 adds r7,r7,#8
 151              	.LCFI14:
 152              	 .cfi_def_cfa_offset 8
 153 0012 BD46     	 mov sp,r7
 154              	.LCFI15:
 155              	 .cfi_def_cfa_register 13
 156              	 
 157 0014 80BD     	 pop {r7,pc}
 158              	.L8:
 159 0016 00BF     	 .align 2
 160              	.L7:
 161 0018 40000010 	 .word 268435520
 162              	 .cfi_endproc
 163              	.LFE215:
 165              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 166              	 .align 1
 167              	 .global XMC_SDMMC_Init
 168              	 .syntax unified
 169              	 .thumb
 170              	 .thumb_func
 171              	 .fpu fpv4-sp-d16
 173              	XMC_SDMMC_Init:
 174              	.LFB216:
 208:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 209:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 210:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 211:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 175              	 .loc 1 211 1
 176              	 .cfi_startproc
 177              	 
 178              	 
 179 0000 80B5     	 push {r7,lr}
 180              	.LCFI16:
 181              	 .cfi_def_cfa_offset 8
 182              	 .cfi_offset 7,-8
 183              	 .cfi_offset 14,-4
 184 0002 82B0     	 sub sp,sp,#8
 185              	.LCFI17:
 186              	 .cfi_def_cfa_offset 16
 187 0004 00AF     	 add r7,sp,#0
 188              	.LCFI18:
 189              	 .cfi_def_cfa_register 7
 190 0006 7860     	 str r0,[r7,#4]
 191 0008 3960     	 str r1,[r7]
 212:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 214:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 215:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 216:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 217:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 192              	 .loc 1 217 3
 193 000a 7868     	 ldr r0,[r7,#4]
 194 000c FFF7FEFF 	 bl XMC_SDMMC_Enable
 218:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 220:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 195              	 .loc 1 220 21
 196 0010 7B68     	 ldr r3,[r7,#4]
 197 0012 9B8D     	 ldrh r3,[r3,#44]
 198 0014 9AB2     	 uxth r2,r3
 199              	 .loc 1 220 51
 200 0016 3B68     	 ldr r3,[r7]
 201 0018 5B78     	 ldrb r3,[r3,#1]
 202 001a 9BB2     	 uxth r3,r3
 203              	 .loc 1 220 24
 204 001c 1B02     	 lsls r3,r3,#8
 205 001e 9BB2     	 uxth r3,r3
 206              	 .loc 1 220 21
 207 0020 1343     	 orrs r3,r3,r2
 208 0022 9AB2     	 uxth r2,r3
 209 0024 7B68     	 ldr r3,[r7,#4]
 210 0026 9A85     	 strh r2,[r3,#44]
 221:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 222:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 211              	 .loc 1 223 38
 212 0028 7B68     	 ldr r3,[r7,#4]
 213 002a 93F82830 	 ldrb r3,[r3,#40]
 214 002e DBB2     	 uxtb r3,r3
 215 0030 5BB2     	 sxtb r3,r3
 216              	 .loc 1 223 50
 217 0032 23F00203 	 bic r3,r3,#2
 218 0036 5AB2     	 sxtb r2,r3
 224:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 219              	 .loc 1 224 48
 220 0038 3B68     	 ldr r3,[r7]
 221 003a 1B78     	 ldrb r3,[r3]
 222              	 .loc 1 224 60
 223 003c 5B00     	 lsls r3,r3,#1
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 224              	 .loc 1 223 97
 225 003e 5BB2     	 sxtb r3,r3
 226 0040 1343     	 orrs r3,r3,r2
 227 0042 5BB2     	 sxtb r3,r3
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 228              	 .loc 1 223 22
 229 0044 DAB2     	 uxtb r2,r3
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 230              	 .loc 1 223 20
 231 0046 7B68     	 ldr r3,[r7,#4]
 232 0048 83F82820 	 strb r2,[r3,#40]
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 226:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 233              	 .loc 1 226 10
 234 004c 0023     	 movs r3,#0
 227:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 235              	 .loc 1 227 1
 236 004e 1846     	 mov r0,r3
 237 0050 0837     	 adds r7,r7,#8
 238              	.LCFI19:
 239              	 .cfi_def_cfa_offset 8
 240 0052 BD46     	 mov sp,r7
 241              	.LCFI20:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0054 80BD     	 pop {r7,pc}
 245              	 .cfi_endproc
 246              	.LFE216:
 248              	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 249              	 .align 1
 250              	 .global XMC_SDMMC_EnableEventStatus
 251              	 .syntax unified
 252              	 .thumb
 253              	 .thumb_func
 254              	 .fpu fpv4-sp-d16
 256              	XMC_SDMMC_EnableEventStatus:
 257              	.LFB217:
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 229:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 230:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 231:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 258              	 .loc 1 231 1
 259              	 .cfi_startproc
 260              	 
 261              	 
 262              	 
 263 0000 80B4     	 push {r7}
 264              	.LCFI21:
 265              	 .cfi_def_cfa_offset 4
 266              	 .cfi_offset 7,-4
 267 0002 83B0     	 sub sp,sp,#12
 268              	.LCFI22:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI23:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
 274 0008 3960     	 str r1,[r7]
 232:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 233:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 234:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 235:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 275              	 .loc 1 235 29
 276 000a 7B68     	 ldr r3,[r7,#4]
 277 000c 9B8E     	 ldrh r3,[r3,#52]
 278 000e 9AB2     	 uxth r2,r3
 279              	 .loc 1 235 32
 280 0010 3B68     	 ldr r3,[r7]
 281 0012 9BB2     	 uxth r3,r3
 282              	 .loc 1 235 29
 283 0014 1343     	 orrs r3,r3,r2
 284 0016 9AB2     	 uxth r2,r3
 285 0018 7B68     	 ldr r3,[r7,#4]
 286 001a 9A86     	 strh r2,[r3,#52]
 236:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 287              	 .loc 1 236 28
 288 001c 7B68     	 ldr r3,[r7,#4]
 289 001e DB8E     	 ldrh r3,[r3,#54]
 290 0020 9AB2     	 uxth r2,r3
 291              	 .loc 1 236 48
 292 0022 3B68     	 ldr r3,[r7]
 293 0024 1B0C     	 lsrs r3,r3,#16
 294              	 .loc 1 236 31
 295 0026 9BB2     	 uxth r3,r3
 296              	 .loc 1 236 28
 297 0028 1343     	 orrs r3,r3,r2
 298 002a 9AB2     	 uxth r2,r3
 299 002c 7B68     	 ldr r3,[r7,#4]
 300 002e DA86     	 strh r2,[r3,#54]
 237:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 301              	 .loc 1 237 1
 302 0030 00BF     	 nop
 303 0032 0C37     	 adds r7,r7,#12
 304              	.LCFI24:
 305              	 .cfi_def_cfa_offset 4
 306 0034 BD46     	 mov sp,r7
 307              	.LCFI25:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 0036 5DF8047B 	 ldr r7,[sp],#4
 311              	.LCFI26:
 312              	 .cfi_restore 7
 313              	 .cfi_def_cfa_offset 0
 314 003a 7047     	 bx lr
 315              	 .cfi_endproc
 316              	.LFE217:
 318              	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 319              	 .align 1
 320              	 .global XMC_SDMMC_DisableEventStatus
 321              	 .syntax unified
 322              	 .thumb
 323              	 .thumb_func
 324              	 .fpu fpv4-sp-d16
 326              	XMC_SDMMC_DisableEventStatus:
 327              	.LFB218:
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 239:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 240:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 241:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 328              	 .loc 1 241 1
 329              	 .cfi_startproc
 330              	 
 331              	 
 332              	 
 333 0000 80B4     	 push {r7}
 334              	.LCFI27:
 335              	 .cfi_def_cfa_offset 4
 336              	 .cfi_offset 7,-4
 337 0002 83B0     	 sub sp,sp,#12
 338              	.LCFI28:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI29:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
 344 0008 3960     	 str r1,[r7]
 242:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 243:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 244:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 245:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 345              	 .loc 1 245 29
 346 000a 7B68     	 ldr r3,[r7,#4]
 347 000c 9B8E     	 ldrh r3,[r3,#52]
 348 000e 9AB2     	 uxth r2,r3
 349              	 .loc 1 245 32
 350 0010 3B68     	 ldr r3,[r7]
 351 0012 9BB2     	 uxth r3,r3
 352 0014 DB43     	 mvns r3,r3
 353 0016 9BB2     	 uxth r3,r3
 354              	 .loc 1 245 29
 355 0018 1340     	 ands r3,r3,r2
 356 001a 9AB2     	 uxth r2,r3
 357 001c 7B68     	 ldr r3,[r7,#4]
 358 001e 9A86     	 strh r2,[r3,#52]
 246:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 359              	 .loc 1 246 28
 360 0020 7B68     	 ldr r3,[r7,#4]
 361 0022 DB8E     	 ldrh r3,[r3,#54]
 362 0024 9AB2     	 uxth r2,r3
 363              	 .loc 1 246 49
 364 0026 3B68     	 ldr r3,[r7]
 365 0028 1B0C     	 lsrs r3,r3,#16
 366              	 .loc 1 246 31
 367 002a 9BB2     	 uxth r3,r3
 368 002c DB43     	 mvns r3,r3
 369 002e 9BB2     	 uxth r3,r3
 370              	 .loc 1 246 28
 371 0030 1340     	 ands r3,r3,r2
 372 0032 9AB2     	 uxth r2,r3
 373 0034 7B68     	 ldr r3,[r7,#4]
 374 0036 DA86     	 strh r2,[r3,#54]
 247:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 375              	 .loc 1 247 1
 376 0038 00BF     	 nop
 377 003a 0C37     	 adds r7,r7,#12
 378              	.LCFI30:
 379              	 .cfi_def_cfa_offset 4
 380 003c BD46     	 mov sp,r7
 381              	.LCFI31:
 382              	 .cfi_def_cfa_register 13
 383              	 
 384 003e 5DF8047B 	 ldr r7,[sp],#4
 385              	.LCFI32:
 386              	 .cfi_restore 7
 387              	 .cfi_def_cfa_offset 0
 388 0042 7047     	 bx lr
 389              	 .cfi_endproc
 390              	.LFE218:
 392              	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 393              	 .align 1
 394              	 .global XMC_SDMMC_EnableEvent
 395              	 .syntax unified
 396              	 .thumb
 397              	 .thumb_func
 398              	 .fpu fpv4-sp-d16
 400              	XMC_SDMMC_EnableEvent:
 401              	.LFB219:
 248:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 249:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 250:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 251:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 402              	 .loc 1 251 1
 403              	 .cfi_startproc
 404              	 
 405              	 
 406 0000 80B5     	 push {r7,lr}
 407              	.LCFI33:
 408              	 .cfi_def_cfa_offset 8
 409              	 .cfi_offset 7,-8
 410              	 .cfi_offset 14,-4
 411 0002 82B0     	 sub sp,sp,#8
 412              	.LCFI34:
 413              	 .cfi_def_cfa_offset 16
 414 0004 00AF     	 add r7,sp,#0
 415              	.LCFI35:
 416              	 .cfi_def_cfa_register 7
 417 0006 7860     	 str r0,[r7,#4]
 418 0008 3960     	 str r1,[r7]
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 253:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 254:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 419              	 .loc 1 254 3
 420 000a 3968     	 ldr r1,[r7]
 421 000c 7868     	 ldr r0,[r7,#4]
 422 000e FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 256:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 423              	 .loc 1 256 29
 424 0012 7B68     	 ldr r3,[r7,#4]
 425 0014 1B8F     	 ldrh r3,[r3,#56]
 426 0016 9AB2     	 uxth r2,r3
 427              	 .loc 1 256 32
 428 0018 3B68     	 ldr r3,[r7]
 429 001a 9BB2     	 uxth r3,r3
 430              	 .loc 1 256 29
 431 001c 1343     	 orrs r3,r3,r2
 432 001e 9AB2     	 uxth r2,r3
 433 0020 7B68     	 ldr r3,[r7,#4]
 434 0022 1A87     	 strh r2,[r3,#56]
 257:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 435              	 .loc 1 257 28
 436 0024 7B68     	 ldr r3,[r7,#4]
 437 0026 5B8F     	 ldrh r3,[r3,#58]
 438 0028 9AB2     	 uxth r2,r3
 439              	 .loc 1 257 48
 440 002a 3B68     	 ldr r3,[r7]
 441 002c 1B0C     	 lsrs r3,r3,#16
 442              	 .loc 1 257 31
 443 002e 9BB2     	 uxth r3,r3
 444              	 .loc 1 257 28
 445 0030 1343     	 orrs r3,r3,r2
 446 0032 9AB2     	 uxth r2,r3
 447 0034 7B68     	 ldr r3,[r7,#4]
 448 0036 5A87     	 strh r2,[r3,#58]
 258:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 449              	 .loc 1 258 1
 450 0038 00BF     	 nop
 451 003a 0837     	 adds r7,r7,#8
 452              	.LCFI36:
 453              	 .cfi_def_cfa_offset 8
 454 003c BD46     	 mov sp,r7
 455              	.LCFI37:
 456              	 .cfi_def_cfa_register 13
 457              	 
 458 003e 80BD     	 pop {r7,pc}
 459              	 .cfi_endproc
 460              	.LFE219:
 462              	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 463              	 .align 1
 464              	 .global XMC_SDMMC_DisableEvent
 465              	 .syntax unified
 466              	 .thumb
 467              	 .thumb_func
 468              	 .fpu fpv4-sp-d16
 470              	XMC_SDMMC_DisableEvent:
 471              	.LFB220:
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 260:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 261:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 262:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 472              	 .loc 1 262 1
 473              	 .cfi_startproc
 474              	 
 475              	 
 476              	 
 477 0000 80B4     	 push {r7}
 478              	.LCFI38:
 479              	 .cfi_def_cfa_offset 4
 480              	 .cfi_offset 7,-4
 481 0002 83B0     	 sub sp,sp,#12
 482              	.LCFI39:
 483              	 .cfi_def_cfa_offset 16
 484 0004 00AF     	 add r7,sp,#0
 485              	.LCFI40:
 486              	 .cfi_def_cfa_register 7
 487 0006 7860     	 str r0,[r7,#4]
 488 0008 3960     	 str r1,[r7]
 263:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 264:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 265:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 266:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 489              	 .loc 1 266 29
 490 000a 7B68     	 ldr r3,[r7,#4]
 491 000c 1B8F     	 ldrh r3,[r3,#56]
 492 000e 9AB2     	 uxth r2,r3
 493              	 .loc 1 266 32
 494 0010 3B68     	 ldr r3,[r7]
 495 0012 9BB2     	 uxth r3,r3
 496 0014 DB43     	 mvns r3,r3
 497 0016 9BB2     	 uxth r3,r3
 498              	 .loc 1 266 29
 499 0018 1340     	 ands r3,r3,r2
 500 001a 9AB2     	 uxth r2,r3
 501 001c 7B68     	 ldr r3,[r7,#4]
 502 001e 1A87     	 strh r2,[r3,#56]
 267:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 503              	 .loc 1 267 28
 504 0020 7B68     	 ldr r3,[r7,#4]
 505 0022 5B8F     	 ldrh r3,[r3,#58]
 506 0024 9AB2     	 uxth r2,r3
 507              	 .loc 1 267 49
 508 0026 3B68     	 ldr r3,[r7]
 509 0028 1B0C     	 lsrs r3,r3,#16
 510              	 .loc 1 267 31
 511 002a 9BB2     	 uxth r3,r3
 512 002c DB43     	 mvns r3,r3
 513 002e 9BB2     	 uxth r3,r3
 514              	 .loc 1 267 28
 515 0030 1340     	 ands r3,r3,r2
 516 0032 9AB2     	 uxth r2,r3
 517 0034 7B68     	 ldr r3,[r7,#4]
 518 0036 5A87     	 strh r2,[r3,#58]
 268:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 519              	 .loc 1 268 1
 520 0038 00BF     	 nop
 521 003a 0C37     	 adds r7,r7,#12
 522              	.LCFI41:
 523              	 .cfi_def_cfa_offset 4
 524 003c BD46     	 mov sp,r7
 525              	.LCFI42:
 526              	 .cfi_def_cfa_register 13
 527              	 
 528 003e 5DF8047B 	 ldr r7,[sp],#4
 529              	.LCFI43:
 530              	 .cfi_restore 7
 531              	 .cfi_def_cfa_offset 0
 532 0042 7047     	 bx lr
 533              	 .cfi_endproc
 534              	.LFE220:
 536              	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 537              	 .align 1
 538              	 .global XMC_SDMMC_ClearEvent
 539              	 .syntax unified
 540              	 .thumb
 541              	 .thumb_func
 542              	 .fpu fpv4-sp-d16
 544              	XMC_SDMMC_ClearEvent:
 545              	.LFB221:
 269:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 270:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 271:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 272:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 546              	 .loc 1 272 1
 547              	 .cfi_startproc
 548              	 
 549              	 
 550              	 
 551 0000 80B4     	 push {r7}
 552              	.LCFI44:
 553              	 .cfi_def_cfa_offset 4
 554              	 .cfi_offset 7,-4
 555 0002 83B0     	 sub sp,sp,#12
 556              	.LCFI45:
 557              	 .cfi_def_cfa_offset 16
 558 0004 00AF     	 add r7,sp,#0
 559              	.LCFI46:
 560              	 .cfi_def_cfa_register 7
 561 0006 7860     	 str r0,[r7,#4]
 562 0008 3960     	 str r1,[r7]
 273:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 274:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 275:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 276:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 563              	 .loc 1 276 28
 564 000a 3B68     	 ldr r3,[r7]
 565 000c 9AB2     	 uxth r2,r3
 566              	 .loc 1 276 26
 567 000e 7B68     	 ldr r3,[r7,#4]
 568 0010 1A86     	 strh r2,[r3,#48]
 277:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 569              	 .loc 1 277 44
 570 0012 3B68     	 ldr r3,[r7]
 571 0014 1B0C     	 lsrs r3,r3,#16
 572              	 .loc 1 277 27
 573 0016 9AB2     	 uxth r2,r3
 574              	 .loc 1 277 25
 575 0018 7B68     	 ldr r3,[r7,#4]
 576 001a 5A86     	 strh r2,[r3,#50]
 278:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 577              	 .loc 1 278 1
 578 001c 00BF     	 nop
 579 001e 0C37     	 adds r7,r7,#12
 580              	.LCFI47:
 581              	 .cfi_def_cfa_offset 4
 582 0020 BD46     	 mov sp,r7
 583              	.LCFI48:
 584              	 .cfi_def_cfa_register 13
 585              	 
 586 0022 5DF8047B 	 ldr r7,[sp],#4
 587              	.LCFI49:
 588              	 .cfi_restore 7
 589              	 .cfi_def_cfa_offset 0
 590 0026 7047     	 bx lr
 591              	 .cfi_endproc
 592              	.LFE221:
 594              	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 595              	 .align 1
 596              	 .global XMC_SDMMC_GetEvent
 597              	 .syntax unified
 598              	 .thumb
 599              	 .thumb_func
 600              	 .fpu fpv4-sp-d16
 602              	XMC_SDMMC_GetEvent:
 603              	.LFB222:
 279:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 280:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 281:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 282:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 604              	 .loc 1 282 1
 605              	 .cfi_startproc
 606              	 
 607              	 
 608              	 
 609 0000 80B4     	 push {r7}
 610              	.LCFI50:
 611              	 .cfi_def_cfa_offset 4
 612              	 .cfi_offset 7,-4
 613 0002 85B0     	 sub sp,sp,#20
 614              	.LCFI51:
 615              	 .cfi_def_cfa_offset 24
 616 0004 00AF     	 add r7,sp,#0
 617              	.LCFI52:
 618              	 .cfi_def_cfa_register 7
 619 0006 7860     	 str r0,[r7,#4]
 620 0008 3960     	 str r1,[r7]
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 284:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 285:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 286:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 287:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 288:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 621              	 .loc 1 288 6
 622 000a 3B68     	 ldr r3,[r7]
 623 000c B3F5803F 	 cmp r3,#65536
 624 0010 0CD2     	 bcs .L17
 289:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 625              	 .loc 1 290 26
 626 0012 7B68     	 ldr r3,[r7,#4]
 627 0014 1B8E     	 ldrh r3,[r3,#48]
 628 0016 9AB2     	 uxth r2,r3
 629              	 .loc 1 290 46
 630 0018 3B68     	 ldr r3,[r7]
 631 001a 9BB2     	 uxth r3,r3
 632              	 .loc 1 290 14
 633 001c 1340     	 ands r3,r3,r2
 634 001e 9BB2     	 uxth r3,r3
 635              	 .loc 1 290 12
 636 0020 002B     	 cmp r3,#0
 637 0022 14BF     	 ite ne
 638 0024 0123     	 movne r3,#1
 639 0026 0023     	 moveq r3,#0
 640 0028 FB73     	 strb r3,[r7,#15]
 641 002a 0CE0     	 b .L18
 642              	.L17:
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 293:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 294:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 643              	 .loc 1 294 26
 644 002c 7B68     	 ldr r3,[r7,#4]
 645 002e 5B8E     	 ldrh r3,[r3,#50]
 646 0030 9AB2     	 uxth r2,r3
 647              	 .loc 1 294 72
 648 0032 3B68     	 ldr r3,[r7]
 649 0034 1B0C     	 lsrs r3,r3,#16
 650              	 .loc 1 294 45
 651 0036 9BB2     	 uxth r3,r3
 652              	 .loc 1 294 14
 653 0038 1340     	 ands r3,r3,r2
 654 003a 9BB2     	 uxth r3,r3
 655              	 .loc 1 294 12
 656 003c 002B     	 cmp r3,#0
 657 003e 14BF     	 ite ne
 658 0040 0123     	 movne r3,#1
 659 0042 0023     	 moveq r3,#0
 660 0044 FB73     	 strb r3,[r7,#15]
 661              	.L18:
 295:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 297:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 662              	 .loc 1 297 10
 663 0046 FB7B     	 ldrb r3,[r7,#15]
 298:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 664              	 .loc 1 298 1
 665 0048 1846     	 mov r0,r3
 666 004a 1437     	 adds r7,r7,#20
 667              	.LCFI53:
 668              	 .cfi_def_cfa_offset 4
 669 004c BD46     	 mov sp,r7
 670              	.LCFI54:
 671              	 .cfi_def_cfa_register 13
 672              	 
 673 004e 5DF8047B 	 ldr r7,[sp],#4
 674              	.LCFI55:
 675              	 .cfi_restore 7
 676              	 .cfi_def_cfa_offset 0
 677 0052 7047     	 bx lr
 678              	 .cfi_endproc
 679              	.LFE222:
 681              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 682              	 .align 1
 683              	 .global XMC_SDMMC_GetR2Response
 684              	 .syntax unified
 685              	 .thumb
 686              	 .thumb_func
 687              	 .fpu fpv4-sp-d16
 689              	XMC_SDMMC_GetR2Response:
 690              	.LFB223:
 299:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 300:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 301:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 302:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 691              	 .loc 1 302 1
 692              	 .cfi_startproc
 693              	 
 694              	 
 695              	 
 696 0000 80B4     	 push {r7}
 697              	.LCFI56:
 698              	 .cfi_def_cfa_offset 4
 699              	 .cfi_offset 7,-4
 700 0002 83B0     	 sub sp,sp,#12
 701              	.LCFI57:
 702              	 .cfi_def_cfa_offset 16
 703 0004 00AF     	 add r7,sp,#0
 704              	.LCFI58:
 705              	 .cfi_def_cfa_register 7
 706 0006 7860     	 str r0,[r7,#4]
 707 0008 3960     	 str r1,[r7]
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 304:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 305:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 708              	 .loc 1 305 41
 709 000a 7B68     	 ldr r3,[r7,#4]
 710 000c 1A69     	 ldr r2,[r3,#16]
 711              	 .loc 1 305 24
 712 000e 3B68     	 ldr r3,[r7]
 713 0010 1A60     	 str r2,[r3]
 306:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 714              	 .loc 1 306 41
 715 0012 7B68     	 ldr r3,[r7,#4]
 716 0014 5A69     	 ldr r2,[r3,#20]
 717              	 .loc 1 306 24
 718 0016 3B68     	 ldr r3,[r7]
 719 0018 5A60     	 str r2,[r3,#4]
 307:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 720              	 .loc 1 307 41
 721 001a 7B68     	 ldr r3,[r7,#4]
 722 001c 9A69     	 ldr r2,[r3,#24]
 723              	 .loc 1 307 24
 724 001e 3B68     	 ldr r3,[r7]
 725 0020 9A60     	 str r2,[r3,#8]
 308:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 726              	 .loc 1 308 41
 727 0022 7B68     	 ldr r3,[r7,#4]
 728 0024 DA69     	 ldr r2,[r3,#28]
 729              	 .loc 1 308 24
 730 0026 3B68     	 ldr r3,[r7]
 731 0028 DA60     	 str r2,[r3,#12]
 309:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 732              	 .loc 1 309 1
 733 002a 00BF     	 nop
 734 002c 0C37     	 adds r7,r7,#12
 735              	.LCFI59:
 736              	 .cfi_def_cfa_offset 4
 737 002e BD46     	 mov sp,r7
 738              	.LCFI60:
 739              	 .cfi_def_cfa_register 13
 740              	 
 741 0030 5DF8047B 	 ldr r7,[sp],#4
 742              	.LCFI61:
 743              	 .cfi_restore 7
 744              	 .cfi_def_cfa_offset 0
 745 0034 7047     	 bx lr
 746              	 .cfi_endproc
 747              	.LFE223:
 749              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 750              	 .align 1
 751              	 .global XMC_SDMMC_SendCommand
 752              	 .syntax unified
 753              	 .thumb
 754              	 .thumb_func
 755              	 .fpu fpv4-sp-d16
 757              	XMC_SDMMC_SendCommand:
 758              	.LFB224:
 310:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 311:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 312:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 313:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 759              	 .loc 1 313 1
 760              	 .cfi_startproc
 761              	 
 762              	 
 763              	 
 764 0000 80B4     	 push {r7}
 765              	.LCFI62:
 766              	 .cfi_def_cfa_offset 4
 767              	 .cfi_offset 7,-4
 768 0002 85B0     	 sub sp,sp,#20
 769              	.LCFI63:
 770              	 .cfi_def_cfa_offset 24
 771 0004 00AF     	 add r7,sp,#0
 772              	.LCFI64:
 773              	 .cfi_def_cfa_register 7
 774 0006 F860     	 str r0,[r7,#12]
 775 0008 B960     	 str r1,[r7,#8]
 776 000a 7A60     	 str r2,[r7,#4]
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 315:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 316:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 777              	 .loc 1 316 20
 778 000c FB68     	 ldr r3,[r7,#12]
 779 000e 7A68     	 ldr r2,[r7,#4]
 780 0010 9A60     	 str r2,[r3,#8]
 317:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 781              	 .loc 1 317 20
 782 0012 BB68     	 ldr r3,[r7,#8]
 783 0014 1A88     	 ldrh r2,[r3]
 784              	 .loc 1 317 18
 785 0016 FB68     	 ldr r3,[r7,#12]
 786 0018 DA81     	 strh r2,[r3,#14]
 318:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 319:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 787              	 .loc 1 319 10
 788 001a 0023     	 movs r3,#0
 320:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 789              	 .loc 1 320 1
 790 001c 1846     	 mov r0,r3
 791 001e 1437     	 adds r7,r7,#20
 792              	.LCFI65:
 793              	 .cfi_def_cfa_offset 4
 794 0020 BD46     	 mov sp,r7
 795              	.LCFI66:
 796              	 .cfi_def_cfa_register 13
 797              	 
 798 0022 5DF8047B 	 ldr r7,[sp],#4
 799              	.LCFI67:
 800              	 .cfi_restore 7
 801              	 .cfi_def_cfa_offset 0
 802 0026 7047     	 bx lr
 803              	 .cfi_endproc
 804              	.LFE224:
 806              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 807              	 .align 1
 808              	 .global XMC_SDMMC_SetDataTransferMode
 809              	 .syntax unified
 810              	 .thumb
 811              	 .thumb_func
 812              	 .fpu fpv4-sp-d16
 814              	XMC_SDMMC_SetDataTransferMode:
 815              	.LFB225:
 321:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 322:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 323:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 324:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 816              	 .loc 1 324 1
 817              	 .cfi_startproc
 818              	 
 819              	 
 820              	 
 821 0000 80B4     	 push {r7}
 822              	.LCFI68:
 823              	 .cfi_def_cfa_offset 4
 824              	 .cfi_offset 7,-4
 825 0002 83B0     	 sub sp,sp,#12
 826              	.LCFI69:
 827              	 .cfi_def_cfa_offset 16
 828 0004 00AF     	 add r7,sp,#0
 829              	.LCFI70:
 830              	 .cfi_def_cfa_register 7
 831 0006 7860     	 str r0,[r7,#4]
 832 0008 3960     	 str r1,[r7]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 327:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 328:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 833              	 .loc 1 329 42
 834 000a 3B68     	 ldr r3,[r7]
 835 000c 1B68     	 ldr r3,[r3]
 836              	 .loc 1 329 23
 837 000e 9AB2     	 uxth r2,r3
 838              	 .loc 1 329 21
 839 0010 7B68     	 ldr r3,[r7,#4]
 840 0012 9A80     	 strh r2,[r3,#4]
 330:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 332:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 841              	 .loc 1 332 43
 842 0014 3B68     	 ldr r3,[r7]
 843 0016 5B68     	 ldr r3,[r3,#4]
 844              	 .loc 1 332 24
 845 0018 9AB2     	 uxth r2,r3
 846              	 .loc 1 332 22
 847 001a 7B68     	 ldr r3,[r7,#4]
 848 001c DA80     	 strh r2,[r3,#6]
 333:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 849              	 .loc 1 335 43
 850 001e 7B68     	 ldr r3,[r7,#4]
 851 0020 9B89     	 ldrh r3,[r3,#12]
 852 0022 9BB2     	 uxth r3,r3
 853 0024 1BB2     	 sxth r3,r3
 854              	 .loc 1 335 59
 855 0026 23F02003 	 bic r3,r3,#32
 856 002a 1AB2     	 sxth r2,r3
 336:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 857              	 .loc 1 336 56
 858 002c 3B68     	 ldr r3,[r7]
 859 002e 1B7A     	 ldrb r3,[r3,#8]
 860 0030 1BB2     	 sxth r3,r3
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 861              	 .loc 1 335 116
 862 0032 1343     	 orrs r3,r3,r2
 863 0034 1BB2     	 sxth r3,r3
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 864              	 .loc 1 335 26
 865 0036 9AB2     	 uxth r2,r3
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 866              	 .loc 1 335 24
 867 0038 7B68     	 ldr r3,[r7,#4]
 868 003a 9A81     	 strh r2,[r3,#12]
 337:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 340:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 341:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 342:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 869              	 .loc 1 342 15
 870 003c 3B68     	 ldr r3,[r7]
 871 003e 1B7A     	 ldrb r3,[r3,#8]
 872              	 .loc 1 342 6
 873 0040 002B     	 cmp r3,#0
 874 0042 07D1     	 bne .L24
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 344:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 875              	 .loc 1 344 26
 876 0044 7B68     	 ldr r3,[r7,#4]
 877 0046 9B89     	 ldrh r3,[r3,#12]
 878 0048 9BB2     	 uxth r3,r3
 879 004a 23F00203 	 bic r3,r3,#2
 880 004e 9AB2     	 uxth r2,r3
 881 0050 7B68     	 ldr r3,[r7,#4]
 882 0052 9A81     	 strh r2,[r3,#12]
 883              	.L24:
 345:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 346:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 347:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 884              	 .loc 1 348 43
 885 0054 7B68     	 ldr r3,[r7,#4]
 886 0056 9B89     	 ldrh r3,[r3,#12]
 887 0058 9BB2     	 uxth r3,r3
 888 005a 1BB2     	 sxth r3,r3
 889              	 .loc 1 348 59
 890 005c 23F00C03 	 bic r3,r3,#12
 891 0060 1AB2     	 sxth r2,r3
 349:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 892              	 .loc 1 349 56
 893 0062 3B68     	 ldr r3,[r7]
 894 0064 5B7A     	 ldrb r3,[r3,#9]
 895              	 .loc 1 349 67
 896 0066 9B00     	 lsls r3,r3,#2
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 897              	 .loc 1 348 105
 898 0068 1BB2     	 sxth r3,r3
 899 006a 1343     	 orrs r3,r3,r2
 900 006c 1BB2     	 sxth r3,r3
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 901              	 .loc 1 348 26
 902 006e 9AB2     	 uxth r2,r3
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 903              	 .loc 1 348 24
 904 0070 7B68     	 ldr r3,[r7,#4]
 905 0072 9A81     	 strh r2,[r3,#12]
 350:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 906              	 .loc 1 350 1
 907 0074 00BF     	 nop
 908 0076 0C37     	 adds r7,r7,#12
 909              	.LCFI71:
 910              	 .cfi_def_cfa_offset 4
 911 0078 BD46     	 mov sp,r7
 912              	.LCFI72:
 913              	 .cfi_def_cfa_register 13
 914              	 
 915 007a 5DF8047B 	 ldr r7,[sp],#4
 916              	.LCFI73:
 917              	 .cfi_restore 7
 918              	 .cfi_def_cfa_offset 0
 919 007e 7047     	 bx lr
 920              	 .cfi_endproc
 921              	.LFE225:
 923              	 .text
 924              	.Letext0:
 925              	 .file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 926              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 927              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc/xmc_sdmmc.h"
 928              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc/xmc4_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:17     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:25     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:74     .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:81     .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:115    .text.XMC_SDMMC_Enable:00000018 $d
    {standard input}:120    .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:127    .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:161    .text.XMC_SDMMC_Disable:00000018 $d
    {standard input}:166    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:173    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:249    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:256    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:319    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:326    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:393    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:400    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:463    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:470    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:537    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:544    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:595    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:602    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:682    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:689    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:750    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:757    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:807    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:814    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
