   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 27,1
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,1
  11              	 .eabi_attribute 18,4
  12              	 .file "xmc_dma.c"
  13              	 .text
  14              	.Ltext0:
  15              	 .cfi_sections .debug_frame
  16              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  17              	 .align 1
  18              	 .arch armv7e-m
  19              	 .syntax unified
  20              	 .thumb
  21              	 .thumb_func
  22              	 .fpu fpv4-sp-d16
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB133:
  26              	 .file 1 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc/xmc_dma.h"
   1:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *****************************************************************************
   7:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.
  11:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  12:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  14:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * do so, all subject to the following:
  20:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  21:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * a source language processor.
  27:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  28:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * at XMCSupport@infineon.com.
  39:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *****************************************************************************
  40:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  41:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  42:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  43:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  44:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  45:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  46:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  47:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  48:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  49:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  50:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  51:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  52:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  53:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  54:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  55:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  56:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  57:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  58:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  59:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  60:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  61:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  62:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  63:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  64:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  65:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
  66:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  67:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  68:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  69:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  70:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  71:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  72:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  73:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  74:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  75:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  76:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  77:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  78:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  79:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  80:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
  81:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  82:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  83:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
  84:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
  85:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
  86:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  87:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  88:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  89:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  90:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  91:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  92:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  93:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  94:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  95:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  96:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
  97:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  98:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  99:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
 100:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 101:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 102:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 103:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
 104:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 105:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 106:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 107:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 108:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 109:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 110:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 111:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 112:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 113:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 114:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 115:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 116:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 117:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 118:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 119:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 120:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 121:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 122:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 123:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 124:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 125:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 126:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 127:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 128:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 129:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 130:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 131:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 132:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 133:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 134:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 135:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 136:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 137:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 138:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 139:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 140:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 141:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 142:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 143:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 144:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 145:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 146:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 147:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 148:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 149:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 150:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 151:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 152:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 153:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 154:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 155:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 156:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 157:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 158:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 159:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 160:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 161:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 162:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 163:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 164:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 165:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 166:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 167:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 168:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 169:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 170:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 171:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 172:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 173:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 174:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 175:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 176:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 177:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 178:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 179:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 180:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 181:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 182:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 183:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 184:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 185:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 186:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 187:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 188:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 189:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 190:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 191:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 192:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 193:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 194:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 195:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 196:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 197:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 198:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 199:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 200:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 201:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 202:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 203:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 204:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 205:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 206:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 207:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 208:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 209:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 210:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 211:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 212:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 213:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 214:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 215:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 216:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 217:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 218:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 219:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 220:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 221:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 222:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 223:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 224:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 225:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 226:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 227:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 228:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 229:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 230:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 231:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 232:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 233:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 234:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 235:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 236:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 237:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 238:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 239:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 240:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 241:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 242:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 243:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 244:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 245:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 246:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 247:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 248:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 249:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 250:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 251:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 252:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 253:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 254:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 255:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 256:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 257:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 258:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 259:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 260:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 261:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 262:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 263:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 264:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 265:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 266:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 267:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 268:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 269:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 270:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 271:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 272:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 273:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 274:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 275:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct GPDMA_CH
 276:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 277:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 278:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 279:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 280:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 281:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 282:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 283:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 284:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 285:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 286:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 287:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 288:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 289:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 290:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 291:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 292:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 293:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 294:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 295:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 296:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 297:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 298:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 299:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 300:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 301:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 302:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 303:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 304:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 305:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 306:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 307:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 308:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA
 309:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 310:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 311:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 312:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 313:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 314:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 315:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 316:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 317:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 318:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 319:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 320:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 321:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 322:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 323:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 324:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 325:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 326:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 327:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 328:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 329:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 330:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 331:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 332:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 333:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 334:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 335:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 336:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 337:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 338:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 339:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 340:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 341:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 342:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #pragma push
 343:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #pragma anon_unions
 344:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 345:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #pragma warning 586
 346:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 347:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 348:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 349:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 350:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 351:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 352:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 353:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 354:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 355:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 356:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 357:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   union
 358:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   {
 359:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 360:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     {
 361:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 362:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 363:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 364:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 365:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 366:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 367:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 368:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 369:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 370:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 371:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 372:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 373:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 374:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 375:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 376:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     };
 377:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 378:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   };
 379:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 380:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 381:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 382:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 383:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 384:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 385:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 386:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 387:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 388:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 389:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 390:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 391:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   union
 392:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   {
 393:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 394:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 395:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     {
 396:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 397:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 398:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 399:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 400:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 401:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 402:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 403:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 404:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 405:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;
 406:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 407:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;
 408:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     };
 409:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   };
 410:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 411:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 412:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 413:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 414:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 415:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   union
 416:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   {
 417:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 418:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 419:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     {
 420:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 421:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 422:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     };
 423:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   };
 424:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 425:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   union
 426:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   {
 427:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 428:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 429:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     {
 430:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 431:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 432:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****     };
 433:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   };
 434:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 435:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 436:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 437:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 438:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 439:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 440:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 441:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 442:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 443:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 444:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 445:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 446:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #pragma pop
 447:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 448:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #pragma warning restore
 449:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 450:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 451:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 452:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 453:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 454:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 455:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 456:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 457:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 458:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 459:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 460:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 461:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 462:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 463:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 464:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 465:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 466:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 467:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 468:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 469:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 470:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 471:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 472:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 473:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 474:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 475:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 476:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 477:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 478:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 479:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 480:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 481:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 482:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 483:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 484:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 485:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 486:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 487:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 488:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 489:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 490:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 491:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 492:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 493:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 494:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 495:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 496:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 497:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 498:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 499:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 500:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 501:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 502:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 503:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 504:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 505:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 506:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 507:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 508:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 509:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 510:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 511:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 512:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 513:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 514:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 515:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 516:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 517:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 518:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 519:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 520:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 521:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 522:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 523:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 524:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 525:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 526:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 527:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 528:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 529:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 530:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 531:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 532:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 533:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 534:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 535:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 536:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 537:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 538:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 539:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 540:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 541:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
  27              	 .loc 1 541 1
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 542:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 542 14
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 543:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** }
  46              	 .loc 1 543 1
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE133:
  63              	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 1
  65              	 .syntax unified
  66              	 .thumb
  67              	 .thumb_func
  68              	 .fpu fpv4-sp-d16
  70              	XMC_DMA_GetChannelsTransferCompleteStatus:
  71              	.LFB134:
 544:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 545:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 546:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 547:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 548:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 549:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 550:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 551:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 552:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 553:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 554:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 555:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 556:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
  72              	 .loc 1 556 1
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
 557:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  88              	 .loc 1 557 26
  89 0008 7B68     	 ldr r3,[r7,#4]
  90 000a D3F8E832 	 ldr r3,[r3,#744]
 558:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** }
  91              	 .loc 1 558 1
  92 000e 1846     	 mov r0,r3
  93 0010 0C37     	 adds r7,r7,#12
  94              	.LCFI9:
  95              	 .cfi_def_cfa_offset 4
  96 0012 BD46     	 mov sp,r7
  97              	.LCFI10:
  98              	 .cfi_def_cfa_register 13
  99              	 
 100 0014 5DF8047B 	 ldr r7,[sp],#4
 101              	.LCFI11:
 102              	 .cfi_restore 7
 103              	 .cfi_def_cfa_offset 0
 104 0018 7047     	 bx lr
 105              	 .cfi_endproc
 106              	.LFE134:
 108              	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 109              	 .align 1
 110              	 .syntax unified
 111              	 .thumb
 112              	 .thumb_func
 113              	 .fpu fpv4-sp-d16
 115              	XMC_DMA_GetChannelsBlockCompleteStatus:
 116              	.LFB135:
 559:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 560:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 561:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 562:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 563:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 564:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 565:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 566:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 567:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 568:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 569:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 570:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 571:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 117              	 .loc 1 571 1
 118              	 .cfi_startproc
 119              	 
 120              	 
 121              	 
 122 0000 80B4     	 push {r7}
 123              	.LCFI12:
 124              	 .cfi_def_cfa_offset 4
 125              	 .cfi_offset 7,-4
 126 0002 83B0     	 sub sp,sp,#12
 127              	.LCFI13:
 128              	 .cfi_def_cfa_offset 16
 129 0004 00AF     	 add r7,sp,#0
 130              	.LCFI14:
 131              	 .cfi_def_cfa_register 7
 132 0006 7860     	 str r0,[r7,#4]
 572:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 133              	 .loc 1 572 26
 134 0008 7B68     	 ldr r3,[r7,#4]
 135 000a D3F8F032 	 ldr r3,[r3,#752]
 573:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** }
 136              	 .loc 1 573 1
 137 000e 1846     	 mov r0,r3
 138 0010 0C37     	 adds r7,r7,#12
 139              	.LCFI15:
 140              	 .cfi_def_cfa_offset 4
 141 0012 BD46     	 mov sp,r7
 142              	.LCFI16:
 143              	 .cfi_def_cfa_register 13
 144              	 
 145 0014 5DF8047B 	 ldr r7,[sp],#4
 146              	.LCFI17:
 147              	 .cfi_restore 7
 148              	 .cfi_def_cfa_offset 0
 149 0018 7047     	 bx lr
 150              	 .cfi_endproc
 151              	.LFE135:
 153              	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 154              	 .align 1
 155              	 .syntax unified
 156              	 .thumb
 157              	 .thumb_func
 158              	 .fpu fpv4-sp-d16
 160              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 161              	.LFB136:
 574:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 575:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 576:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 577:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 578:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 579:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 580:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 581:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 582:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 583:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 584:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 585:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 586:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 587:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 588:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 589:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 590:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 162              	 .loc 1 590 1
 163              	 .cfi_startproc
 164              	 
 165              	 
 166              	 
 167 0000 80B4     	 push {r7}
 168              	.LCFI18:
 169              	 .cfi_def_cfa_offset 4
 170              	 .cfi_offset 7,-4
 171 0002 83B0     	 sub sp,sp,#12
 172              	.LCFI19:
 173              	 .cfi_def_cfa_offset 16
 174 0004 00AF     	 add r7,sp,#0
 175              	.LCFI20:
 176              	 .cfi_def_cfa_register 7
 177 0006 7860     	 str r0,[r7,#4]
 591:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 178              	 .loc 1 591 26
 179 0008 7B68     	 ldr r3,[r7,#4]
 180 000a D3F8F832 	 ldr r3,[r3,#760]
 592:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** }
 181              	 .loc 1 592 1
 182 000e 1846     	 mov r0,r3
 183 0010 0C37     	 adds r7,r7,#12
 184              	.LCFI21:
 185              	 .cfi_def_cfa_offset 4
 186 0012 BD46     	 mov sp,r7
 187              	.LCFI22:
 188              	 .cfi_def_cfa_register 13
 189              	 
 190 0014 5DF8047B 	 ldr r7,[sp],#4
 191              	.LCFI23:
 192              	 .cfi_restore 7
 193              	 .cfi_def_cfa_offset 0
 194 0018 7047     	 bx lr
 195              	 .cfi_endproc
 196              	.LFE136:
 198              	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 199              	 .align 1
 200              	 .syntax unified
 201              	 .thumb
 202              	 .thumb_func
 203              	 .fpu fpv4-sp-d16
 205              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 206              	.LFB137:
 593:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 594:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 595:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 596:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 597:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 598:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 599:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 600:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 601:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 602:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 603:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 604:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 605:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 606:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 607:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 608:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 609:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 207              	 .loc 1 609 1
 208              	 .cfi_startproc
 209              	 
 210              	 
 211              	 
 212 0000 80B4     	 push {r7}
 213              	.LCFI24:
 214              	 .cfi_def_cfa_offset 4
 215              	 .cfi_offset 7,-4
 216 0002 83B0     	 sub sp,sp,#12
 217              	.LCFI25:
 218              	 .cfi_def_cfa_offset 16
 219 0004 00AF     	 add r7,sp,#0
 220              	.LCFI26:
 221              	 .cfi_def_cfa_register 7
 222 0006 7860     	 str r0,[r7,#4]
 610:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 223              	 .loc 1 610 26
 224 0008 7B68     	 ldr r3,[r7,#4]
 225 000a D3F80033 	 ldr r3,[r3,#768]
 611:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** }
 226              	 .loc 1 611 1
 227 000e 1846     	 mov r0,r3
 228 0010 0C37     	 adds r7,r7,#12
 229              	.LCFI27:
 230              	 .cfi_def_cfa_offset 4
 231 0012 BD46     	 mov sp,r7
 232              	.LCFI28:
 233              	 .cfi_def_cfa_register 13
 234              	 
 235 0014 5DF8047B 	 ldr r7,[sp],#4
 236              	.LCFI29:
 237              	 .cfi_restore 7
 238              	 .cfi_def_cfa_offset 0
 239 0018 7047     	 bx lr
 240              	 .cfi_endproc
 241              	.LFE137:
 243              	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 244              	 .align 1
 245              	 .syntax unified
 246              	 .thumb
 247              	 .thumb_func
 248              	 .fpu fpv4-sp-d16
 250              	XMC_DMA_GetChannelsErrorStatus:
 251              	.LFB138:
 612:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** 
 613:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** /**
 614:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 615:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 616:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 617:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 618:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 619:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  *
 620:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 621:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 622:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****  */
 623:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 624:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** {
 252              	 .loc 1 624 1
 253              	 .cfi_startproc
 254              	 
 255              	 
 256              	 
 257 0000 80B4     	 push {r7}
 258              	.LCFI30:
 259              	 .cfi_def_cfa_offset 4
 260              	 .cfi_offset 7,-4
 261 0002 83B0     	 sub sp,sp,#12
 262              	.LCFI31:
 263              	 .cfi_def_cfa_offset 16
 264 0004 00AF     	 add r7,sp,#0
 265              	.LCFI32:
 266              	 .cfi_def_cfa_register 7
 267 0006 7860     	 str r0,[r7,#4]
 625:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 268              	 .loc 1 625 26
 269 0008 7B68     	 ldr r3,[r7,#4]
 270 000a D3F80833 	 ldr r3,[r3,#776]
 626:C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc\xmc_dma.h **** }
 271              	 .loc 1 626 1
 272 000e 1846     	 mov r0,r3
 273 0010 0C37     	 adds r7,r7,#12
 274              	.LCFI33:
 275              	 .cfi_def_cfa_offset 4
 276 0012 BD46     	 mov sp,r7
 277              	.LCFI34:
 278              	 .cfi_def_cfa_register 13
 279              	 
 280 0014 5DF8047B 	 ldr r7,[sp],#4
 281              	.LCFI35:
 282              	 .cfi_restore 7
 283              	 .cfi_def_cfa_offset 0
 284 0018 7047     	 bx lr
 285              	 .cfi_endproc
 286              	.LFE138:
 288              	 .section .bss.dma0_event_handlers,"aw",%nobits
 289              	 .align 2
 292              	dma0_event_handlers:
 293 0000 00000000 	 .space 32
 293      00000000 
 293      00000000 
 293      00000000 
 293      00000000 
 294              	 .section .bss.dma1_event_handlers,"aw",%nobits
 295              	 .align 2
 298              	dma1_event_handlers:
 299 0000 00000000 	 .space 16
 299      00000000 
 299      00000000 
 299      00000000 
 300              	 .section .text.XMC_DMA_Init,"ax",%progbits
 301              	 .align 1
 302              	 .global XMC_DMA_Init
 303              	 .syntax unified
 304              	 .thumb
 305              	 .thumb_func
 306              	 .fpu fpv4-sp-d16
 308              	XMC_DMA_Init:
 309              	.LFB185:
 310              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  *****************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  14:../Libraries/XMCLib/src/xmc_dma.c ****  *
  15:../Libraries/XMCLib/src/xmc_dma.c ****  * Permission is hereby granted, free of charge, to any person or organization
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * obtaining a copy of the software and accompanying documentation covered by
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * do so, all subject to the following:
  21:../Libraries/XMCLib/src/xmc_dma.c ****  *
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * The copyright notices in the Software and this entire statement, including
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * the above license grant, this restriction and the following disclaimer,
  24:../Libraries/XMCLib/src/xmc_dma.c ****  * must be included in all copies of the Software, in whole or in part, and
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * all derivative works of the Software, unless such copies or derivative
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * works are solely in the form of machine-executable object code generated by
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * a source language processor.
  28:../Libraries/XMCLib/src/xmc_dma.c ****  *
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  32:../Libraries/XMCLib/src/xmc_dma.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  35:../Libraries/XMCLib/src/xmc_dma.c ****  * DEALINGS IN THE SOFTWARE.
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  39:../Libraries/XMCLib/src/xmc_dma.c ****  * at XMCSupport@infineon.com.
  40:../Libraries/XMCLib/src/xmc_dma.c ****  *****************************************************************************
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *
  42:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *
  45:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *
  48:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  51:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *
  56:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  57:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  60:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *
  62:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *
  65:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  66:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  69:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  70:../Libraries/XMCLib/src/xmc_dma.c ****  *
  71:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  72:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  73:../Libraries/XMCLib/src/xmc_dma.c ****  *
  74:../Libraries/XMCLib/src/xmc_dma.c ****  * 2019-05-07:
  75:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fixed compilation warnings
  76:../Libraries/XMCLib/src/xmc_dma.c ****  *
  77:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  78:../Libraries/XMCLib/src/xmc_dma.c ****  */
  79:../Libraries/XMCLib/src/xmc_dma.c **** 
  80:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  81:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  82:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  83:../Libraries/XMCLib/src/xmc_dma.c **** 
  84:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  85:../Libraries/XMCLib/src/xmc_dma.c **** 
  86:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  87:../Libraries/XMCLib/src/xmc_dma.c **** 
  88:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  89:../Libraries/XMCLib/src/xmc_dma.c **** 
  90:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  91:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  92:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  93:../Libraries/XMCLib/src/xmc_dma.c **** 
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  95:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  96:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  97:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  98:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  99:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
 100:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
 101:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
 102:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
 103:../Libraries/XMCLib/src/xmc_dma.c **** 
 104:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 105:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
 106:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 107:../Libraries/XMCLib/src/xmc_dma.c **** 
 108:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 109:../Libraries/XMCLib/src/xmc_dma.c **** static XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 110:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 111:../Libraries/XMCLib/src/xmc_dma.c **** 
 112:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 113:../Libraries/XMCLib/src/xmc_dma.c **** static XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 114:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 115:../Libraries/XMCLib/src/xmc_dma.c **** 
 116:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 117:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 118:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 119:../Libraries/XMCLib/src/xmc_dma.c **** 
 120:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 121:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 122:../Libraries/XMCLib/src/xmc_dma.c **** {
 311              	 .loc 2 122 1
 312              	 .cfi_startproc
 313              	 
 314              	 
 315 0000 80B5     	 push {r7,lr}
 316              	.LCFI36:
 317              	 .cfi_def_cfa_offset 8
 318              	 .cfi_offset 7,-8
 319              	 .cfi_offset 14,-4
 320 0002 82B0     	 sub sp,sp,#8
 321              	.LCFI37:
 322              	 .cfi_def_cfa_offset 16
 323 0004 00AF     	 add r7,sp,#0
 324              	.LCFI38:
 325              	 .cfi_def_cfa_register 7
 326 0006 7860     	 str r0,[r7,#4]
 123:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 327              	 .loc 2 123 3
 328 0008 7868     	 ldr r0,[r7,#4]
 329 000a FFF7FEFF 	 bl XMC_DMA_Enable
 124:../Libraries/XMCLib/src/xmc_dma.c **** }
 330              	 .loc 2 124 1
 331 000e 00BF     	 nop
 332 0010 0837     	 adds r7,r7,#8
 333              	.LCFI39:
 334              	 .cfi_def_cfa_offset 8
 335 0012 BD46     	 mov sp,r7
 336              	.LCFI40:
 337              	 .cfi_def_cfa_register 13
 338              	 
 339 0014 80BD     	 pop {r7,pc}
 340              	 .cfi_endproc
 341              	.LFE185:
 343              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 344              	 .align 1
 345              	 .global XMC_DMA_Enable
 346              	 .syntax unified
 347              	 .thumb
 348              	 .thumb_func
 349              	 .fpu fpv4-sp-d16
 351              	XMC_DMA_Enable:
 352              	.LFB186:
 125:../Libraries/XMCLib/src/xmc_dma.c **** 
 126:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 127:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 128:../Libraries/XMCLib/src/xmc_dma.c **** {
 353              	 .loc 2 128 1
 354              	 .cfi_startproc
 355              	 
 356              	 
 357 0000 80B5     	 push {r7,lr}
 358              	.LCFI41:
 359              	 .cfi_def_cfa_offset 8
 360              	 .cfi_offset 7,-8
 361              	 .cfi_offset 14,-4
 362 0002 82B0     	 sub sp,sp,#8
 363              	.LCFI42:
 364              	 .cfi_def_cfa_offset 16
 365 0004 00AF     	 add r7,sp,#0
 366              	.LCFI43:
 367              	 .cfi_def_cfa_register 7
 368 0006 7860     	 str r0,[r7,#4]
 129:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 130:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 369              	 .loc 2 130 6
 370 0008 7B68     	 ldr r3,[r7,#4]
 371 000a 094A     	 ldr r2,.L17
 372 000c 9342     	 cmp r3,r2
 373 000e 03D1     	 bne .L15
 131:../Libraries/XMCLib/src/xmc_dma.c ****   {
 132:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 133:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 134:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 135:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 136:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 374              	 .loc 2 136 5
 375 0010 0848     	 ldr r0,.L17+4
 376 0012 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 377 0016 02E0     	 b .L16
 378              	.L15:
 137:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 138:../Libraries/XMCLib/src/xmc_dma.c ****   }
 139:../Libraries/XMCLib/src/xmc_dma.c ****   else
 140:../Libraries/XMCLib/src/xmc_dma.c ****   {
 141:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 142:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 143:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 144:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 379              	 .loc 2 144 5
 380 0018 0748     	 ldr r0,.L17+8
 381 001a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 382              	.L16:
 145:../Libraries/XMCLib/src/xmc_dma.c ****   }
 146:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 147:../Libraries/XMCLib/src/xmc_dma.c **** 
 148:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 383              	 .loc 2 148 18
 384 001e 7B68     	 ldr r3,[r7,#4]
 385 0020 0122     	 movs r2,#1
 386 0022 C3F89823 	 str r2,[r3,#920]
 149:../Libraries/XMCLib/src/xmc_dma.c **** }
 387              	 .loc 2 149 1
 388 0026 00BF     	 nop
 389 0028 0837     	 adds r7,r7,#8
 390              	.LCFI44:
 391              	 .cfi_def_cfa_offset 8
 392 002a BD46     	 mov sp,r7
 393              	.LCFI45:
 394              	 .cfi_def_cfa_register 13
 395              	 
 396 002c 80BD     	 pop {r7,pc}
 397              	.L18:
 398 002e 00BF     	 .align 2
 399              	.L17:
 400 0030 00400150 	 .word 1342259200
 401 0034 10000020 	 .word 536870928
 402 0038 20000020 	 .word 536870944
 403              	 .cfi_endproc
 404              	.LFE186:
 406              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 407              	 .align 1
 408              	 .global XMC_DMA_Disable
 409              	 .syntax unified
 410              	 .thumb
 411              	 .thumb_func
 412              	 .fpu fpv4-sp-d16
 414              	XMC_DMA_Disable:
 415              	.LFB187:
 150:../Libraries/XMCLib/src/xmc_dma.c **** 
 151:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 152:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 153:../Libraries/XMCLib/src/xmc_dma.c **** {
 416              	 .loc 2 153 1
 417              	 .cfi_startproc
 418              	 
 419              	 
 420 0000 80B5     	 push {r7,lr}
 421              	.LCFI46:
 422              	 .cfi_def_cfa_offset 8
 423              	 .cfi_offset 7,-8
 424              	 .cfi_offset 14,-4
 425 0002 82B0     	 sub sp,sp,#8
 426              	.LCFI47:
 427              	 .cfi_def_cfa_offset 16
 428 0004 00AF     	 add r7,sp,#0
 429              	.LCFI48:
 430              	 .cfi_def_cfa_register 7
 431 0006 7860     	 str r0,[r7,#4]
 154:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 432              	 .loc 2 154 18
 433 0008 7B68     	 ldr r3,[r7,#4]
 434 000a 0022     	 movs r2,#0
 435 000c C3F89823 	 str r2,[r3,#920]
 155:../Libraries/XMCLib/src/xmc_dma.c **** 
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 157:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 436              	 .loc 2 157 6
 437 0010 7B68     	 ldr r3,[r7,#4]
 438 0012 074A     	 ldr r2,.L23
 439 0014 9342     	 cmp r3,r2
 440 0016 03D1     	 bne .L20
 158:../Libraries/XMCLib/src/xmc_dma.c ****   {
 159:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 160:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 441              	 .loc 2 160 5
 442 0018 0648     	 ldr r0,.L23+4
 443 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 161:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 162:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 163:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 164:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 165:../Libraries/XMCLib/src/xmc_dma.c ****   }
 166:../Libraries/XMCLib/src/xmc_dma.c ****   else
 167:../Libraries/XMCLib/src/xmc_dma.c ****   {
 168:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 169:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 170:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 171:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 172:../Libraries/XMCLib/src/xmc_dma.c ****   }
 173:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 174:../Libraries/XMCLib/src/xmc_dma.c **** }
 444              	 .loc 2 174 1
 445 001e 02E0     	 b .L22
 446              	.L20:
 168:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 447              	 .loc 2 168 5
 448 0020 0548     	 ldr r0,.L23+8
 449 0022 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 450              	.L22:
 451              	 .loc 2 174 1
 452 0026 00BF     	 nop
 453 0028 0837     	 adds r7,r7,#8
 454              	.LCFI49:
 455              	 .cfi_def_cfa_offset 8
 456 002a BD46     	 mov sp,r7
 457              	.LCFI50:
 458              	 .cfi_def_cfa_register 13
 459              	 
 460 002c 80BD     	 pop {r7,pc}
 461              	.L24:
 462 002e 00BF     	 .align 2
 463              	.L23:
 464 0030 00400150 	 .word 1342259200
 465 0034 10000020 	 .word 536870928
 466 0038 20000020 	 .word 536870944
 467              	 .cfi_endproc
 468              	.LFE187:
 470              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 471              	 .align 1
 472              	 .global XMC_DMA_IsEnabled
 473              	 .syntax unified
 474              	 .thumb
 475              	 .thumb_func
 476              	 .fpu fpv4-sp-d16
 478              	XMC_DMA_IsEnabled:
 479              	.LFB188:
 175:../Libraries/XMCLib/src/xmc_dma.c **** 
 176:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 177:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 178:../Libraries/XMCLib/src/xmc_dma.c **** {
 480              	 .loc 2 178 1
 481              	 .cfi_startproc
 482              	 
 483              	 
 484 0000 80B5     	 push {r7,lr}
 485              	.LCFI51:
 486              	 .cfi_def_cfa_offset 8
 487              	 .cfi_offset 7,-8
 488              	 .cfi_offset 14,-4
 489 0002 84B0     	 sub sp,sp,#16
 490              	.LCFI52:
 491              	 .cfi_def_cfa_offset 24
 492 0004 00AF     	 add r7,sp,#0
 493              	.LCFI53:
 494              	 .cfi_def_cfa_register 7
 495 0006 7860     	 str r0,[r7,#4]
 179:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 180:../Libraries/XMCLib/src/xmc_dma.c **** 
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 182:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 496              	 .loc 2 182 6
 497 0008 7B68     	 ldr r3,[r7,#4]
 498 000a 1F4A     	 ldr r2,.L32
 499 000c 9342     	 cmp r3,r2
 500 000e 11D1     	 bne .L26
 183:../Libraries/XMCLib/src/xmc_dma.c ****   {
 184:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 185:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 501              	 .loc 2 185 15
 502 0010 1E48     	 ldr r0,.L32+4
 503 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 504 0016 0346     	 mov r3,r0
 505              	 .loc 2 185 5
 506 0018 002B     	 cmp r3,#0
 507 001a 14BF     	 ite ne
 508 001c 0123     	 movne r3,#1
 509 001e 0023     	 moveq r3,#0
 510 0020 DBB2     	 uxtb r3,r3
 511 0022 83F00103 	 eor r3,r3,#1
 512 0026 DBB2     	 uxtb r3,r3
 513              	 .loc 2 185 12
 514 0028 FB73     	 strb r3,[r7,#15]
 515 002a FB7B     	 ldrb r3,[r7,#15]
 516 002c 03F00103 	 and r3,r3,#1
 517 0030 FB73     	 strb r3,[r7,#15]
 518 0032 10E0     	 b .L27
 519              	.L26:
 186:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 187:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 188:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 189:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 190:../Libraries/XMCLib/src/xmc_dma.c ****   }
 191:../Libraries/XMCLib/src/xmc_dma.c ****   else
 192:../Libraries/XMCLib/src/xmc_dma.c ****   {
 193:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 520              	 .loc 2 193 15
 521 0034 1648     	 ldr r0,.L32+8
 522 0036 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 523 003a 0346     	 mov r3,r0
 524              	 .loc 2 193 5
 525 003c 002B     	 cmp r3,#0
 526 003e 14BF     	 ite ne
 527 0040 0123     	 movne r3,#1
 528 0042 0023     	 moveq r3,#0
 529 0044 DBB2     	 uxtb r3,r3
 530 0046 83F00103 	 eor r3,r3,#1
 531 004a DBB2     	 uxtb r3,r3
 532              	 .loc 2 193 12
 533 004c FB73     	 strb r3,[r7,#15]
 534 004e FB7B     	 ldrb r3,[r7,#15]
 535 0050 03F00103 	 and r3,r3,#1
 536 0054 FB73     	 strb r3,[r7,#15]
 537              	.L27:
 194:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 195:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 196:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 197:../Libraries/XMCLib/src/xmc_dma.c ****   }
 198:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 199:../Libraries/XMCLib/src/xmc_dma.c **** 
 200:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 201:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 538              	 .loc 2 201 6
 539 0056 FB7B     	 ldrb r3,[r7,#15]
 540 0058 002B     	 cmp r3,#0
 541 005a 0FD0     	 beq .L28
 202:../Libraries/XMCLib/src/xmc_dma.c ****   {
 203:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 542              	 .loc 2 203 21
 543 005c FB7B     	 ldrb r3,[r7,#15]
 544 005e 002B     	 cmp r3,#0
 545 0060 06D0     	 beq .L29
 546              	 .loc 2 203 28 discriminator 1
 547 0062 7B68     	 ldr r3,[r7,#4]
 548 0064 D3F89833 	 ldr r3,[r3,#920]
 549              	 .loc 2 203 21 discriminator 1
 550 0068 002B     	 cmp r3,#0
 551 006a 01D0     	 beq .L29
 552              	 .loc 2 203 21 is_stmt 0 discriminator 3
 553 006c 0123     	 movs r3,#1
 554 006e 00E0     	 b .L30
 555              	.L29:
 556              	 .loc 2 203 21 discriminator 4
 557 0070 0023     	 movs r3,#0
 558              	.L30:
 559              	 .loc 2 203 12 is_stmt 1 discriminator 6
 560 0072 FB73     	 strb r3,[r7,#15]
 561 0074 FB7B     	 ldrb r3,[r7,#15]
 562 0076 03F00103 	 and r3,r3,#1
 563 007a FB73     	 strb r3,[r7,#15]
 564              	.L28:
 204:../Libraries/XMCLib/src/xmc_dma.c ****   }
 205:../Libraries/XMCLib/src/xmc_dma.c **** 
 206:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 565              	 .loc 2 206 10
 566 007c FB7B     	 ldrb r3,[r7,#15]
 207:../Libraries/XMCLib/src/xmc_dma.c **** }
 567              	 .loc 2 207 1
 568 007e 1846     	 mov r0,r3
 569 0080 1037     	 adds r7,r7,#16
 570              	.LCFI54:
 571              	 .cfi_def_cfa_offset 8
 572 0082 BD46     	 mov sp,r7
 573              	.LCFI55:
 574              	 .cfi_def_cfa_register 13
 575              	 
 576 0084 80BD     	 pop {r7,pc}
 577              	.L33:
 578 0086 00BF     	 .align 2
 579              	.L32:
 580 0088 00400150 	 .word 1342259200
 581 008c 10000020 	 .word 536870928
 582 0090 20000020 	 .word 536870944
 583              	 .cfi_endproc
 584              	.LFE188:
 586              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 587              	 .align 1
 588              	 .global XMC_DMA_EnableRequestLine
 589              	 .syntax unified
 590              	 .thumb
 591              	 .thumb_func
 592              	 .fpu fpv4-sp-d16
 594              	XMC_DMA_EnableRequestLine:
 595              	.LFB189:
 208:../Libraries/XMCLib/src/xmc_dma.c **** 
 209:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 210:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 211:../Libraries/XMCLib/src/xmc_dma.c **** {
 596              	 .loc 2 211 1
 597              	 .cfi_startproc
 598              	 
 599              	 
 600              	 
 601 0000 80B4     	 push {r7}
 602              	.LCFI56:
 603              	 .cfi_def_cfa_offset 4
 604              	 .cfi_offset 7,-4
 605 0002 83B0     	 sub sp,sp,#12
 606              	.LCFI57:
 607              	 .cfi_def_cfa_offset 16
 608 0004 00AF     	 add r7,sp,#0
 609              	.LCFI58:
 610              	 .cfi_def_cfa_register 7
 611 0006 7860     	 str r0,[r7,#4]
 612 0008 0B46     	 mov r3,r1
 613 000a FB70     	 strb r3,[r7,#3]
 614 000c 1346     	 mov r3,r2
 615 000e BB70     	 strb r3,[r7,#2]
 212:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 213:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 616              	 .loc 2 213 6
 617 0010 7B68     	 ldr r3,[r7,#4]
 618 0012 204A     	 ldr r2,.L38
 619 0014 9342     	 cmp r3,r2
 620 0016 1CD1     	 bne .L35
 214:../Libraries/XMCLib/src/xmc_dma.c ****   {
 215:../Libraries/XMCLib/src/xmc_dma.c **** #else
 216:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 217:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 218:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 621              	 .loc 2 218 24
 622 0018 1F4B     	 ldr r3,.L38+4
 623 001a 9A68     	 ldr r2,[r3,#8]
 624              	 .loc 2 218 73
 625 001c FB78     	 ldrb r3,[r7,#3]
 626 001e 9B00     	 lsls r3,r3,#2
 627              	 .loc 2 218 64
 628 0020 0F21     	 movs r1,#15
 629 0022 01FA03F3 	 lsl r3,r1,r3
 630              	 .loc 2 218 35
 631 0026 DB43     	 mvns r3,r3
 632              	 .loc 2 218 33
 633 0028 1A40     	 ands r2,r2,r3
 219:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 634              	 .loc 2 219 21
 635 002a B978     	 ldrb r1,[r7,#2]
 636              	 .loc 2 219 51
 637 002c FB78     	 ldrb r3,[r7,#3]
 638 002e 9B00     	 lsls r3,r3,#2
 639              	 .loc 2 219 42
 640 0030 01FA03F3 	 lsl r3,r1,r3
 218:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 641              	 .loc 2 218 8
 642 0034 1849     	 ldr r1,.L38+4
 218:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 643              	 .loc 2 218 99
 644 0036 1343     	 orrs r3,r3,r2
 218:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 645              	 .loc 2 218 17
 646 0038 8B60     	 str r3,[r1,#8]
 220:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 647              	 .loc 2 220 15
 648 003a 174B     	 ldr r3,.L38+4
 649 003c 1A69     	 ldr r2,[r3,#16]
 650              	 .loc 2 220 34
 651 003e FB78     	 ldrb r3,[r7,#3]
 652 0040 03F00703 	 and r3,r3,#7
 653              	 .loc 2 220 25
 654 0044 0121     	 movs r1,#1
 655 0046 01FA03F3 	 lsl r3,r1,r3
 656              	 .loc 2 220 15
 657 004a 1349     	 ldr r1,.L38+4
 658 004c 1343     	 orrs r3,r3,r2
 659 004e 0B61     	 str r3,[r1,#16]
 221:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 222:../Libraries/XMCLib/src/xmc_dma.c ****   }
 223:../Libraries/XMCLib/src/xmc_dma.c ****   else
 224:../Libraries/XMCLib/src/xmc_dma.c ****   {
 225:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 226:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 227:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 228:../Libraries/XMCLib/src/xmc_dma.c ****   }
 229:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 230:../Libraries/XMCLib/src/xmc_dma.c **** }
 660              	 .loc 2 230 1
 661 0050 1AE0     	 b .L37
 662              	.L35:
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 663              	 .loc 2 225 24
 664 0052 114B     	 ldr r3,.L38+4
 665 0054 DA68     	 ldr r2,[r3,#12]
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 666              	 .loc 2 225 73
 667 0056 FB78     	 ldrb r3,[r7,#3]
 668 0058 9B00     	 lsls r3,r3,#2
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 669              	 .loc 2 225 64
 670 005a 0F21     	 movs r1,#15
 671 005c 01FA03F3 	 lsl r3,r1,r3
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 672              	 .loc 2 225 35
 673 0060 DB43     	 mvns r3,r3
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 674              	 .loc 2 225 33
 675 0062 1A40     	 ands r2,r2,r3
 226:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 676              	 .loc 2 226 21
 677 0064 B978     	 ldrb r1,[r7,#2]
 226:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 678              	 .loc 2 226 51
 679 0066 FB78     	 ldrb r3,[r7,#3]
 680 0068 9B00     	 lsls r3,r3,#2
 226:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 681              	 .loc 2 226 42
 682 006a 01FA03F3 	 lsl r3,r1,r3
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 683              	 .loc 2 225 8
 684 006e 0A49     	 ldr r1,.L38+4
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 685              	 .loc 2 225 99
 686 0070 1343     	 orrs r3,r3,r2
 225:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 687              	 .loc 2 225 17
 688 0072 CB60     	 str r3,[r1,#12]
 227:../Libraries/XMCLib/src/xmc_dma.c ****   }
 689              	 .loc 2 227 15
 690 0074 084B     	 ldr r3,.L38+4
 691 0076 1A69     	 ldr r2,[r3,#16]
 227:../Libraries/XMCLib/src/xmc_dma.c ****   }
 692              	 .loc 2 227 27
 693 0078 FB78     	 ldrb r3,[r7,#3]
 694 007a 4FF48071 	 mov r1,#256
 695 007e 01FA03F3 	 lsl r3,r1,r3
 227:../Libraries/XMCLib/src/xmc_dma.c ****   }
 696              	 .loc 2 227 15
 697 0082 0549     	 ldr r1,.L38+4
 698 0084 1343     	 orrs r3,r3,r2
 699 0086 0B61     	 str r3,[r1,#16]
 700              	.L37:
 701              	 .loc 2 230 1
 702 0088 00BF     	 nop
 703 008a 0C37     	 adds r7,r7,#12
 704              	.LCFI59:
 705              	 .cfi_def_cfa_offset 4
 706 008c BD46     	 mov sp,r7
 707              	.LCFI60:
 708              	 .cfi_def_cfa_register 13
 709              	 
 710 008e 5DF8047B 	 ldr r7,[sp],#4
 711              	.LCFI61:
 712              	 .cfi_restore 7
 713              	 .cfi_def_cfa_offset 0
 714 0092 7047     	 bx lr
 715              	.L39:
 716              	 .align 2
 717              	.L38:
 718 0094 00400150 	 .word 1342259200
 719 0098 00490050 	 .word 1342195968
 720              	 .cfi_endproc
 721              	.LFE189:
 723              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 724              	 .align 1
 725              	 .global XMC_DMA_DisableRequestLine
 726              	 .syntax unified
 727              	 .thumb
 728              	 .thumb_func
 729              	 .fpu fpv4-sp-d16
 731              	XMC_DMA_DisableRequestLine:
 732              	.LFB190:
 231:../Libraries/XMCLib/src/xmc_dma.c **** 
 232:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 233:../Libraries/XMCLib/src/xmc_dma.c **** {
 733              	 .loc 2 233 1
 734              	 .cfi_startproc
 735              	 
 736              	 
 737              	 
 738 0000 80B4     	 push {r7}
 739              	.LCFI62:
 740              	 .cfi_def_cfa_offset 4
 741              	 .cfi_offset 7,-4
 742 0002 83B0     	 sub sp,sp,#12
 743              	.LCFI63:
 744              	 .cfi_def_cfa_offset 16
 745 0004 00AF     	 add r7,sp,#0
 746              	.LCFI64:
 747              	 .cfi_def_cfa_register 7
 748 0006 7860     	 str r0,[r7,#4]
 749 0008 0B46     	 mov r3,r1
 750 000a FB70     	 strb r3,[r7,#3]
 234:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 235:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 751              	 .loc 2 235 6
 752 000c 7B68     	 ldr r3,[r7,#4]
 753 000e 0F4A     	 ldr r2,.L44
 754 0010 9342     	 cmp r3,r2
 755 0012 0AD1     	 bne .L41
 236:../Libraries/XMCLib/src/xmc_dma.c ****   {
 237:../Libraries/XMCLib/src/xmc_dma.c **** #else
 238:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 239:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 240:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 756              	 .loc 2 240 15
 757 0014 0E4B     	 ldr r3,.L44+4
 758 0016 1A69     	 ldr r2,[r3,#16]
 759              	 .loc 2 240 26
 760 0018 FB78     	 ldrb r3,[r7,#3]
 761 001a 0121     	 movs r1,#1
 762 001c 01FA03F3 	 lsl r3,r1,r3
 763              	 .loc 2 240 18
 764 0020 DB43     	 mvns r3,r3
 765              	 .loc 2 240 15
 766 0022 0B49     	 ldr r1,.L44+4
 767 0024 1340     	 ands r3,r3,r2
 768 0026 0B61     	 str r3,[r1,#16]
 241:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 242:../Libraries/XMCLib/src/xmc_dma.c ****   }
 243:../Libraries/XMCLib/src/xmc_dma.c ****   else
 244:../Libraries/XMCLib/src/xmc_dma.c ****   {
 245:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 246:../Libraries/XMCLib/src/xmc_dma.c ****   }
 247:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 248:../Libraries/XMCLib/src/xmc_dma.c **** }
 769              	 .loc 2 248 1
 770 0028 0AE0     	 b .L43
 771              	.L41:
 245:../Libraries/XMCLib/src/xmc_dma.c ****   }
 772              	 .loc 2 245 15
 773 002a 094B     	 ldr r3,.L44+4
 774 002c 1A69     	 ldr r2,[r3,#16]
 245:../Libraries/XMCLib/src/xmc_dma.c ****   }
 775              	 .loc 2 245 28
 776 002e FB78     	 ldrb r3,[r7,#3]
 777 0030 4FF48071 	 mov r1,#256
 778 0034 01FA03F3 	 lsl r3,r1,r3
 245:../Libraries/XMCLib/src/xmc_dma.c ****   }
 779              	 .loc 2 245 18
 780 0038 DB43     	 mvns r3,r3
 245:../Libraries/XMCLib/src/xmc_dma.c ****   }
 781              	 .loc 2 245 15
 782 003a 0549     	 ldr r1,.L44+4
 783 003c 1340     	 ands r3,r3,r2
 784 003e 0B61     	 str r3,[r1,#16]
 785              	.L43:
 786              	 .loc 2 248 1
 787 0040 00BF     	 nop
 788 0042 0C37     	 adds r7,r7,#12
 789              	.LCFI65:
 790              	 .cfi_def_cfa_offset 4
 791 0044 BD46     	 mov sp,r7
 792              	.LCFI66:
 793              	 .cfi_def_cfa_register 13
 794              	 
 795 0046 5DF8047B 	 ldr r7,[sp],#4
 796              	.LCFI67:
 797              	 .cfi_restore 7
 798              	 .cfi_def_cfa_offset 0
 799 004a 7047     	 bx lr
 800              	.L45:
 801              	 .align 2
 802              	.L44:
 803 004c 00400150 	 .word 1342259200
 804 0050 00490050 	 .word 1342195968
 805              	 .cfi_endproc
 806              	.LFE190:
 808              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 809              	 .align 1
 810              	 .global XMC_DMA_ClearRequestLine
 811              	 .syntax unified
 812              	 .thumb
 813              	 .thumb_func
 814              	 .fpu fpv4-sp-d16
 816              	XMC_DMA_ClearRequestLine:
 817              	.LFB191:
 249:../Libraries/XMCLib/src/xmc_dma.c **** 
 250:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 251:../Libraries/XMCLib/src/xmc_dma.c **** {
 818              	 .loc 2 251 1
 819              	 .cfi_startproc
 820              	 
 821              	 
 822              	 
 823 0000 80B4     	 push {r7}
 824              	.LCFI68:
 825              	 .cfi_def_cfa_offset 4
 826              	 .cfi_offset 7,-4
 827 0002 83B0     	 sub sp,sp,#12
 828              	.LCFI69:
 829              	 .cfi_def_cfa_offset 16
 830 0004 00AF     	 add r7,sp,#0
 831              	.LCFI70:
 832              	 .cfi_def_cfa_register 7
 833 0006 7860     	 str r0,[r7,#4]
 834 0008 0B46     	 mov r3,r1
 835 000a FB70     	 strb r3,[r7,#3]
 252:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 253:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 836              	 .loc 2 253 6
 837 000c 7B68     	 ldr r3,[r7,#4]
 838 000e 194A     	 ldr r2,.L50
 839 0010 9342     	 cmp r3,r2
 840 0012 13D1     	 bne .L47
 254:../Libraries/XMCLib/src/xmc_dma.c ****   {
 255:../Libraries/XMCLib/src/xmc_dma.c **** #else
 256:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 257:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 258:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 841              	 .loc 2 258 15
 842 0014 184B     	 ldr r3,.L50+4
 843 0016 1A69     	 ldr r2,[r3,#16]
 844              	 .loc 2 258 26
 845 0018 FB78     	 ldrb r3,[r7,#3]
 846 001a 0121     	 movs r1,#1
 847 001c 01FA03F3 	 lsl r3,r1,r3
 848              	 .loc 2 258 18
 849 0020 DB43     	 mvns r3,r3
 850              	 .loc 2 258 15
 851 0022 1549     	 ldr r1,.L50+4
 852 0024 1340     	 ands r3,r3,r2
 853 0026 0B61     	 str r3,[r1,#16]
 259:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x1UL << line;
 854              	 .loc 2 259 15
 855 0028 134B     	 ldr r3,.L50+4
 856 002a 1A69     	 ldr r2,[r3,#16]
 857              	 .loc 2 259 24
 858 002c FB78     	 ldrb r3,[r7,#3]
 859 002e 0121     	 movs r1,#1
 860 0030 01FA03F3 	 lsl r3,r1,r3
 861              	 .loc 2 259 15
 862 0034 1049     	 ldr r1,.L50+4
 863 0036 1343     	 orrs r3,r3,r2
 864 0038 0B61     	 str r3,[r1,#16]
 260:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 261:../Libraries/XMCLib/src/xmc_dma.c ****   }
 262:../Libraries/XMCLib/src/xmc_dma.c ****   else
 263:../Libraries/XMCLib/src/xmc_dma.c ****   {
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 265:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 266:../Libraries/XMCLib/src/xmc_dma.c ****   }
 267:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 268:../Libraries/XMCLib/src/xmc_dma.c **** }
 865              	 .loc 2 268 1
 866 003a 14E0     	 b .L49
 867              	.L47:
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 868              	 .loc 2 264 15
 869 003c 0E4B     	 ldr r3,.L50+4
 870 003e 1A69     	 ldr r2,[r3,#16]
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 871              	 .loc 2 264 28
 872 0040 FB78     	 ldrb r3,[r7,#3]
 873 0042 4FF48071 	 mov r1,#256
 874 0046 01FA03F3 	 lsl r3,r1,r3
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 875              	 .loc 2 264 18
 876 004a DB43     	 mvns r3,r3
 264:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= 0x100UL << line;
 877              	 .loc 2 264 15
 878 004c 0A49     	 ldr r1,.L50+4
 879 004e 1340     	 ands r3,r3,r2
 880 0050 0B61     	 str r3,[r1,#16]
 265:../Libraries/XMCLib/src/xmc_dma.c ****   }
 881              	 .loc 2 265 15
 882 0052 094B     	 ldr r3,.L50+4
 883 0054 1A69     	 ldr r2,[r3,#16]
 265:../Libraries/XMCLib/src/xmc_dma.c ****   }
 884              	 .loc 2 265 26
 885 0056 FB78     	 ldrb r3,[r7,#3]
 886 0058 4FF48071 	 mov r1,#256
 887 005c 01FA03F3 	 lsl r3,r1,r3
 265:../Libraries/XMCLib/src/xmc_dma.c ****   }
 888              	 .loc 2 265 15
 889 0060 0549     	 ldr r1,.L50+4
 890 0062 1343     	 orrs r3,r3,r2
 891 0064 0B61     	 str r3,[r1,#16]
 892              	.L49:
 893              	 .loc 2 268 1
 894 0066 00BF     	 nop
 895 0068 0C37     	 adds r7,r7,#12
 896              	.LCFI71:
 897              	 .cfi_def_cfa_offset 4
 898 006a BD46     	 mov sp,r7
 899              	.LCFI72:
 900              	 .cfi_def_cfa_register 13
 901              	 
 902 006c 5DF8047B 	 ldr r7,[sp],#4
 903              	.LCFI73:
 904              	 .cfi_restore 7
 905              	 .cfi_def_cfa_offset 0
 906 0070 7047     	 bx lr
 907              	.L51:
 908 0072 00BF     	 .align 2
 909              	.L50:
 910 0074 00400150 	 .word 1342259200
 911 0078 00490050 	 .word 1342195968
 912              	 .cfi_endproc
 913              	.LFE191:
 915              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 916              	 .align 1
 917              	 .global XMC_DMA_GetOverrunStatus
 918              	 .syntax unified
 919              	 .thumb
 920              	 .thumb_func
 921              	 .fpu fpv4-sp-d16
 923              	XMC_DMA_GetOverrunStatus:
 924              	.LFB192:
 269:../Libraries/XMCLib/src/xmc_dma.c **** 
 270:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 271:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 272:../Libraries/XMCLib/src/xmc_dma.c **** {
 925              	 .loc 2 272 1
 926              	 .cfi_startproc
 927              	 
 928              	 
 929              	 
 930 0000 80B4     	 push {r7}
 931              	.LCFI74:
 932              	 .cfi_def_cfa_offset 4
 933              	 .cfi_offset 7,-4
 934 0002 85B0     	 sub sp,sp,#20
 935              	.LCFI75:
 936              	 .cfi_def_cfa_offset 24
 937 0004 00AF     	 add r7,sp,#0
 938              	.LCFI76:
 939              	 .cfi_def_cfa_register 7
 940 0006 7860     	 str r0,[r7,#4]
 941 0008 0B46     	 mov r3,r1
 942 000a FB70     	 strb r3,[r7,#3]
 273:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 274:../Libraries/XMCLib/src/xmc_dma.c **** 
 275:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 276:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 943              	 .loc 2 276 6
 944 000c 7B68     	 ldr r3,[r7,#4]
 945 000e 124A     	 ldr r2,.L56
 946 0010 9342     	 cmp r3,r2
 947 0012 0CD1     	 bne .L53
 277:../Libraries/XMCLib/src/xmc_dma.c ****   {
 278:../Libraries/XMCLib/src/xmc_dma.c **** #else
 279:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 280:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 281:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 948              	 .loc 2 281 24
 949 0014 114B     	 ldr r3,.L56+4
 950 0016 1A68     	 ldr r2,[r3]
 951              	 .loc 2 281 14
 952 0018 FB78     	 ldrb r3,[r7,#3]
 953 001a 22FA03F3 	 lsr r3,r2,r3
 954 001e 03F00103 	 and r3,r3,#1
 955              	 .loc 2 281 12
 956 0022 002B     	 cmp r3,#0
 957 0024 14BF     	 ite ne
 958 0026 0123     	 movne r3,#1
 959 0028 0023     	 moveq r3,#0
 960 002a FB73     	 strb r3,[r7,#15]
 961 002c 0CE0     	 b .L54
 962              	.L53:
 282:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 283:../Libraries/XMCLib/src/xmc_dma.c ****   }
 284:../Libraries/XMCLib/src/xmc_dma.c ****   else
 285:../Libraries/XMCLib/src/xmc_dma.c ****   {
 286:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 963              	 .loc 2 286 24
 964 002e 0B4B     	 ldr r3,.L56+4
 965 0030 1A68     	 ldr r2,[r3]
 966              	 .loc 2 286 45
 967 0032 FB78     	 ldrb r3,[r7,#3]
 968 0034 4FF48071 	 mov r1,#256
 969 0038 01FA03F3 	 lsl r3,r1,r3
 970              	 .loc 2 286 34
 971 003c 1340     	 ands r3,r3,r2
 972              	 .loc 2 286 12
 973 003e 002B     	 cmp r3,#0
 974 0040 14BF     	 ite ne
 975 0042 0123     	 movne r3,#1
 976 0044 0023     	 moveq r3,#0
 977 0046 FB73     	 strb r3,[r7,#15]
 978              	.L54:
 287:../Libraries/XMCLib/src/xmc_dma.c ****   }
 288:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 289:../Libraries/XMCLib/src/xmc_dma.c **** 
 290:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 979              	 .loc 2 290 10
 980 0048 FB7B     	 ldrb r3,[r7,#15]
 291:../Libraries/XMCLib/src/xmc_dma.c **** }
 981              	 .loc 2 291 1
 982 004a 1846     	 mov r0,r3
 983 004c 1437     	 adds r7,r7,#20
 984              	.LCFI77:
 985              	 .cfi_def_cfa_offset 4
 986 004e BD46     	 mov sp,r7
 987              	.LCFI78:
 988              	 .cfi_def_cfa_register 13
 989              	 
 990 0050 5DF8047B 	 ldr r7,[sp],#4
 991              	.LCFI79:
 992              	 .cfi_restore 7
 993              	 .cfi_def_cfa_offset 0
 994 0054 7047     	 bx lr
 995              	.L57:
 996 0056 00BF     	 .align 2
 997              	.L56:
 998 0058 00400150 	 .word 1342259200
 999 005c 00490050 	 .word 1342195968
 1000              	 .cfi_endproc
 1001              	.LFE192:
 1003              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 1004              	 .align 1
 1005              	 .global XMC_DMA_ClearOverrunStatus
 1006              	 .syntax unified
 1007              	 .thumb
 1008              	 .thumb_func
 1009              	 .fpu fpv4-sp-d16
 1011              	XMC_DMA_ClearOverrunStatus:
 1012              	.LFB193:
 292:../Libraries/XMCLib/src/xmc_dma.c **** 
 293:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 294:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 295:../Libraries/XMCLib/src/xmc_dma.c **** {
 1013              	 .loc 2 295 1
 1014              	 .cfi_startproc
 1015              	 
 1016              	 
 1017              	 
 1018 0000 80B4     	 push {r7}
 1019              	.LCFI80:
 1020              	 .cfi_def_cfa_offset 4
 1021              	 .cfi_offset 7,-4
 1022 0002 83B0     	 sub sp,sp,#12
 1023              	.LCFI81:
 1024              	 .cfi_def_cfa_offset 16
 1025 0004 00AF     	 add r7,sp,#0
 1026              	.LCFI82:
 1027              	 .cfi_def_cfa_register 7
 1028 0006 7860     	 str r0,[r7,#4]
 1029 0008 0B46     	 mov r3,r1
 1030 000a FB70     	 strb r3,[r7,#3]
 296:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 297:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 1031              	 .loc 2 297 6
 1032 000c 7B68     	 ldr r3,[r7,#4]
 1033 000e 0B4A     	 ldr r2,.L62
 1034 0010 9342     	 cmp r3,r2
 1035 0012 06D1     	 bne .L59
 298:../Libraries/XMCLib/src/xmc_dma.c ****   {
 299:../Libraries/XMCLib/src/xmc_dma.c **** #else
 300:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 301:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 302:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 1036              	 .loc 2 302 19
 1037 0014 FB78     	 ldrb r3,[r7,#3]
 1038              	 .loc 2 302 8
 1039 0016 0A4A     	 ldr r2,.L62+4
 1040              	 .loc 2 302 19
 1041 0018 0121     	 movs r1,#1
 1042 001a 01FA03F3 	 lsl r3,r1,r3
 1043              	 .loc 2 302 17
 1044 001e 5360     	 str r3,[r2,#4]
 303:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 304:../Libraries/XMCLib/src/xmc_dma.c ****   }
 305:../Libraries/XMCLib/src/xmc_dma.c ****   else
 306:../Libraries/XMCLib/src/xmc_dma.c ****   {
 307:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 308:../Libraries/XMCLib/src/xmc_dma.c ****   }
 309:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 310:../Libraries/XMCLib/src/xmc_dma.c **** }
 1045              	 .loc 2 310 1
 1046 0020 06E0     	 b .L61
 1047              	.L59:
 307:../Libraries/XMCLib/src/xmc_dma.c ****   }
 1048              	 .loc 2 307 19
 1049 0022 FB78     	 ldrb r3,[r7,#3]
 307:../Libraries/XMCLib/src/xmc_dma.c ****   }
 1050              	 .loc 2 307 8
 1051 0024 064A     	 ldr r2,.L62+4
 307:../Libraries/XMCLib/src/xmc_dma.c ****   }
 1052              	 .loc 2 307 19
 1053 0026 4FF48071 	 mov r1,#256
 1054 002a 01FA03F3 	 lsl r3,r1,r3
 307:../Libraries/XMCLib/src/xmc_dma.c ****   }
 1055              	 .loc 2 307 17
 1056 002e 5360     	 str r3,[r2,#4]
 1057              	.L61:
 1058              	 .loc 2 310 1
 1059 0030 00BF     	 nop
 1060 0032 0C37     	 adds r7,r7,#12
 1061              	.LCFI83:
 1062              	 .cfi_def_cfa_offset 4
 1063 0034 BD46     	 mov sp,r7
 1064              	.LCFI84:
 1065              	 .cfi_def_cfa_register 13
 1066              	 
 1067 0036 5DF8047B 	 ldr r7,[sp],#4
 1068              	.LCFI85:
 1069              	 .cfi_restore 7
 1070              	 .cfi_def_cfa_offset 0
 1071 003a 7047     	 bx lr
 1072              	.L63:
 1073              	 .align 2
 1074              	.L62:
 1075 003c 00400150 	 .word 1342259200
 1076 0040 00490050 	 .word 1342195968
 1077              	 .cfi_endproc
 1078              	.LFE193:
 1080              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 1081              	 .align 1
 1082              	 .global XMC_DMA_CH_Disable
 1083              	 .syntax unified
 1084              	 .thumb
 1085              	 .thumb_func
 1086              	 .fpu fpv4-sp-d16
 1088              	XMC_DMA_CH_Disable:
 1089              	.LFB194:
 311:../Libraries/XMCLib/src/xmc_dma.c **** 
 312:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 313:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 314:../Libraries/XMCLib/src/xmc_dma.c **** {
 1090              	 .loc 2 314 1
 1091              	 .cfi_startproc
 1092              	 
 1093              	 
 1094              	 
 1095 0000 80B4     	 push {r7}
 1096              	.LCFI86:
 1097              	 .cfi_def_cfa_offset 4
 1098              	 .cfi_offset 7,-4
 1099 0002 83B0     	 sub sp,sp,#12
 1100              	.LCFI87:
 1101              	 .cfi_def_cfa_offset 16
 1102 0004 00AF     	 add r7,sp,#0
 1103              	.LCFI88:
 1104              	 .cfi_def_cfa_register 7
 1105 0006 7860     	 str r0,[r7,#4]
 1106 0008 0B46     	 mov r3,r1
 1107 000a FB70     	 strb r3,[r7,#3]
 315:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 1108              	 .loc 2 315 18
 1109 000c FB78     	 ldrb r3,[r7,#3]
 1110 000e 4FF48072 	 mov r2,#256
 1111 0012 9A40     	 lsls r2,r2,r3
 1112              	 .loc 2 315 16
 1113 0014 7B68     	 ldr r3,[r7,#4]
 1114 0016 C3F8A023 	 str r2,[r3,#928]
 316:../Libraries/XMCLib/src/xmc_dma.c ****   while ((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 1115              	 .loc 2 316 9
 1116 001a 00BF     	 nop
 1117              	.L65:
 1118              	 .loc 2 316 14 discriminator 1
 1119 001c 7B68     	 ldr r3,[r7,#4]
 1120 001e D3F8A023 	 ldr r2,[r3,#928]
 1121              	 .loc 2 316 56 discriminator 1
 1122 0022 FB78     	 ldrb r3,[r7,#3]
 1123 0024 22FA03F3 	 lsr r3,r2,r3
 1124 0028 03F00103 	 and r3,r3,#1
 1125              	 .loc 2 316 9 discriminator 1
 1126 002c 002B     	 cmp r3,#0
 1127 002e F5D1     	 bne .L65
 317:../Libraries/XMCLib/src/xmc_dma.c ****   {
 318:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 319:../Libraries/XMCLib/src/xmc_dma.c ****   }
 320:../Libraries/XMCLib/src/xmc_dma.c **** }
 1128              	 .loc 2 320 1
 1129 0030 00BF     	 nop
 1130 0032 00BF     	 nop
 1131 0034 0C37     	 adds r7,r7,#12
 1132              	.LCFI89:
 1133              	 .cfi_def_cfa_offset 4
 1134 0036 BD46     	 mov sp,r7
 1135              	.LCFI90:
 1136              	 .cfi_def_cfa_register 13
 1137              	 
 1138 0038 5DF8047B 	 ldr r7,[sp],#4
 1139              	.LCFI91:
 1140              	 .cfi_restore 7
 1141              	 .cfi_def_cfa_offset 0
 1142 003c 7047     	 bx lr
 1143              	 .cfi_endproc
 1144              	.LFE194:
 1146              	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 1147              	 .align 1
 1148              	 .global XMC_DMA_CH_IsEnabled
 1149              	 .syntax unified
 1150              	 .thumb
 1151              	 .thumb_func
 1152              	 .fpu fpv4-sp-d16
 1154              	XMC_DMA_CH_IsEnabled:
 1155              	.LFB195:
 321:../Libraries/XMCLib/src/xmc_dma.c **** 
 322:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 323:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 324:../Libraries/XMCLib/src/xmc_dma.c **** {
 1156              	 .loc 2 324 1
 1157              	 .cfi_startproc
 1158              	 
 1159              	 
 1160              	 
 1161 0000 80B4     	 push {r7}
 1162              	.LCFI92:
 1163              	 .cfi_def_cfa_offset 4
 1164              	 .cfi_offset 7,-4
 1165 0002 83B0     	 sub sp,sp,#12
 1166              	.LCFI93:
 1167              	 .cfi_def_cfa_offset 16
 1168 0004 00AF     	 add r7,sp,#0
 1169              	.LCFI94:
 1170              	 .cfi_def_cfa_register 7
 1171 0006 7860     	 str r0,[r7,#4]
 1172 0008 0B46     	 mov r3,r1
 1173 000a FB70     	 strb r3,[r7,#3]
 325:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 1174              	 .loc 2 325 20
 1175 000c 7B68     	 ldr r3,[r7,#4]
 1176 000e D3F8A023 	 ldr r2,[r3,#928]
 1177              	 .loc 2 325 10
 1178 0012 FB78     	 ldrb r3,[r7,#3]
 1179 0014 22FA03F3 	 lsr r3,r2,r3
 1180 0018 03F00103 	 and r3,r3,#1
 1181 001c 002B     	 cmp r3,#0
 1182 001e 14BF     	 ite ne
 1183 0020 0123     	 movne r3,#1
 1184 0022 0023     	 moveq r3,#0
 1185 0024 DBB2     	 uxtb r3,r3
 326:../Libraries/XMCLib/src/xmc_dma.c **** }
 1186              	 .loc 2 326 1
 1187 0026 1846     	 mov r0,r3
 1188 0028 0C37     	 adds r7,r7,#12
 1189              	.LCFI95:
 1190              	 .cfi_def_cfa_offset 4
 1191 002a BD46     	 mov sp,r7
 1192              	.LCFI96:
 1193              	 .cfi_def_cfa_register 13
 1194              	 
 1195 002c 5DF8047B 	 ldr r7,[sp],#4
 1196              	.LCFI97:
 1197              	 .cfi_restore 7
 1198              	 .cfi_def_cfa_offset 0
 1199 0030 7047     	 bx lr
 1200              	 .cfi_endproc
 1201              	.LFE195:
 1203              	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 1204              	 .align 1
 1205              	 .global XMC_DMA_CH_Init
 1206              	 .syntax unified
 1207              	 .thumb
 1208              	 .thumb_func
 1209              	 .fpu fpv4-sp-d16
 1211              	XMC_DMA_CH_Init:
 1212              	.LFB196:
 327:../Libraries/XMCLib/src/xmc_dma.c **** 
 328:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 329:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 330:../Libraries/XMCLib/src/xmc_dma.c **** {
 1213              	 .loc 2 330 1
 1214              	 .cfi_startproc
 1215              	 
 1216              	 
 1217 0000 80B5     	 push {r7,lr}
 1218              	.LCFI98:
 1219              	 .cfi_def_cfa_offset 8
 1220              	 .cfi_offset 7,-8
 1221              	 .cfi_offset 14,-4
 1222 0002 86B0     	 sub sp,sp,#24
 1223              	.LCFI99:
 1224              	 .cfi_def_cfa_offset 32
 1225 0004 00AF     	 add r7,sp,#0
 1226              	.LCFI100:
 1227              	 .cfi_def_cfa_register 7
 1228 0006 F860     	 str r0,[r7,#12]
 1229 0008 0B46     	 mov r3,r1
 1230 000a 7A60     	 str r2,[r7,#4]
 1231 000c FB72     	 strb r3,[r7,#11]
 331:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 332:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 333:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 334:../Libraries/XMCLib/src/xmc_dma.c **** 
 335:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1232              	 .loc 2 335 7
 1233 000e F868     	 ldr r0,[r7,#12]
 1234 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1235 0014 0346     	 mov r3,r0
 1236              	 .loc 2 335 6
 1237 0016 002B     	 cmp r3,#0
 1238 0018 00F0EF81 	 beq .L69
 336:../Libraries/XMCLib/src/xmc_dma.c ****   {
 337:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1239              	 .loc 2 337 9
 1240 001c FB7A     	 ldrb r3,[r7,#11]
 1241 001e 1946     	 mov r1,r3
 1242 0020 F868     	 ldr r0,[r7,#12]
 1243 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1244 0026 0346     	 mov r3,r0
 1245              	 .loc 2 337 44
 1246 0028 83F00103 	 eor r3,r3,#1
 1247 002c DBB2     	 uxtb r3,r3
 1248              	 .loc 2 337 8
 1249 002e 002B     	 cmp r3,#0
 1250 0030 00F0E081 	 beq .L70
 338:../Libraries/XMCLib/src/xmc_dma.c ****     {
 339:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1251              	 .loc 2 339 23
 1252 0034 FB7A     	 ldrb r3,[r7,#11]
 1253              	 .loc 2 339 36
 1254 0036 7A68     	 ldr r2,[r7,#4]
 1255 0038 5268     	 ldr r2,[r2,#4]
 1256              	 .loc 2 339 28
 1257 003a F968     	 ldr r1,[r7,#12]
 1258 003c 5820     	 movs r0,#88
 1259 003e 00FB03F3 	 mul r3,r0,r3
 1260 0042 0B44     	 add r3,r3,r1
 1261 0044 1A60     	 str r2,[r3]
 340:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1262              	 .loc 2 340 23
 1263 0046 FB7A     	 ldrb r3,[r7,#11]
 1264              	 .loc 2 340 36
 1265 0048 7A68     	 ldr r2,[r7,#4]
 1266 004a 9268     	 ldr r2,[r2,#8]
 1267              	 .loc 2 340 28
 1268 004c F968     	 ldr r1,[r7,#12]
 1269 004e 5820     	 movs r0,#88
 1270 0050 00FB03F3 	 mul r3,r0,r3
 1271 0054 0B44     	 add r3,r3,r1
 1272 0056 0833     	 adds r3,r3,#8
 1273 0058 1A60     	 str r2,[r3]
 341:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1274              	 .loc 2 341 46
 1275 005a 7B68     	 ldr r3,[r7,#4]
 1276 005c DA68     	 ldr r2,[r3,#12]
 1277              	 .loc 2 341 23
 1278 005e FB7A     	 ldrb r3,[r7,#11]
 1279              	 .loc 2 341 30
 1280 0060 1046     	 mov r0,r2
 1281              	 .loc 2 341 28
 1282 0062 FA68     	 ldr r2,[r7,#12]
 1283 0064 5821     	 movs r1,#88
 1284 0066 01FB03F3 	 mul r3,r1,r3
 1285 006a 1344     	 add r3,r3,r2
 1286 006c 1033     	 adds r3,r3,#16
 1287 006e 1860     	 str r0,[r3]
 342:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1288              	 .loc 2 342 47
 1289 0070 7B68     	 ldr r3,[r7,#4]
 1290 0072 1A8B     	 ldrh r2,[r3,#24]
 1291              	 .loc 2 342 23
 1292 0074 FB7A     	 ldrb r3,[r7,#11]
 1293              	 .loc 2 342 31
 1294 0076 1046     	 mov r0,r2
 1295              	 .loc 2 342 29
 1296 0078 FA68     	 ldr r2,[r7,#12]
 1297 007a 5821     	 movs r1,#88
 1298 007c 01FB03F3 	 mul r3,r1,r3
 1299 0080 1344     	 add r3,r3,r2
 1300 0082 1C33     	 adds r3,r3,#28
 1301 0084 1860     	 str r0,[r3]
 343:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1302              	 .loc 2 343 23
 1303 0086 FB7A     	 ldrb r3,[r7,#11]
 1304              	 .loc 2 343 37
 1305 0088 7A68     	 ldr r2,[r7,#4]
 1306 008a 1268     	 ldr r2,[r2]
 1307              	 .loc 2 343 29
 1308 008c F968     	 ldr r1,[r7,#12]
 1309 008e 5820     	 movs r0,#88
 1310 0090 00FB03F3 	 mul r3,r0,r3
 1311 0094 0B44     	 add r3,r3,r1
 1312 0096 1833     	 adds r3,r3,#24
 1313 0098 1A60     	 str r2,[r3]
 344:../Libraries/XMCLib/src/xmc_dma.c **** 
 345:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1314              	 .loc 2 345 58
 1315 009a 7B68     	 ldr r3,[r7,#4]
 1316 009c DB7E     	 ldrb r3,[r3,#27]
 1317              	 .loc 2 345 42
 1318 009e 1A46     	 mov r2,r3
 1319              	 .loc 2 345 23
 1320 00a0 FB7A     	 ldrb r3,[r7,#11]
 1321              	 .loc 2 345 31
 1322 00a2 42F44062 	 orr r2,r2,#3072
 1323              	 .loc 2 345 29
 1324 00a6 F968     	 ldr r1,[r7,#12]
 1325 00a8 5820     	 movs r0,#88
 1326 00aa 00FB03F3 	 mul r3,r0,r3
 1327 00ae 0B44     	 add r3,r3,r1
 1328 00b0 4033     	 adds r3,r3,#64
 1329 00b2 1A60     	 str r2,[r3]
 346:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 347:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 348:../Libraries/XMCLib/src/xmc_dma.c **** 
 349:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1330              	 .loc 2 349 10
 1331 00b4 FB68     	 ldr r3,[r7,#12]
 1332 00b6 B04A     	 ldr r2,.L95
 1333 00b8 9342     	 cmp r3,r2
 1334 00ba 16D1     	 bne .L71
 1335              	 .loc 2 349 29 discriminator 1
 1336 00bc FB7A     	 ldrb r3,[r7,#11]
 1337 00be 012B     	 cmp r3,#1
 1338 00c0 13D8     	 bhi .L71
 350:../Libraries/XMCLib/src/xmc_dma.c ****       {
 351:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 352:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1339              	 .loc 2 352 25
 1340 00c2 FB7A     	 ldrb r3,[r7,#11]
 1341              	 .loc 2 352 38
 1342 00c4 7A68     	 ldr r2,[r7,#4]
 1343 00c6 1269     	 ldr r2,[r2,#16]
 1344              	 .loc 2 352 30
 1345 00c8 F968     	 ldr r1,[r7,#12]
 1346 00ca 5820     	 movs r0,#88
 1347 00cc 00FB03F3 	 mul r3,r0,r3
 1348 00d0 0B44     	 add r3,r3,r1
 1349 00d2 4833     	 adds r3,r3,#72
 1350 00d4 1A60     	 str r2,[r3]
 353:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1351              	 .loc 2 353 25
 1352 00d6 FB7A     	 ldrb r3,[r7,#11]
 1353              	 .loc 2 353 38
 1354 00d8 7A68     	 ldr r2,[r7,#4]
 1355 00da 5269     	 ldr r2,[r2,#20]
 1356              	 .loc 2 353 30
 1357 00dc F968     	 ldr r1,[r7,#12]
 1358 00de 5820     	 movs r0,#88
 1359 00e0 00FB03F3 	 mul r3,r0,r3
 1360 00e4 0B44     	 add r3,r3,r1
 1361 00e6 5033     	 adds r3,r3,#80
 1362 00e8 1A60     	 str r2,[r3]
 1363              	.L71:
 354:../Libraries/XMCLib/src/xmc_dma.c ****       }
 355:../Libraries/XMCLib/src/xmc_dma.c **** 
 356:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1364              	 .loc 2 356 17
 1365 00ea 7B68     	 ldr r3,[r7,#4]
 1366 00ec 1B8C     	 ldrh r3,[r3,#32]
 1367              	 .loc 2 356 10
 1368 00ee 002B     	 cmp r3,#0
 1369 00f0 4ED1     	 bne .L72
 357:../Libraries/XMCLib/src/xmc_dma.c ****       {
 358:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 359:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1370              	 .loc 2 359 36
 1371 00f2 7B68     	 ldr r3,[r7,#4]
 1372 00f4 9B78     	 ldrb r3,[r3,#2]
 1373 00f6 03F07003 	 and r3,r3,#112
 1374 00fa DBB2     	 uxtb r3,r3
 1375              	 .loc 2 359 12
 1376 00fc 102B     	 cmp r3,#16
 1377 00fe 06D0     	 beq .L73
 360:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1378              	 .loc 2 360 36 discriminator 1
 1379 0100 7B68     	 ldr r3,[r7,#4]
 1380 0102 9B78     	 ldrb r3,[r3,#2]
 1381 0104 03F07003 	 and r3,r3,#112
 1382 0108 DBB2     	 uxtb r3,r3
 359:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1383              	 .loc 2 359 83 discriminator 1
 1384 010a 302B     	 cmp r3,#48
 1385 010c 40D1     	 bne .L72
 1386              	.L73:
 361:../Libraries/XMCLib/src/xmc_dma.c ****         {
 362:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 363:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1387              	 .loc 2 363 14
 1388 010e FB68     	 ldr r3,[r7,#12]
 1389 0110 994A     	 ldr r2,.L95
 1390 0112 9342     	 cmp r3,r2
 1391 0114 06D1     	 bne .L74
 364:../Libraries/XMCLib/src/xmc_dma.c ****           {
 365:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 366:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1392              	 .loc 2 366 26
 1393 0116 7B68     	 ldr r3,[r7,#4]
 1394 0118 93F82230 	 ldrb r3,[r3,#34]
 1395              	 .loc 2 366 18
 1396 011c 03F00703 	 and r3,r3,#7
 1397 0120 BB75     	 strb r3,[r7,#22]
 1398 0122 05E0     	 b .L75
 1399              	.L74:
 367:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 368:../Libraries/XMCLib/src/xmc_dma.c ****           }
 369:../Libraries/XMCLib/src/xmc_dma.c ****           else
 370:../Libraries/XMCLib/src/xmc_dma.c ****           {
 371:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1400              	 .loc 2 371 26
 1401 0124 7B68     	 ldr r3,[r7,#4]
 1402 0126 93F82230 	 ldrb r3,[r3,#34]
 1403              	 .loc 2 371 18
 1404 012a 03F00303 	 and r3,r3,#3
 1405 012e BB75     	 strb r3,[r7,#22]
 1406              	.L75:
 372:../Libraries/XMCLib/src/xmc_dma.c ****           }
 373:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 374:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1407              	 .loc 2 374 30
 1408 0130 7B68     	 ldr r3,[r7,#4]
 1409 0132 93F82230 	 ldrb r3,[r3,#34]
 1410              	 .loc 2 374 22
 1411 0136 1B09     	 lsrs r3,r3,#4
 1412 0138 7B75     	 strb r3,[r7,#21]
 375:../Libraries/XMCLib/src/xmc_dma.c **** 
 376:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1413              	 .loc 2 376 33
 1414 013a FB7A     	 ldrb r3,[r7,#11]
 1415 013c FA68     	 ldr r2,[r7,#12]
 1416 013e 5821     	 movs r1,#88
 1417 0140 01FB03F3 	 mul r3,r1,r3
 1418 0144 1344     	 add r3,r3,r2
 1419 0146 4433     	 adds r3,r3,#68
 1420 0148 1968     	 ldr r1,[r3]
 1421              	 .loc 2 376 47
 1422 014a BB7D     	 ldrb r3,[r7,#22]
 1423              	 .loc 2 376 36
 1424 014c DA02     	 lsls r2,r3,#11
 1425              	 .loc 2 376 33
 1426 014e FB7A     	 ldrb r3,[r7,#11]
 1427 0150 0A43     	 orrs r2,r2,r1
 1428 0152 F968     	 ldr r1,[r7,#12]
 1429 0154 5820     	 movs r0,#88
 1430 0156 00FB03F3 	 mul r3,r0,r3
 1431 015a 0B44     	 add r3,r3,r1
 1432 015c 4433     	 adds r3,r3,#68
 1433 015e 1A60     	 str r2,[r3]
 377:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1434              	 .loc 2 377 11
 1435 0160 7A7D     	 ldrb r2,[r7,#21]
 1436 0162 BB7D     	 ldrb r3,[r7,#22]
 1437 0164 1946     	 mov r1,r3
 1438 0166 F868     	 ldr r0,[r7,#12]
 1439 0168 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 378:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1440              	 .loc 2 378 33
 1441 016c FB7A     	 ldrb r3,[r7,#11]
 1442 016e FA68     	 ldr r2,[r7,#12]
 1443 0170 5821     	 movs r1,#88
 1444 0172 01FB03F3 	 mul r3,r1,r3
 1445 0176 1344     	 add r3,r3,r2
 1446 0178 4033     	 adds r3,r3,#64
 1447 017a 1A68     	 ldr r2,[r3]
 1448 017c FB7A     	 ldrb r3,[r7,#11]
 1449 017e 22F48062 	 bic r2,r2,#1024
 1450 0182 F968     	 ldr r1,[r7,#12]
 1451 0184 5820     	 movs r0,#88
 1452 0186 00FB03F3 	 mul r3,r0,r3
 1453 018a 0B44     	 add r3,r3,r1
 1454 018c 4033     	 adds r3,r3,#64
 1455 018e 1A60     	 str r2,[r3]
 1456              	.L72:
 379:../Libraries/XMCLib/src/xmc_dma.c ****         }
 380:../Libraries/XMCLib/src/xmc_dma.c ****       }
 381:../Libraries/XMCLib/src/xmc_dma.c **** 
 382:../Libraries/XMCLib/src/xmc_dma.c **** 
 383:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1457              	 .loc 2 383 17
 1458 0190 7B68     	 ldr r3,[r7,#4]
 1459 0192 9B8B     	 ldrh r3,[r3,#28]
 1460              	 .loc 2 383 10
 1461 0194 002B     	 cmp r3,#0
 1462 0196 4BD1     	 bne .L76
 384:../Libraries/XMCLib/src/xmc_dma.c ****       {
 385:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1463              	 .loc 2 385 36
 1464 0198 7B68     	 ldr r3,[r7,#4]
 1465 019a 9B78     	 ldrb r3,[r3,#2]
 1466 019c 03F07003 	 and r3,r3,#112
 1467 01a0 DBB2     	 uxtb r3,r3
 1468              	 .loc 2 385 12
 1469 01a2 202B     	 cmp r3,#32
 1470 01a4 06D0     	 beq .L77
 386:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1471              	 .loc 2 386 36 discriminator 1
 1472 01a6 7B68     	 ldr r3,[r7,#4]
 1473 01a8 9B78     	 ldrb r3,[r3,#2]
 1474 01aa 03F07003 	 and r3,r3,#112
 1475 01ae DBB2     	 uxtb r3,r3
 385:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1476              	 .loc 2 385 83 discriminator 1
 1477 01b0 302B     	 cmp r3,#48
 1478 01b2 3DD1     	 bne .L76
 1479              	.L77:
 387:../Libraries/XMCLib/src/xmc_dma.c ****         {
 388:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 389:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1480              	 .loc 2 389 14
 1481 01b4 FB68     	 ldr r3,[r7,#12]
 1482 01b6 704A     	 ldr r2,.L95
 1483 01b8 9342     	 cmp r3,r2
 1484 01ba 05D1     	 bne .L78
 390:../Libraries/XMCLib/src/xmc_dma.c ****           {
 391:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 392:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1485              	 .loc 2 392 26
 1486 01bc 7B68     	 ldr r3,[r7,#4]
 1487 01be 9B7F     	 ldrb r3,[r3,#30]
 1488              	 .loc 2 392 18
 1489 01c0 03F00703 	 and r3,r3,#7
 1490 01c4 BB75     	 strb r3,[r7,#22]
 1491 01c6 04E0     	 b .L79
 1492              	.L78:
 393:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 394:../Libraries/XMCLib/src/xmc_dma.c ****           }
 395:../Libraries/XMCLib/src/xmc_dma.c ****           else
 396:../Libraries/XMCLib/src/xmc_dma.c ****           {
 397:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1493              	 .loc 2 397 26
 1494 01c8 7B68     	 ldr r3,[r7,#4]
 1495 01ca 9B7F     	 ldrb r3,[r3,#30]
 1496              	 .loc 2 397 18
 1497 01cc 03F00303 	 and r3,r3,#3
 1498 01d0 BB75     	 strb r3,[r7,#22]
 1499              	.L79:
 398:../Libraries/XMCLib/src/xmc_dma.c ****           }
 399:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 400:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1500              	 .loc 2 400 30
 1501 01d2 7B68     	 ldr r3,[r7,#4]
 1502 01d4 9B7F     	 ldrb r3,[r3,#30]
 1503              	 .loc 2 400 22
 1504 01d6 1B09     	 lsrs r3,r3,#4
 1505 01d8 7B75     	 strb r3,[r7,#21]
 401:../Libraries/XMCLib/src/xmc_dma.c **** 
 402:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1506              	 .loc 2 402 33
 1507 01da FB7A     	 ldrb r3,[r7,#11]
 1508 01dc FA68     	 ldr r2,[r7,#12]
 1509 01de 5821     	 movs r1,#88
 1510 01e0 01FB03F3 	 mul r3,r1,r3
 1511 01e4 1344     	 add r3,r3,r2
 1512 01e6 4433     	 adds r3,r3,#68
 1513 01e8 1968     	 ldr r1,[r3]
 1514              	 .loc 2 402 47
 1515 01ea BB7D     	 ldrb r3,[r7,#22]
 1516              	 .loc 2 402 36
 1517 01ec DA01     	 lsls r2,r3,#7
 1518              	 .loc 2 402 33
 1519 01ee FB7A     	 ldrb r3,[r7,#11]
 1520 01f0 0A43     	 orrs r2,r2,r1
 1521 01f2 F968     	 ldr r1,[r7,#12]
 1522 01f4 5820     	 movs r0,#88
 1523 01f6 00FB03F3 	 mul r3,r0,r3
 1524 01fa 0B44     	 add r3,r3,r1
 1525 01fc 4433     	 adds r3,r3,#68
 1526 01fe 1A60     	 str r2,[r3]
 403:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1527              	 .loc 2 403 11
 1528 0200 7A7D     	 ldrb r2,[r7,#21]
 1529 0202 BB7D     	 ldrb r3,[r7,#22]
 1530 0204 1946     	 mov r1,r3
 1531 0206 F868     	 ldr r0,[r7,#12]
 1532 0208 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 404:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1533              	 .loc 2 404 33
 1534 020c FB7A     	 ldrb r3,[r7,#11]
 1535 020e FA68     	 ldr r2,[r7,#12]
 1536 0210 5821     	 movs r1,#88
 1537 0212 01FB03F3 	 mul r3,r1,r3
 1538 0216 1344     	 add r3,r3,r2
 1539 0218 4033     	 adds r3,r3,#64
 1540 021a 1A68     	 ldr r2,[r3]
 1541 021c FB7A     	 ldrb r3,[r7,#11]
 1542 021e 22F40062 	 bic r2,r2,#2048
 1543 0222 F968     	 ldr r1,[r7,#12]
 1544 0224 5820     	 movs r0,#88
 1545 0226 00FB03F3 	 mul r3,r0,r3
 1546 022a 0B44     	 add r3,r3,r1
 1547 022c 4033     	 adds r3,r3,#64
 1548 022e 1A60     	 str r2,[r3]
 1549              	.L76:
 405:../Libraries/XMCLib/src/xmc_dma.c ****         }
 406:../Libraries/XMCLib/src/xmc_dma.c ****       }
 407:../Libraries/XMCLib/src/xmc_dma.c **** 
 408:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1550              	 .loc 2 408 7
 1551 0230 FB7A     	 ldrb r3,[r7,#11]
 1552 0232 1F22     	 movs r2,#31
 1553 0234 1946     	 mov r1,r3
 1554 0236 F868     	 ldr r0,[r7,#12]
 1555 0238 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 409:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 410:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 411:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
 412:../Libraries/XMCLib/src/xmc_dma.c ****                                   (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1556              	 .loc 2 414 21
 1557 023c 7B68     	 ldr r3,[r7,#4]
 1558 023e 9B7E     	 ldrb r3,[r3,#26]
 1559 0240 082B     	 cmp r3,#8
 1560 0242 00F2D380 	 bhi .L94
 1561 0246 01A2     	 adr r2,.L82
 1562 0248 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1563              	 .p2align 2
 1564              	.L82:
 1565 024c ED030000 	 .word .L94+1
 1566 0250 71020000 	 .word .L89+1
 1567 0254 97020000 	 .word .L88+1
 1568 0258 BD020000 	 .word .L87+1
 1569 025c E3020000 	 .word .L86+1
 1570 0260 09030000 	 .word .L85+1
 1571 0264 53030000 	 .word .L84+1
 1572 0268 7D030000 	 .word .L83+1
 1573 026c C7030000 	 .word .L81+1
 1574              	 .p2align 1
 1575              	.L89:
 415:../Libraries/XMCLib/src/xmc_dma.c ****       {
 416:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 417:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 418:../Libraries/XMCLib/src/xmc_dma.c **** 
 419:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 420:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1576              	 .loc 2 420 33
 1577 0270 FB7A     	 ldrb r3,[r7,#11]
 1578 0272 FA68     	 ldr r2,[r7,#12]
 1579 0274 5821     	 movs r1,#88
 1580 0276 01FB03F3 	 mul r3,r1,r3
 1581 027a 1344     	 add r3,r3,r2
 1582 027c 4033     	 adds r3,r3,#64
 1583 027e 1A68     	 ldr r2,[r3]
 1584 0280 FB7A     	 ldrb r3,[r7,#11]
 1585 0282 42F00042 	 orr r2,r2,#-2147483648
 1586 0286 F968     	 ldr r1,[r7,#12]
 1587 0288 5820     	 movs r0,#88
 1588 028a 00FB03F3 	 mul r3,r0,r3
 1589 028e 0B44     	 add r3,r3,r1
 1590 0290 4033     	 adds r3,r3,#64
 1591 0292 1A60     	 str r2,[r3]
 421:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1592              	 .loc 2 421 11
 1593 0294 ABE0     	 b .L91
 1594              	.L88:
 422:../Libraries/XMCLib/src/xmc_dma.c **** 
 423:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 424:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1595              	 .loc 2 424 33
 1596 0296 FB7A     	 ldrb r3,[r7,#11]
 1597 0298 FA68     	 ldr r2,[r7,#12]
 1598 029a 5821     	 movs r1,#88
 1599 029c 01FB03F3 	 mul r3,r1,r3
 1600 02a0 1344     	 add r3,r3,r2
 1601 02a2 4033     	 adds r3,r3,#64
 1602 02a4 1A68     	 ldr r2,[r3]
 1603 02a6 FB7A     	 ldrb r3,[r7,#11]
 1604 02a8 42F08042 	 orr r2,r2,#1073741824
 1605 02ac F968     	 ldr r1,[r7,#12]
 1606 02ae 5820     	 movs r0,#88
 1607 02b0 00FB03F3 	 mul r3,r0,r3
 1608 02b4 0B44     	 add r3,r3,r1
 1609 02b6 4033     	 adds r3,r3,#64
 1610 02b8 1A60     	 str r2,[r3]
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1611              	 .loc 2 425 11
 1612 02ba 98E0     	 b .L91
 1613              	.L87:
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1614              	 .loc 2 428 33
 1615 02bc FB7A     	 ldrb r3,[r7,#11]
 1616 02be FA68     	 ldr r2,[r7,#12]
 1617 02c0 5821     	 movs r1,#88
 1618 02c2 01FB03F3 	 mul r3,r1,r3
 1619 02c6 1344     	 add r3,r3,r2
 1620 02c8 4033     	 adds r3,r3,#64
 1621 02ca 1A68     	 ldr r2,[r3]
 1622 02cc FB7A     	 ldrb r3,[r7,#11]
 1623 02ce 42F04042 	 orr r2,r2,#-1073741824
 1624 02d2 F968     	 ldr r1,[r7,#12]
 1625 02d4 5820     	 movs r0,#88
 1626 02d6 00FB03F3 	 mul r3,r0,r3
 1627 02da 0B44     	 add r3,r3,r1
 1628 02dc 4033     	 adds r3,r3,#64
 1629 02de 1A60     	 str r2,[r3]
 429:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 430:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1630              	 .loc 2 430 11
 1631 02e0 85E0     	 b .L91
 1632              	.L86:
 431:../Libraries/XMCLib/src/xmc_dma.c **** 
 432:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1633              	 .loc 2 433 33
 1634 02e2 FB7A     	 ldrb r3,[r7,#11]
 1635 02e4 FA68     	 ldr r2,[r7,#12]
 1636 02e6 5821     	 movs r1,#88
 1637 02e8 01FB03F3 	 mul r3,r1,r3
 1638 02ec 1344     	 add r3,r3,r2
 1639 02ee 1833     	 adds r3,r3,#24
 1640 02f0 1A68     	 ldr r2,[r3]
 1641 02f2 FB7A     	 ldrb r3,[r7,#11]
 1642 02f4 42F00062 	 orr r2,r2,#134217728
 1643 02f8 F968     	 ldr r1,[r7,#12]
 1644 02fa 5820     	 movs r0,#88
 1645 02fc 00FB03F3 	 mul r3,r0,r3
 1646 0300 0B44     	 add r3,r3,r1
 1647 0302 1833     	 adds r3,r3,#24
 1648 0304 1A60     	 str r2,[r3]
 434:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1649              	 .loc 2 434 11
 1650 0306 72E0     	 b .L91
 1651              	.L85:
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 436:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1652              	 .loc 2 437 33
 1653 0308 FB7A     	 ldrb r3,[r7,#11]
 1654 030a FA68     	 ldr r2,[r7,#12]
 1655 030c 5821     	 movs r1,#88
 1656 030e 01FB03F3 	 mul r3,r1,r3
 1657 0312 1344     	 add r3,r3,r2
 1658 0314 4033     	 adds r3,r3,#64
 1659 0316 1A68     	 ldr r2,[r3]
 1660 0318 FB7A     	 ldrb r3,[r7,#11]
 1661 031a 42F08042 	 orr r2,r2,#1073741824
 1662 031e F968     	 ldr r1,[r7,#12]
 1663 0320 5820     	 movs r0,#88
 1664 0322 00FB03F3 	 mul r3,r0,r3
 1665 0326 0B44     	 add r3,r3,r1
 1666 0328 4033     	 adds r3,r3,#64
 1667 032a 1A60     	 str r2,[r3]
 438:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1668              	 .loc 2 438 33
 1669 032c FB7A     	 ldrb r3,[r7,#11]
 1670 032e FA68     	 ldr r2,[r7,#12]
 1671 0330 5821     	 movs r1,#88
 1672 0332 01FB03F3 	 mul r3,r1,r3
 1673 0336 1344     	 add r3,r3,r2
 1674 0338 1833     	 adds r3,r3,#24
 1675 033a 1A68     	 ldr r2,[r3]
 1676 033c FB7A     	 ldrb r3,[r7,#11]
 1677 033e 42F00062 	 orr r2,r2,#134217728
 1678 0342 F968     	 ldr r1,[r7,#12]
 1679 0344 5820     	 movs r0,#88
 1680 0346 00FB03F3 	 mul r3,r0,r3
 1681 034a 0B44     	 add r3,r3,r1
 1682 034c 1833     	 adds r3,r3,#24
 1683 034e 1A60     	 str r2,[r3]
 439:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1684              	 .loc 2 439 11
 1685 0350 4DE0     	 b .L91
 1686              	.L84:
 440:../Libraries/XMCLib/src/xmc_dma.c **** 
 441:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 442:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1687              	 .loc 2 442 33
 1688 0352 FB7A     	 ldrb r3,[r7,#11]
 1689 0354 FA68     	 ldr r2,[r7,#12]
 1690 0356 5821     	 movs r1,#88
 1691 0358 01FB03F3 	 mul r3,r1,r3
 1692 035c 1344     	 add r3,r3,r2
 1693 035e 1833     	 adds r3,r3,#24
 1694 0360 1A68     	 ldr r2,[r3]
 1695 0362 FB7A     	 ldrb r3,[r7,#11]
 1696 0364 42F08052 	 orr r2,r2,#268435456
 1697 0368 F968     	 ldr r1,[r7,#12]
 1698 036a 5820     	 movs r0,#88
 1699 036c 00FB03F3 	 mul r3,r0,r3
 1700 0370 0B44     	 add r3,r3,r1
 1701 0372 1833     	 adds r3,r3,#24
 1702 0374 1A60     	 str r2,[r3]
 443:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1703              	 .loc 2 443 11
 1704 0376 3AE0     	 b .L91
 1705              	.L96:
 1706              	 .align 2
 1707              	.L95:
 1708 0378 00400150 	 .word 1342259200
 1709              	.L83:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 446:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1710              	 .loc 2 446 33
 1711 037c FB7A     	 ldrb r3,[r7,#11]
 1712 037e FA68     	 ldr r2,[r7,#12]
 1713 0380 5821     	 movs r1,#88
 1714 0382 01FB03F3 	 mul r3,r1,r3
 1715 0386 1344     	 add r3,r3,r2
 1716 0388 4033     	 adds r3,r3,#64
 1717 038a 1A68     	 ldr r2,[r3]
 1718 038c FB7A     	 ldrb r3,[r7,#11]
 1719 038e 42F00042 	 orr r2,r2,#-2147483648
 1720 0392 F968     	 ldr r1,[r7,#12]
 1721 0394 5820     	 movs r0,#88
 1722 0396 00FB03F3 	 mul r3,r0,r3
 1723 039a 0B44     	 add r3,r3,r1
 1724 039c 4033     	 adds r3,r3,#64
 1725 039e 1A60     	 str r2,[r3]
 447:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1726              	 .loc 2 447 33
 1727 03a0 FB7A     	 ldrb r3,[r7,#11]
 1728 03a2 FA68     	 ldr r2,[r7,#12]
 1729 03a4 5821     	 movs r1,#88
 1730 03a6 01FB03F3 	 mul r3,r1,r3
 1731 03aa 1344     	 add r3,r3,r2
 1732 03ac 1833     	 adds r3,r3,#24
 1733 03ae 1A68     	 ldr r2,[r3]
 1734 03b0 FB7A     	 ldrb r3,[r7,#11]
 1735 03b2 42F08052 	 orr r2,r2,#268435456
 1736 03b6 F968     	 ldr r1,[r7,#12]
 1737 03b8 5820     	 movs r0,#88
 1738 03ba 00FB03F3 	 mul r3,r0,r3
 1739 03be 0B44     	 add r3,r3,r1
 1740 03c0 1833     	 adds r3,r3,#24
 1741 03c2 1A60     	 str r2,[r3]
 448:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1742              	 .loc 2 448 11
 1743 03c4 13E0     	 b .L91
 1744              	.L81:
 449:../Libraries/XMCLib/src/xmc_dma.c **** 
 450:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 451:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1745              	 .loc 2 451 33
 1746 03c6 FB7A     	 ldrb r3,[r7,#11]
 1747 03c8 FA68     	 ldr r2,[r7,#12]
 1748 03ca 5821     	 movs r1,#88
 1749 03cc 01FB03F3 	 mul r3,r1,r3
 1750 03d0 1344     	 add r3,r3,r2
 1751 03d2 1833     	 adds r3,r3,#24
 1752 03d4 1A68     	 ldr r2,[r3]
 1753 03d6 FB7A     	 ldrb r3,[r7,#11]
 1754 03d8 42F0C052 	 orr r2,r2,#402653184
 1755 03dc F968     	 ldr r1,[r7,#12]
 1756 03de 5820     	 movs r0,#88
 1757 03e0 00FB03F3 	 mul r3,r0,r3
 1758 03e4 0B44     	 add r3,r3,r1
 1759 03e6 1833     	 adds r3,r3,#24
 1760 03e8 1A60     	 str r2,[r3]
 452:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 453:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1761              	 .loc 2 453 11
 1762 03ea 00E0     	 b .L91
 1763              	.L94:
 454:../Libraries/XMCLib/src/xmc_dma.c **** 
 455:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 456:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1764              	 .loc 2 456 11
 1765 03ec 00BF     	 nop
 1766              	.L91:
 457:../Libraries/XMCLib/src/xmc_dma.c ****       }
 458:../Libraries/XMCLib/src/xmc_dma.c **** 
 459:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1767              	 .loc 2 459 14
 1768 03ee 0023     	 movs r3,#0
 1769 03f0 FB75     	 strb r3,[r7,#23]
 1770 03f2 04E0     	 b .L92
 1771              	.L70:
 460:../Libraries/XMCLib/src/xmc_dma.c **** 
 461:../Libraries/XMCLib/src/xmc_dma.c ****     }
 462:../Libraries/XMCLib/src/xmc_dma.c ****     else
 463:../Libraries/XMCLib/src/xmc_dma.c ****     {
 464:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1772              	 .loc 2 464 14
 1773 03f4 0223     	 movs r3,#2
 1774 03f6 FB75     	 strb r3,[r7,#23]
 1775 03f8 01E0     	 b .L92
 1776              	.L69:
 465:../Libraries/XMCLib/src/xmc_dma.c ****     }
 466:../Libraries/XMCLib/src/xmc_dma.c ****   }
 467:../Libraries/XMCLib/src/xmc_dma.c ****   else
 468:../Libraries/XMCLib/src/xmc_dma.c ****   {
 469:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1777              	 .loc 2 469 12
 1778 03fa 0123     	 movs r3,#1
 1779 03fc FB75     	 strb r3,[r7,#23]
 1780              	.L92:
 470:../Libraries/XMCLib/src/xmc_dma.c ****   }
 471:../Libraries/XMCLib/src/xmc_dma.c **** 
 472:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1781              	 .loc 2 472 10
 1782 03fe FB7D     	 ldrb r3,[r7,#23]
 473:../Libraries/XMCLib/src/xmc_dma.c **** }
 1783              	 .loc 2 473 1
 1784 0400 1846     	 mov r0,r3
 1785 0402 1837     	 adds r7,r7,#24
 1786              	.LCFI101:
 1787              	 .cfi_def_cfa_offset 8
 1788 0404 BD46     	 mov sp,r7
 1789              	.LCFI102:
 1790              	 .cfi_def_cfa_register 13
 1791              	 
 1792 0406 80BD     	 pop {r7,pc}
 1793              	 .cfi_endproc
 1794              	.LFE196:
 1796              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1797              	 .align 1
 1798              	 .global XMC_DMA_CH_Suspend
 1799              	 .syntax unified
 1800              	 .thumb
 1801              	 .thumb_func
 1802              	 .fpu fpv4-sp-d16
 1804              	XMC_DMA_CH_Suspend:
 1805              	.LFB197:
 474:../Libraries/XMCLib/src/xmc_dma.c **** 
 475:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 476:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 477:../Libraries/XMCLib/src/xmc_dma.c **** {
 1806              	 .loc 2 477 1
 1807              	 .cfi_startproc
 1808              	 
 1809              	 
 1810              	 
 1811 0000 80B4     	 push {r7}
 1812              	.LCFI103:
 1813              	 .cfi_def_cfa_offset 4
 1814              	 .cfi_offset 7,-4
 1815 0002 83B0     	 sub sp,sp,#12
 1816              	.LCFI104:
 1817              	 .cfi_def_cfa_offset 16
 1818 0004 00AF     	 add r7,sp,#0
 1819              	.LCFI105:
 1820              	 .cfi_def_cfa_register 7
 1821 0006 7860     	 str r0,[r7,#4]
 1822 0008 0B46     	 mov r3,r1
 1823 000a FB70     	 strb r3,[r7,#3]
 478:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1824              	 .loc 2 478 25
 1825 000c FB78     	 ldrb r3,[r7,#3]
 1826 000e 7A68     	 ldr r2,[r7,#4]
 1827 0010 5821     	 movs r1,#88
 1828 0012 01FB03F3 	 mul r3,r1,r3
 1829 0016 1344     	 add r3,r3,r2
 1830 0018 4033     	 adds r3,r3,#64
 1831 001a 1A68     	 ldr r2,[r3]
 1832 001c FB78     	 ldrb r3,[r7,#3]
 1833 001e 42F48072 	 orr r2,r2,#256
 1834 0022 7968     	 ldr r1,[r7,#4]
 1835 0024 5820     	 movs r0,#88
 1836 0026 00FB03F3 	 mul r3,r0,r3
 1837 002a 0B44     	 add r3,r3,r1
 1838 002c 4033     	 adds r3,r3,#64
 1839 002e 1A60     	 str r2,[r3]
 479:../Libraries/XMCLib/src/xmc_dma.c **** }
 1840              	 .loc 2 479 1
 1841 0030 00BF     	 nop
 1842 0032 0C37     	 adds r7,r7,#12
 1843              	.LCFI106:
 1844              	 .cfi_def_cfa_offset 4
 1845 0034 BD46     	 mov sp,r7
 1846              	.LCFI107:
 1847              	 .cfi_def_cfa_register 13
 1848              	 
 1849 0036 5DF8047B 	 ldr r7,[sp],#4
 1850              	.LCFI108:
 1851              	 .cfi_restore 7
 1852              	 .cfi_def_cfa_offset 0
 1853 003a 7047     	 bx lr
 1854              	 .cfi_endproc
 1855              	.LFE197:
 1857              	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1858              	 .align 1
 1859              	 .global XMC_DMA_CH_Resume
 1860              	 .syntax unified
 1861              	 .thumb
 1862              	 .thumb_func
 1863              	 .fpu fpv4-sp-d16
 1865              	XMC_DMA_CH_Resume:
 1866              	.LFB198:
 480:../Libraries/XMCLib/src/xmc_dma.c **** 
 481:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 482:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 483:../Libraries/XMCLib/src/xmc_dma.c **** {
 1867              	 .loc 2 483 1
 1868              	 .cfi_startproc
 1869              	 
 1870              	 
 1871              	 
 1872 0000 80B4     	 push {r7}
 1873              	.LCFI109:
 1874              	 .cfi_def_cfa_offset 4
 1875              	 .cfi_offset 7,-4
 1876 0002 83B0     	 sub sp,sp,#12
 1877              	.LCFI110:
 1878              	 .cfi_def_cfa_offset 16
 1879 0004 00AF     	 add r7,sp,#0
 1880              	.LCFI111:
 1881              	 .cfi_def_cfa_register 7
 1882 0006 7860     	 str r0,[r7,#4]
 1883 0008 0B46     	 mov r3,r1
 1884 000a FB70     	 strb r3,[r7,#3]
 484:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1885              	 .loc 2 484 25
 1886 000c FB78     	 ldrb r3,[r7,#3]
 1887 000e 7A68     	 ldr r2,[r7,#4]
 1888 0010 5821     	 movs r1,#88
 1889 0012 01FB03F3 	 mul r3,r1,r3
 1890 0016 1344     	 add r3,r3,r2
 1891 0018 4033     	 adds r3,r3,#64
 1892 001a 1A68     	 ldr r2,[r3]
 1893 001c FB78     	 ldrb r3,[r7,#3]
 1894 001e 22F48072 	 bic r2,r2,#256
 1895 0022 7968     	 ldr r1,[r7,#4]
 1896 0024 5820     	 movs r0,#88
 1897 0026 00FB03F3 	 mul r3,r0,r3
 1898 002a 0B44     	 add r3,r3,r1
 1899 002c 4033     	 adds r3,r3,#64
 1900 002e 1A60     	 str r2,[r3]
 485:../Libraries/XMCLib/src/xmc_dma.c **** }
 1901              	 .loc 2 485 1
 1902 0030 00BF     	 nop
 1903 0032 0C37     	 adds r7,r7,#12
 1904              	.LCFI112:
 1905              	 .cfi_def_cfa_offset 4
 1906 0034 BD46     	 mov sp,r7
 1907              	.LCFI113:
 1908              	 .cfi_def_cfa_register 13
 1909              	 
 1910 0036 5DF8047B 	 ldr r7,[sp],#4
 1911              	.LCFI114:
 1912              	 .cfi_restore 7
 1913              	 .cfi_def_cfa_offset 0
 1914 003a 7047     	 bx lr
 1915              	 .cfi_endproc
 1916              	.LFE198:
 1918              	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1919              	 .align 1
 1920              	 .global XMC_DMA_CH_IsSuspended
 1921              	 .syntax unified
 1922              	 .thumb
 1923              	 .thumb_func
 1924              	 .fpu fpv4-sp-d16
 1926              	XMC_DMA_CH_IsSuspended:
 1927              	.LFB199:
 486:../Libraries/XMCLib/src/xmc_dma.c **** 
 487:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 488:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 489:../Libraries/XMCLib/src/xmc_dma.c **** {
 1928              	 .loc 2 489 1
 1929              	 .cfi_startproc
 1930              	 
 1931              	 
 1932              	 
 1933 0000 80B4     	 push {r7}
 1934              	.LCFI115:
 1935              	 .cfi_def_cfa_offset 4
 1936              	 .cfi_offset 7,-4
 1937 0002 83B0     	 sub sp,sp,#12
 1938              	.LCFI116:
 1939              	 .cfi_def_cfa_offset 16
 1940 0004 00AF     	 add r7,sp,#0
 1941              	.LCFI117:
 1942              	 .cfi_def_cfa_register 7
 1943 0006 7860     	 str r0,[r7,#4]
 1944 0008 0B46     	 mov r3,r1
 1945 000a FB70     	 strb r3,[r7,#3]
 490:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1946              	 .loc 2 490 33
 1947 000c FB78     	 ldrb r3,[r7,#3]
 1948 000e 7A68     	 ldr r2,[r7,#4]
 1949 0010 5821     	 movs r1,#88
 1950 0012 01FB03F3 	 mul r3,r1,r3
 1951 0016 1344     	 add r3,r3,r2
 1952 0018 4033     	 adds r3,r3,#64
 1953 001a 1B68     	 ldr r3,[r3]
 1954              	 .loc 2 490 39
 1955 001c 03F48073 	 and r3,r3,#256
 1956              	 .loc 2 490 10
 1957 0020 002B     	 cmp r3,#0
 1958 0022 14BF     	 ite ne
 1959 0024 0123     	 movne r3,#1
 1960 0026 0023     	 moveq r3,#0
 1961 0028 DBB2     	 uxtb r3,r3
 491:../Libraries/XMCLib/src/xmc_dma.c **** }
 1962              	 .loc 2 491 1
 1963 002a 1846     	 mov r0,r3
 1964 002c 0C37     	 adds r7,r7,#12
 1965              	.LCFI118:
 1966              	 .cfi_def_cfa_offset 4
 1967 002e BD46     	 mov sp,r7
 1968              	.LCFI119:
 1969              	 .cfi_def_cfa_register 13
 1970              	 
 1971 0030 5DF8047B 	 ldr r7,[sp],#4
 1972              	.LCFI120:
 1973              	 .cfi_restore 7
 1974              	 .cfi_def_cfa_offset 0
 1975 0034 7047     	 bx lr
 1976              	 .cfi_endproc
 1977              	.LFE199:
 1979              	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1980              	 .align 1
 1981              	 .global XMC_DMA_CH_EnableEvent
 1982              	 .syntax unified
 1983              	 .thumb
 1984              	 .thumb_func
 1985              	 .fpu fpv4-sp-d16
 1987              	XMC_DMA_CH_EnableEvent:
 1988              	.LFB200:
 492:../Libraries/XMCLib/src/xmc_dma.c **** 
 493:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 494:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 495:../Libraries/XMCLib/src/xmc_dma.c **** {
 1989              	 .loc 2 495 1
 1990              	 .cfi_startproc
 1991              	 
 1992              	 
 1993              	 
 1994 0000 80B4     	 push {r7}
 1995              	.LCFI121:
 1996              	 .cfi_def_cfa_offset 4
 1997              	 .cfi_offset 7,-4
 1998 0002 87B0     	 sub sp,sp,#28
 1999              	.LCFI122:
 2000              	 .cfi_def_cfa_offset 32
 2001 0004 00AF     	 add r7,sp,#0
 2002              	.LCFI123:
 2003              	 .cfi_def_cfa_register 7
 2004 0006 F860     	 str r0,[r7,#12]
 2005 0008 0B46     	 mov r3,r1
 2006 000a 7A60     	 str r2,[r7,#4]
 2007 000c FB72     	 strb r3,[r7,#11]
 496:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 497:../Libraries/XMCLib/src/xmc_dma.c **** 
 498:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2008              	 .loc 2 498 18
 2009 000e 0023     	 movs r3,#0
 2010 0010 7B61     	 str r3,[r7,#20]
 2011              	 .loc 2 498 3
 2012 0012 14E0     	 b .L102
 2013              	.L104:
 499:../Libraries/XMCLib/src/xmc_dma.c ****   {
 500:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 2014              	 .loc 2 500 9
 2015 0014 7A68     	 ldr r2,[r7,#4]
 2016 0016 7B69     	 ldr r3,[r7,#20]
 2017 0018 22FA03F3 	 lsr r3,r2,r3
 2018 001c 03F00103 	 and r3,r3,#1
 2019              	 .loc 2 500 8
 2020 0020 002B     	 cmp r3,#0
 2021 0022 09D0     	 beq .L103
 501:../Libraries/XMCLib/src/xmc_dma.c ****     {
 502:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 2022              	 .loc 2 502 59
 2023 0024 FB7A     	 ldrb r3,[r7,#11]
 2024              	 .loc 2 502 31
 2025 0026 7A69     	 ldr r2,[r7,#20]
 2026 0028 5200     	 lsls r2,r2,#1
 2027              	 .loc 2 502 59
 2028 002a 40F20111 	 movw r1,#257
 2029 002e 9940     	 lsls r1,r1,r3
 2030              	 .loc 2 502 38
 2031 0030 FB68     	 ldr r3,[r7,#12]
 2032 0032 C432     	 adds r2,r2,#196
 2033 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 2034              	.L103:
 498:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2035              	 .loc 2 498 52 discriminator 2
 2036 0038 7B69     	 ldr r3,[r7,#20]
 2037 003a 0133     	 adds r3,r3,#1
 2038 003c 7B61     	 str r3,[r7,#20]
 2039              	.L102:
 498:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2040              	 .loc 2 498 3 discriminator 1
 2041 003e 7B69     	 ldr r3,[r7,#20]
 2042 0040 042B     	 cmp r3,#4
 2043 0042 E7D9     	 bls .L104
 503:../Libraries/XMCLib/src/xmc_dma.c ****     }
 504:../Libraries/XMCLib/src/xmc_dma.c ****   }
 505:../Libraries/XMCLib/src/xmc_dma.c **** }
 2044              	 .loc 2 505 1
 2045 0044 00BF     	 nop
 2046 0046 00BF     	 nop
 2047 0048 1C37     	 adds r7,r7,#28
 2048              	.LCFI124:
 2049              	 .cfi_def_cfa_offset 4
 2050 004a BD46     	 mov sp,r7
 2051              	.LCFI125:
 2052              	 .cfi_def_cfa_register 13
 2053              	 
 2054 004c 5DF8047B 	 ldr r7,[sp],#4
 2055              	.LCFI126:
 2056              	 .cfi_restore 7
 2057              	 .cfi_def_cfa_offset 0
 2058 0050 7047     	 bx lr
 2059              	 .cfi_endproc
 2060              	.LFE200:
 2062              	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 2063              	 .align 1
 2064              	 .global XMC_DMA_CH_DisableEvent
 2065              	 .syntax unified
 2066              	 .thumb
 2067              	 .thumb_func
 2068              	 .fpu fpv4-sp-d16
 2070              	XMC_DMA_CH_DisableEvent:
 2071              	.LFB201:
 506:../Libraries/XMCLib/src/xmc_dma.c **** 
 507:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 508:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 509:../Libraries/XMCLib/src/xmc_dma.c **** {
 2072              	 .loc 2 509 1
 2073              	 .cfi_startproc
 2074              	 
 2075              	 
 2076              	 
 2077 0000 80B4     	 push {r7}
 2078              	.LCFI127:
 2079              	 .cfi_def_cfa_offset 4
 2080              	 .cfi_offset 7,-4
 2081 0002 87B0     	 sub sp,sp,#28
 2082              	.LCFI128:
 2083              	 .cfi_def_cfa_offset 32
 2084 0004 00AF     	 add r7,sp,#0
 2085              	.LCFI129:
 2086              	 .cfi_def_cfa_register 7
 2087 0006 F860     	 str r0,[r7,#12]
 2088 0008 0B46     	 mov r3,r1
 2089 000a 7A60     	 str r2,[r7,#4]
 2090 000c FB72     	 strb r3,[r7,#11]
 510:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 511:../Libraries/XMCLib/src/xmc_dma.c **** 
 512:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2091              	 .loc 2 512 18
 2092 000e 0023     	 movs r3,#0
 2093 0010 7B61     	 str r3,[r7,#20]
 2094              	 .loc 2 512 3
 2095 0012 14E0     	 b .L106
 2096              	.L108:
 513:../Libraries/XMCLib/src/xmc_dma.c ****   {
 514:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 2097              	 .loc 2 514 9
 2098 0014 7A68     	 ldr r2,[r7,#4]
 2099 0016 7B69     	 ldr r3,[r7,#20]
 2100 0018 22FA03F3 	 lsr r3,r2,r3
 2101 001c 03F00103 	 and r3,r3,#1
 2102              	 .loc 2 514 8
 2103 0020 002B     	 cmp r3,#0
 2104 0022 09D0     	 beq .L107
 515:../Libraries/XMCLib/src/xmc_dma.c ****     {
 516:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 2105              	 .loc 2 516 59
 2106 0024 FB7A     	 ldrb r3,[r7,#11]
 2107              	 .loc 2 516 31
 2108 0026 7A69     	 ldr r2,[r7,#20]
 2109 0028 5200     	 lsls r2,r2,#1
 2110              	 .loc 2 516 59
 2111 002a 4FF48071 	 mov r1,#256
 2112 002e 9940     	 lsls r1,r1,r3
 2113              	 .loc 2 516 38
 2114 0030 FB68     	 ldr r3,[r7,#12]
 2115 0032 C432     	 adds r2,r2,#196
 2116 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 2117              	.L107:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2118              	 .loc 2 512 52 discriminator 2
 2119 0038 7B69     	 ldr r3,[r7,#20]
 2120 003a 0133     	 adds r3,r3,#1
 2121 003c 7B61     	 str r3,[r7,#20]
 2122              	.L106:
 512:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2123              	 .loc 2 512 3 discriminator 1
 2124 003e 7B69     	 ldr r3,[r7,#20]
 2125 0040 042B     	 cmp r3,#4
 2126 0042 E7D9     	 bls .L108
 517:../Libraries/XMCLib/src/xmc_dma.c ****     }
 518:../Libraries/XMCLib/src/xmc_dma.c ****   }
 519:../Libraries/XMCLib/src/xmc_dma.c **** }
 2127              	 .loc 2 519 1
 2128 0044 00BF     	 nop
 2129 0046 00BF     	 nop
 2130 0048 1C37     	 adds r7,r7,#28
 2131              	.LCFI130:
 2132              	 .cfi_def_cfa_offset 4
 2133 004a BD46     	 mov sp,r7
 2134              	.LCFI131:
 2135              	 .cfi_def_cfa_register 13
 2136              	 
 2137 004c 5DF8047B 	 ldr r7,[sp],#4
 2138              	.LCFI132:
 2139              	 .cfi_restore 7
 2140              	 .cfi_def_cfa_offset 0
 2141 0050 7047     	 bx lr
 2142              	 .cfi_endproc
 2143              	.LFE201:
 2145              	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 2146              	 .align 1
 2147              	 .global XMC_DMA_CH_ClearEventStatus
 2148              	 .syntax unified
 2149              	 .thumb
 2150              	 .thumb_func
 2151              	 .fpu fpv4-sp-d16
 2153              	XMC_DMA_CH_ClearEventStatus:
 2154              	.LFB202:
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 522:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 523:../Libraries/XMCLib/src/xmc_dma.c **** {
 2155              	 .loc 2 523 1
 2156              	 .cfi_startproc
 2157              	 
 2158              	 
 2159              	 
 2160 0000 80B4     	 push {r7}
 2161              	.LCFI133:
 2162              	 .cfi_def_cfa_offset 4
 2163              	 .cfi_offset 7,-4
 2164 0002 87B0     	 sub sp,sp,#28
 2165              	.LCFI134:
 2166              	 .cfi_def_cfa_offset 32
 2167 0004 00AF     	 add r7,sp,#0
 2168              	.LCFI135:
 2169              	 .cfi_def_cfa_register 7
 2170 0006 F860     	 str r0,[r7,#12]
 2171 0008 0B46     	 mov r3,r1
 2172 000a 7A60     	 str r2,[r7,#4]
 2173 000c FB72     	 strb r3,[r7,#11]
 524:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 525:../Libraries/XMCLib/src/xmc_dma.c **** 
 526:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2174              	 .loc 2 526 18
 2175 000e 0023     	 movs r3,#0
 2176 0010 7B61     	 str r3,[r7,#20]
 2177              	 .loc 2 526 3
 2178 0012 13E0     	 b .L110
 2179              	.L112:
 527:../Libraries/XMCLib/src/xmc_dma.c ****   {
 528:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 2180              	 .loc 2 528 9
 2181 0014 7A68     	 ldr r2,[r7,#4]
 2182 0016 7B69     	 ldr r3,[r7,#20]
 2183 0018 22FA03F3 	 lsr r3,r2,r3
 2184 001c 03F00103 	 and r3,r3,#1
 2185              	 .loc 2 528 8
 2186 0020 002B     	 cmp r3,#0
 2187 0022 08D0     	 beq .L111
 529:../Libraries/XMCLib/src/xmc_dma.c ****     {
 530:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 2188              	 .loc 2 530 58
 2189 0024 FB7A     	 ldrb r3,[r7,#11]
 2190              	 .loc 2 530 32
 2191 0026 7A69     	 ldr r2,[r7,#20]
 2192 0028 5200     	 lsls r2,r2,#1
 2193              	 .loc 2 530 58
 2194 002a 0121     	 movs r1,#1
 2195 002c 9940     	 lsls r1,r1,r3
 2196              	 .loc 2 530 39
 2197 002e FB68     	 ldr r3,[r7,#12]
 2198 0030 CE32     	 adds r2,r2,#206
 2199 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 2200              	.L111:
 526:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2201              	 .loc 2 526 52 discriminator 2
 2202 0036 7B69     	 ldr r3,[r7,#20]
 2203 0038 0133     	 adds r3,r3,#1
 2204 003a 7B61     	 str r3,[r7,#20]
 2205              	.L110:
 526:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2206              	 .loc 2 526 3 discriminator 1
 2207 003c 7B69     	 ldr r3,[r7,#20]
 2208 003e 042B     	 cmp r3,#4
 2209 0040 E8D9     	 bls .L112
 531:../Libraries/XMCLib/src/xmc_dma.c ****     }
 532:../Libraries/XMCLib/src/xmc_dma.c ****   }
 533:../Libraries/XMCLib/src/xmc_dma.c **** 
 534:../Libraries/XMCLib/src/xmc_dma.c **** }
 2210              	 .loc 2 534 1
 2211 0042 00BF     	 nop
 2212 0044 00BF     	 nop
 2213 0046 1C37     	 adds r7,r7,#28
 2214              	.LCFI136:
 2215              	 .cfi_def_cfa_offset 4
 2216 0048 BD46     	 mov sp,r7
 2217              	.LCFI137:
 2218              	 .cfi_def_cfa_register 13
 2219              	 
 2220 004a 5DF8047B 	 ldr r7,[sp],#4
 2221              	.LCFI138:
 2222              	 .cfi_restore 7
 2223              	 .cfi_def_cfa_offset 0
 2224 004e 7047     	 bx lr
 2225              	 .cfi_endproc
 2226              	.LFE202:
 2228              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 2229              	 .align 1
 2230              	 .global XMC_DMA_CH_GetEventStatus
 2231              	 .syntax unified
 2232              	 .thumb
 2233              	 .thumb_func
 2234              	 .fpu fpv4-sp-d16
 2236              	XMC_DMA_CH_GetEventStatus:
 2237              	.LFB203:
 535:../Libraries/XMCLib/src/xmc_dma.c **** 
 536:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 537:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 538:../Libraries/XMCLib/src/xmc_dma.c **** {
 2238              	 .loc 2 538 1
 2239              	 .cfi_startproc
 2240              	 
 2241              	 
 2242              	 
 2243 0000 80B4     	 push {r7}
 2244              	.LCFI139:
 2245              	 .cfi_def_cfa_offset 4
 2246              	 .cfi_offset 7,-4
 2247 0002 85B0     	 sub sp,sp,#20
 2248              	.LCFI140:
 2249              	 .cfi_def_cfa_offset 24
 2250 0004 00AF     	 add r7,sp,#0
 2251              	.LCFI141:
 2252              	 .cfi_def_cfa_register 7
 2253 0006 7860     	 str r0,[r7,#4]
 2254 0008 0B46     	 mov r3,r1
 2255 000a FB70     	 strb r3,[r7,#3]
 539:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 540:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 2256              	 .loc 2 540 12
 2257 000c 0023     	 movs r3,#0
 2258 000e BB60     	 str r3,[r7,#8]
 541:../Libraries/XMCLib/src/xmc_dma.c **** 
 542:../Libraries/XMCLib/src/xmc_dma.c ****   for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2259              	 .loc 2 542 18
 2260 0010 0023     	 movs r3,#0
 2261 0012 FB60     	 str r3,[r7,#12]
 2262              	 .loc 2 542 3
 2263 0014 18E0     	 b .L114
 2264              	.L117:
 543:../Libraries/XMCLib/src/xmc_dma.c ****   {
 544:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 2265              	 .loc 2 544 53
 2266 0016 FB68     	 ldr r3,[r7,#12]
 2267 0018 5A00     	 lsls r2,r3,#1
 2268              	 .loc 2 544 42
 2269 001a 7B68     	 ldr r3,[r7,#4]
 2270 001c BA32     	 adds r2,r2,#186
 2271 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 2272              	 .loc 2 544 92
 2273 0022 FB78     	 ldrb r3,[r7,#3]
 2274              	 .loc 2 544 112
 2275 0024 22FA03F3 	 lsr r3,r2,r3
 2276 0028 03F00103 	 and r3,r3,#1
 2277              	 .loc 2 544 15
 2278 002c 002B     	 cmp r3,#0
 2279 002e 04D0     	 beq .L115
 2280              	 .loc 2 544 15 is_stmt 0 discriminator 1
 2281 0030 0122     	 movs r2,#1
 2282 0032 FB68     	 ldr r3,[r7,#12]
 2283 0034 02FA03F3 	 lsl r3,r2,r3
 2284 0038 00E0     	 b .L116
 2285              	.L115:
 2286              	 .loc 2 544 15 discriminator 2
 2287 003a 0023     	 movs r3,#0
 2288              	.L116:
 2289              	 .loc 2 544 12 is_stmt 1 discriminator 4
 2290 003c BA68     	 ldr r2,[r7,#8]
 2291 003e 1343     	 orrs r3,r3,r2
 2292 0040 BB60     	 str r3,[r7,#8]
 542:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2293              	 .loc 2 542 52 discriminator 4
 2294 0042 FB68     	 ldr r3,[r7,#12]
 2295 0044 0133     	 adds r3,r3,#1
 2296 0046 FB60     	 str r3,[r7,#12]
 2297              	.L114:
 542:../Libraries/XMCLib/src/xmc_dma.c ****   {
 2298              	 .loc 2 542 3 discriminator 2
 2299 0048 FB68     	 ldr r3,[r7,#12]
 2300 004a 042B     	 cmp r3,#4
 2301 004c E3D9     	 bls .L117
 545:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 546:../Libraries/XMCLib/src/xmc_dma.c ****   }
 547:../Libraries/XMCLib/src/xmc_dma.c **** 
 548:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 2302              	 .loc 2 548 10
 2303 004e BB68     	 ldr r3,[r7,#8]
 549:../Libraries/XMCLib/src/xmc_dma.c **** }
 2304              	 .loc 2 549 1
 2305 0050 1846     	 mov r0,r3
 2306 0052 1437     	 adds r7,r7,#20
 2307              	.LCFI142:
 2308              	 .cfi_def_cfa_offset 4
 2309 0054 BD46     	 mov sp,r7
 2310              	.LCFI143:
 2311              	 .cfi_def_cfa_register 13
 2312              	 
 2313 0056 5DF8047B 	 ldr r7,[sp],#4
 2314              	.LCFI144:
 2315              	 .cfi_restore 7
 2316              	 .cfi_def_cfa_offset 0
 2317 005a 7047     	 bx lr
 2318              	 .cfi_endproc
 2319              	.LFE203:
 2321              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 2322              	 .align 1
 2323              	 .global XMC_DMA_CH_EnableSourceGather
 2324              	 .syntax unified
 2325              	 .thumb
 2326              	 .thumb_func
 2327              	 .fpu fpv4-sp-d16
 2329              	XMC_DMA_CH_EnableSourceGather:
 2330              	.LFB204:
 550:../Libraries/XMCLib/src/xmc_dma.c **** 
 551:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 552:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 553:../Libraries/XMCLib/src/xmc_dma.c **** {
 2331              	 .loc 2 553 1
 2332              	 .cfi_startproc
 2333              	 
 2334              	 
 2335              	 
 2336 0000 80B4     	 push {r7}
 2337              	.LCFI145:
 2338              	 .cfi_def_cfa_offset 4
 2339              	 .cfi_offset 7,-4
 2340 0002 85B0     	 sub sp,sp,#20
 2341              	.LCFI146:
 2342              	 .cfi_def_cfa_offset 24
 2343 0004 00AF     	 add r7,sp,#0
 2344              	.LCFI147:
 2345              	 .cfi_def_cfa_register 7
 2346 0006 F860     	 str r0,[r7,#12]
 2347 0008 7A60     	 str r2,[r7,#4]
 2348 000a 1A46     	 mov r2,r3
 2349 000c 0B46     	 mov r3,r1
 2350 000e FB72     	 strb r3,[r7,#11]
 2351 0010 1346     	 mov r3,r2
 2352 0012 3B81     	 strh r3,[r7,#8]
 554:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2353              	 .loc 2 554 25
 2354 0014 FB7A     	 ldrb r3,[r7,#11]
 2355 0016 FA68     	 ldr r2,[r7,#12]
 2356 0018 5821     	 movs r1,#88
 2357 001a 01FB03F3 	 mul r3,r1,r3
 2358 001e 1344     	 add r3,r3,r2
 2359 0020 1833     	 adds r3,r3,#24
 2360 0022 1A68     	 ldr r2,[r3]
 2361 0024 FB7A     	 ldrb r3,[r7,#11]
 2362 0026 42F40032 	 orr r2,r2,#131072
 2363 002a F968     	 ldr r1,[r7,#12]
 2364 002c 5820     	 movs r0,#88
 2365 002e 00FB03F3 	 mul r3,r0,r3
 2366 0032 0B44     	 add r3,r3,r1
 2367 0034 1833     	 adds r3,r3,#24
 2368 0036 1A60     	 str r2,[r3]
 555:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2369              	 .loc 2 555 75
 2370 0038 3B89     	 ldrh r3,[r7,#8]
 2371              	 .loc 2 555 91
 2372 003a 1905     	 lsls r1,r3,#20
 2373              	 .loc 2 555 19
 2374 003c FB7A     	 ldrb r3,[r7,#11]
 2375              	 .loc 2 555 72
 2376 003e 7A68     	 ldr r2,[r7,#4]
 2377 0040 0A43     	 orrs r2,r2,r1
 2378              	 .loc 2 555 24
 2379 0042 F968     	 ldr r1,[r7,#12]
 2380 0044 5820     	 movs r0,#88
 2381 0046 00FB03F3 	 mul r3,r0,r3
 2382 004a 0B44     	 add r3,r3,r1
 2383 004c 4833     	 adds r3,r3,#72
 2384 004e 1A60     	 str r2,[r3]
 556:../Libraries/XMCLib/src/xmc_dma.c **** }
 2385              	 .loc 2 556 1
 2386 0050 00BF     	 nop
 2387 0052 1437     	 adds r7,r7,#20
 2388              	.LCFI148:
 2389              	 .cfi_def_cfa_offset 4
 2390 0054 BD46     	 mov sp,r7
 2391              	.LCFI149:
 2392              	 .cfi_def_cfa_register 13
 2393              	 
 2394 0056 5DF8047B 	 ldr r7,[sp],#4
 2395              	.LCFI150:
 2396              	 .cfi_restore 7
 2397              	 .cfi_def_cfa_offset 0
 2398 005a 7047     	 bx lr
 2399              	 .cfi_endproc
 2400              	.LFE204:
 2402              	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2403              	 .align 1
 2404              	 .global XMC_DMA_CH_DisableSourceGather
 2405              	 .syntax unified
 2406              	 .thumb
 2407              	 .thumb_func
 2408              	 .fpu fpv4-sp-d16
 2410              	XMC_DMA_CH_DisableSourceGather:
 2411              	.LFB205:
 557:../Libraries/XMCLib/src/xmc_dma.c **** 
 558:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 559:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 560:../Libraries/XMCLib/src/xmc_dma.c **** {
 2412              	 .loc 2 560 1
 2413              	 .cfi_startproc
 2414              	 
 2415              	 
 2416              	 
 2417 0000 80B4     	 push {r7}
 2418              	.LCFI151:
 2419              	 .cfi_def_cfa_offset 4
 2420              	 .cfi_offset 7,-4
 2421 0002 83B0     	 sub sp,sp,#12
 2422              	.LCFI152:
 2423              	 .cfi_def_cfa_offset 16
 2424 0004 00AF     	 add r7,sp,#0
 2425              	.LCFI153:
 2426              	 .cfi_def_cfa_register 7
 2427 0006 7860     	 str r0,[r7,#4]
 2428 0008 0B46     	 mov r3,r1
 2429 000a FB70     	 strb r3,[r7,#3]
 561:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2430              	 .loc 2 561 25
 2431 000c FB78     	 ldrb r3,[r7,#3]
 2432 000e 7A68     	 ldr r2,[r7,#4]
 2433 0010 5821     	 movs r1,#88
 2434 0012 01FB03F3 	 mul r3,r1,r3
 2435 0016 1344     	 add r3,r3,r2
 2436 0018 1833     	 adds r3,r3,#24
 2437 001a 1A68     	 ldr r2,[r3]
 2438 001c FB78     	 ldrb r3,[r7,#3]
 2439 001e 22F40032 	 bic r2,r2,#131072
 2440 0022 7968     	 ldr r1,[r7,#4]
 2441 0024 5820     	 movs r0,#88
 2442 0026 00FB03F3 	 mul r3,r0,r3
 2443 002a 0B44     	 add r3,r3,r1
 2444 002c 1833     	 adds r3,r3,#24
 2445 002e 1A60     	 str r2,[r3]
 562:../Libraries/XMCLib/src/xmc_dma.c **** }
 2446              	 .loc 2 562 1
 2447 0030 00BF     	 nop
 2448 0032 0C37     	 adds r7,r7,#12
 2449              	.LCFI154:
 2450              	 .cfi_def_cfa_offset 4
 2451 0034 BD46     	 mov sp,r7
 2452              	.LCFI155:
 2453              	 .cfi_def_cfa_register 13
 2454              	 
 2455 0036 5DF8047B 	 ldr r7,[sp],#4
 2456              	.LCFI156:
 2457              	 .cfi_restore 7
 2458              	 .cfi_def_cfa_offset 0
 2459 003a 7047     	 bx lr
 2460              	 .cfi_endproc
 2461              	.LFE205:
 2463              	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2464              	 .align 1
 2465              	 .global XMC_DMA_CH_EnableDestinationScatter
 2466              	 .syntax unified
 2467              	 .thumb
 2468              	 .thumb_func
 2469              	 .fpu fpv4-sp-d16
 2471              	XMC_DMA_CH_EnableDestinationScatter:
 2472              	.LFB206:
 563:../Libraries/XMCLib/src/xmc_dma.c **** 
 564:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 565:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 566:../Libraries/XMCLib/src/xmc_dma.c **** {
 2473              	 .loc 2 566 1
 2474              	 .cfi_startproc
 2475              	 
 2476              	 
 2477              	 
 2478 0000 80B4     	 push {r7}
 2479              	.LCFI157:
 2480              	 .cfi_def_cfa_offset 4
 2481              	 .cfi_offset 7,-4
 2482 0002 85B0     	 sub sp,sp,#20
 2483              	.LCFI158:
 2484              	 .cfi_def_cfa_offset 24
 2485 0004 00AF     	 add r7,sp,#0
 2486              	.LCFI159:
 2487              	 .cfi_def_cfa_register 7
 2488 0006 F860     	 str r0,[r7,#12]
 2489 0008 7A60     	 str r2,[r7,#4]
 2490 000a 1A46     	 mov r2,r3
 2491 000c 0B46     	 mov r3,r1
 2492 000e FB72     	 strb r3,[r7,#11]
 2493 0010 1346     	 mov r3,r2
 2494 0012 3B81     	 strh r3,[r7,#8]
 567:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2495              	 .loc 2 567 25
 2496 0014 FB7A     	 ldrb r3,[r7,#11]
 2497 0016 FA68     	 ldr r2,[r7,#12]
 2498 0018 5821     	 movs r1,#88
 2499 001a 01FB03F3 	 mul r3,r1,r3
 2500 001e 1344     	 add r3,r3,r2
 2501 0020 1833     	 adds r3,r3,#24
 2502 0022 1A68     	 ldr r2,[r3]
 2503 0024 FB7A     	 ldrb r3,[r7,#11]
 2504 0026 42F48022 	 orr r2,r2,#262144
 2505 002a F968     	 ldr r1,[r7,#12]
 2506 002c 5820     	 movs r0,#88
 2507 002e 00FB03F3 	 mul r3,r0,r3
 2508 0032 0B44     	 add r3,r3,r1
 2509 0034 1833     	 adds r3,r3,#24
 2510 0036 1A60     	 str r2,[r3]
 568:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2511              	 .loc 2 568 75
 2512 0038 3B89     	 ldrh r3,[r7,#8]
 2513              	 .loc 2 568 91
 2514 003a 1905     	 lsls r1,r3,#20
 2515              	 .loc 2 568 19
 2516 003c FB7A     	 ldrb r3,[r7,#11]
 2517              	 .loc 2 568 72
 2518 003e 7A68     	 ldr r2,[r7,#4]
 2519 0040 0A43     	 orrs r2,r2,r1
 2520              	 .loc 2 568 24
 2521 0042 F968     	 ldr r1,[r7,#12]
 2522 0044 5820     	 movs r0,#88
 2523 0046 00FB03F3 	 mul r3,r0,r3
 2524 004a 0B44     	 add r3,r3,r1
 2525 004c 5033     	 adds r3,r3,#80
 2526 004e 1A60     	 str r2,[r3]
 569:../Libraries/XMCLib/src/xmc_dma.c **** }
 2527              	 .loc 2 569 1
 2528 0050 00BF     	 nop
 2529 0052 1437     	 adds r7,r7,#20
 2530              	.LCFI160:
 2531              	 .cfi_def_cfa_offset 4
 2532 0054 BD46     	 mov sp,r7
 2533              	.LCFI161:
 2534              	 .cfi_def_cfa_register 13
 2535              	 
 2536 0056 5DF8047B 	 ldr r7,[sp],#4
 2537              	.LCFI162:
 2538              	 .cfi_restore 7
 2539              	 .cfi_def_cfa_offset 0
 2540 005a 7047     	 bx lr
 2541              	 .cfi_endproc
 2542              	.LFE206:
 2544              	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2545              	 .align 1
 2546              	 .global XMC_DMA_CH_DisableDestinationScatter
 2547              	 .syntax unified
 2548              	 .thumb
 2549              	 .thumb_func
 2550              	 .fpu fpv4-sp-d16
 2552              	XMC_DMA_CH_DisableDestinationScatter:
 2553              	.LFB207:
 570:../Libraries/XMCLib/src/xmc_dma.c **** 
 571:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 572:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 573:../Libraries/XMCLib/src/xmc_dma.c **** {
 2554              	 .loc 2 573 1
 2555              	 .cfi_startproc
 2556              	 
 2557              	 
 2558              	 
 2559 0000 80B4     	 push {r7}
 2560              	.LCFI163:
 2561              	 .cfi_def_cfa_offset 4
 2562              	 .cfi_offset 7,-4
 2563 0002 83B0     	 sub sp,sp,#12
 2564              	.LCFI164:
 2565              	 .cfi_def_cfa_offset 16
 2566 0004 00AF     	 add r7,sp,#0
 2567              	.LCFI165:
 2568              	 .cfi_def_cfa_register 7
 2569 0006 7860     	 str r0,[r7,#4]
 2570 0008 0B46     	 mov r3,r1
 2571 000a FB70     	 strb r3,[r7,#3]
 574:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2572              	 .loc 2 574 25
 2573 000c FB78     	 ldrb r3,[r7,#3]
 2574 000e 7A68     	 ldr r2,[r7,#4]
 2575 0010 5821     	 movs r1,#88
 2576 0012 01FB03F3 	 mul r3,r1,r3
 2577 0016 1344     	 add r3,r3,r2
 2578 0018 1833     	 adds r3,r3,#24
 2579 001a 1A68     	 ldr r2,[r3]
 2580 001c FB78     	 ldrb r3,[r7,#3]
 2581 001e 22F48022 	 bic r2,r2,#262144
 2582 0022 7968     	 ldr r1,[r7,#4]
 2583 0024 5820     	 movs r0,#88
 2584 0026 00FB03F3 	 mul r3,r0,r3
 2585 002a 0B44     	 add r3,r3,r1
 2586 002c 1833     	 adds r3,r3,#24
 2587 002e 1A60     	 str r2,[r3]
 575:../Libraries/XMCLib/src/xmc_dma.c **** }
 2588              	 .loc 2 575 1
 2589 0030 00BF     	 nop
 2590 0032 0C37     	 adds r7,r7,#12
 2591              	.LCFI166:
 2592              	 .cfi_def_cfa_offset 4
 2593 0034 BD46     	 mov sp,r7
 2594              	.LCFI167:
 2595              	 .cfi_def_cfa_register 13
 2596              	 
 2597 0036 5DF8047B 	 ldr r7,[sp],#4
 2598              	.LCFI168:
 2599              	 .cfi_restore 7
 2600              	 .cfi_def_cfa_offset 0
 2601 003a 7047     	 bx lr
 2602              	 .cfi_endproc
 2603              	.LFE207:
 2605              	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2606              	 .align 1
 2607              	 .global XMC_DMA_CH_TriggerSourceRequest
 2608              	 .syntax unified
 2609              	 .thumb
 2610              	 .thumb_func
 2611              	 .fpu fpv4-sp-d16
 2613              	XMC_DMA_CH_TriggerSourceRequest:
 2614              	.LFB208:
 576:../Libraries/XMCLib/src/xmc_dma.c **** 
 577:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 578:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 579:../Libraries/XMCLib/src/xmc_dma.c **** {
 2615              	 .loc 2 579 1
 2616              	 .cfi_startproc
 2617              	 
 2618              	 
 2619              	 
 2620 0000 80B4     	 push {r7}
 2621              	.LCFI169:
 2622              	 .cfi_def_cfa_offset 4
 2623              	 .cfi_offset 7,-4
 2624 0002 83B0     	 sub sp,sp,#12
 2625              	.LCFI170:
 2626              	 .cfi_def_cfa_offset 16
 2627 0004 00AF     	 add r7,sp,#0
 2628              	.LCFI171:
 2629              	 .cfi_def_cfa_register 7
 2630 0006 7860     	 str r0,[r7,#4]
 2631 0008 0846     	 mov r0,r1
 2632 000a 1146     	 mov r1,r2
 2633 000c 1A46     	 mov r2,r3
 2634 000e 0346     	 mov r3,r0
 2635 0010 FB70     	 strb r3,[r7,#3]
 2636 0012 0B46     	 mov r3,r1
 2637 0014 BB70     	 strb r3,[r7,#2]
 2638 0016 1346     	 mov r3,r2
 2639 0018 7B70     	 strb r3,[r7,#1]
 580:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2640              	 .loc 2 580 6
 2641 001a BB78     	 ldrb r3,[r7,#2]
 2642 001c 002B     	 cmp r3,#0
 2643 001e 06D1     	 bne .L124
 581:../Libraries/XMCLib/src/xmc_dma.c ****   {
 582:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2644              	 .loc 2 582 44
 2645 0020 FB78     	 ldrb r3,[r7,#3]
 2646 0022 40F20112 	 movw r2,#257
 2647 0026 9A40     	 lsls r2,r2,r3
 2648              	 .loc 2 582 23
 2649 0028 7B68     	 ldr r3,[r7,#4]
 2650 002a C3F87823 	 str r2,[r3,#888]
 2651              	.L124:
 583:../Libraries/XMCLib/src/xmc_dma.c ****   }
 584:../Libraries/XMCLib/src/xmc_dma.c **** 
 585:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2652              	 .loc 2 585 6
 2653 002e 7B78     	 ldrb r3,[r7,#1]
 2654 0030 002B     	 cmp r3,#0
 2655 0032 06D0     	 beq .L125
 586:../Libraries/XMCLib/src/xmc_dma.c ****   {
 587:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2656              	 .loc 2 587 40
 2657 0034 FB78     	 ldrb r3,[r7,#3]
 2658 0036 40F20112 	 movw r2,#257
 2659 003a 9A40     	 lsls r2,r2,r3
 2660              	 .loc 2 587 20
 2661 003c 7B68     	 ldr r3,[r7,#4]
 2662 003e C3F88823 	 str r2,[r3,#904]
 2663              	.L125:
 588:../Libraries/XMCLib/src/xmc_dma.c ****   }
 589:../Libraries/XMCLib/src/xmc_dma.c **** 
 590:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2664              	 .loc 2 590 38
 2665 0042 FB78     	 ldrb r3,[r7,#3]
 2666 0044 40F20112 	 movw r2,#257
 2667 0048 9A40     	 lsls r2,r2,r3
 2668              	 .loc 2 590 18
 2669 004a 7B68     	 ldr r3,[r7,#4]
 2670 004c C3F86823 	 str r2,[r3,#872]
 591:../Libraries/XMCLib/src/xmc_dma.c **** }
 2671              	 .loc 2 591 1
 2672 0050 00BF     	 nop
 2673 0052 0C37     	 adds r7,r7,#12
 2674              	.LCFI172:
 2675              	 .cfi_def_cfa_offset 4
 2676 0054 BD46     	 mov sp,r7
 2677              	.LCFI173:
 2678              	 .cfi_def_cfa_register 13
 2679              	 
 2680 0056 5DF8047B 	 ldr r7,[sp],#4
 2681              	.LCFI174:
 2682              	 .cfi_restore 7
 2683              	 .cfi_def_cfa_offset 0
 2684 005a 7047     	 bx lr
 2685              	 .cfi_endproc
 2686              	.LFE208:
 2688              	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2689              	 .align 1
 2690              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2691              	 .syntax unified
 2692              	 .thumb
 2693              	 .thumb_func
 2694              	 .fpu fpv4-sp-d16
 2696              	XMC_DMA_CH_TriggerDestinationRequest:
 2697              	.LFB209:
 592:../Libraries/XMCLib/src/xmc_dma.c **** 
 593:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 594:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 595:../Libraries/XMCLib/src/xmc_dma.c **** {
 2698              	 .loc 2 595 1
 2699              	 .cfi_startproc
 2700              	 
 2701              	 
 2702              	 
 2703 0000 80B4     	 push {r7}
 2704              	.LCFI175:
 2705              	 .cfi_def_cfa_offset 4
 2706              	 .cfi_offset 7,-4
 2707 0002 83B0     	 sub sp,sp,#12
 2708              	.LCFI176:
 2709              	 .cfi_def_cfa_offset 16
 2710 0004 00AF     	 add r7,sp,#0
 2711              	.LCFI177:
 2712              	 .cfi_def_cfa_register 7
 2713 0006 7860     	 str r0,[r7,#4]
 2714 0008 0846     	 mov r0,r1
 2715 000a 1146     	 mov r1,r2
 2716 000c 1A46     	 mov r2,r3
 2717 000e 0346     	 mov r3,r0
 2718 0010 FB70     	 strb r3,[r7,#3]
 2719 0012 0B46     	 mov r3,r1
 2720 0014 BB70     	 strb r3,[r7,#2]
 2721 0016 1346     	 mov r3,r2
 2722 0018 7B70     	 strb r3,[r7,#1]
 596:../Libraries/XMCLib/src/xmc_dma.c ****   if (type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2723              	 .loc 2 596 6
 2724 001a BB78     	 ldrb r3,[r7,#2]
 2725 001c 002B     	 cmp r3,#0
 2726 001e 06D1     	 bne .L127
 597:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2727              	 .loc 2 598 43
 2728 0020 FB78     	 ldrb r3,[r7,#3]
 2729 0022 40F20112 	 movw r2,#257
 2730 0026 9A40     	 lsls r2,r2,r3
 2731              	 .loc 2 598 23
 2732 0028 7B68     	 ldr r3,[r7,#4]
 2733 002a C3F88023 	 str r2,[r3,#896]
 2734              	.L127:
 599:../Libraries/XMCLib/src/xmc_dma.c ****   }
 600:../Libraries/XMCLib/src/xmc_dma.c **** 
 601:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2735              	 .loc 2 601 6
 2736 002e 7B78     	 ldrb r3,[r7,#1]
 2737 0030 002B     	 cmp r3,#0
 2738 0032 06D0     	 beq .L128
 602:../Libraries/XMCLib/src/xmc_dma.c ****   {
 603:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2739              	 .loc 2 603 40
 2740 0034 FB78     	 ldrb r3,[r7,#3]
 2741 0036 40F20112 	 movw r2,#257
 2742 003a 9A40     	 lsls r2,r2,r3
 2743              	 .loc 2 603 20
 2744 003c 7B68     	 ldr r3,[r7,#4]
 2745 003e C3F89023 	 str r2,[r3,#912]
 2746              	.L128:
 604:../Libraries/XMCLib/src/xmc_dma.c ****   }
 605:../Libraries/XMCLib/src/xmc_dma.c **** 
 606:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2747              	 .loc 2 606 38
 2748 0042 FB78     	 ldrb r3,[r7,#3]
 2749 0044 40F20112 	 movw r2,#257
 2750 0048 9A40     	 lsls r2,r2,r3
 2751              	 .loc 2 606 18
 2752 004a 7B68     	 ldr r3,[r7,#4]
 2753 004c C3F87023 	 str r2,[r3,#880]
 607:../Libraries/XMCLib/src/xmc_dma.c **** }
 2754              	 .loc 2 607 1
 2755 0050 00BF     	 nop
 2756 0052 0C37     	 adds r7,r7,#12
 2757              	.LCFI178:
 2758              	 .cfi_def_cfa_offset 4
 2759 0054 BD46     	 mov sp,r7
 2760              	.LCFI179:
 2761              	 .cfi_def_cfa_register 13
 2762              	 
 2763 0056 5DF8047B 	 ldr r7,[sp],#4
 2764              	.LCFI180:
 2765              	 .cfi_restore 7
 2766              	 .cfi_def_cfa_offset 0
 2767 005a 7047     	 bx lr
 2768              	 .cfi_endproc
 2769              	.LFE209:
 2771              	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2772              	 .align 1
 2773              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2774              	 .syntax unified
 2775              	 .thumb
 2776              	 .thumb_func
 2777              	 .fpu fpv4-sp-d16
 2779              	XMC_DMA_CH_EnableSourceAddressReload:
 2780              	.LFB210:
 608:../Libraries/XMCLib/src/xmc_dma.c **** 
 609:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 610:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 611:../Libraries/XMCLib/src/xmc_dma.c **** {
 2781              	 .loc 2 611 1
 2782              	 .cfi_startproc
 2783              	 
 2784              	 
 2785              	 
 2786 0000 80B4     	 push {r7}
 2787              	.LCFI181:
 2788              	 .cfi_def_cfa_offset 4
 2789              	 .cfi_offset 7,-4
 2790 0002 83B0     	 sub sp,sp,#12
 2791              	.LCFI182:
 2792              	 .cfi_def_cfa_offset 16
 2793 0004 00AF     	 add r7,sp,#0
 2794              	.LCFI183:
 2795              	 .cfi_def_cfa_register 7
 2796 0006 7860     	 str r0,[r7,#4]
 2797 0008 0B46     	 mov r3,r1
 2798 000a FB70     	 strb r3,[r7,#3]
 612:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2799              	 .loc 2 612 25
 2800 000c FB78     	 ldrb r3,[r7,#3]
 2801 000e 7A68     	 ldr r2,[r7,#4]
 2802 0010 5821     	 movs r1,#88
 2803 0012 01FB03F3 	 mul r3,r1,r3
 2804 0016 1344     	 add r3,r3,r2
 2805 0018 4033     	 adds r3,r3,#64
 2806 001a 1A68     	 ldr r2,[r3]
 2807 001c FB78     	 ldrb r3,[r7,#3]
 2808 001e 42F08042 	 orr r2,r2,#1073741824
 2809 0022 7968     	 ldr r1,[r7,#4]
 2810 0024 5820     	 movs r0,#88
 2811 0026 00FB03F3 	 mul r3,r0,r3
 2812 002a 0B44     	 add r3,r3,r1
 2813 002c 4033     	 adds r3,r3,#64
 2814 002e 1A60     	 str r2,[r3]
 613:../Libraries/XMCLib/src/xmc_dma.c **** }
 2815              	 .loc 2 613 1
 2816 0030 00BF     	 nop
 2817 0032 0C37     	 adds r7,r7,#12
 2818              	.LCFI184:
 2819              	 .cfi_def_cfa_offset 4
 2820 0034 BD46     	 mov sp,r7
 2821              	.LCFI185:
 2822              	 .cfi_def_cfa_register 13
 2823              	 
 2824 0036 5DF8047B 	 ldr r7,[sp],#4
 2825              	.LCFI186:
 2826              	 .cfi_restore 7
 2827              	 .cfi_def_cfa_offset 0
 2828 003a 7047     	 bx lr
 2829              	 .cfi_endproc
 2830              	.LFE210:
 2832              	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2833              	 .align 1
 2834              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2835              	 .syntax unified
 2836              	 .thumb
 2837              	 .thumb_func
 2838              	 .fpu fpv4-sp-d16
 2840              	XMC_DMA_CH_DisableSourceAddressReload:
 2841              	.LFB211:
 614:../Libraries/XMCLib/src/xmc_dma.c **** 
 615:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 616:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 617:../Libraries/XMCLib/src/xmc_dma.c **** {
 2842              	 .loc 2 617 1
 2843              	 .cfi_startproc
 2844              	 
 2845              	 
 2846              	 
 2847 0000 80B4     	 push {r7}
 2848              	.LCFI187:
 2849              	 .cfi_def_cfa_offset 4
 2850              	 .cfi_offset 7,-4
 2851 0002 83B0     	 sub sp,sp,#12
 2852              	.LCFI188:
 2853              	 .cfi_def_cfa_offset 16
 2854 0004 00AF     	 add r7,sp,#0
 2855              	.LCFI189:
 2856              	 .cfi_def_cfa_register 7
 2857 0006 7860     	 str r0,[r7,#4]
 2858 0008 0B46     	 mov r3,r1
 2859 000a FB70     	 strb r3,[r7,#3]
 618:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2860              	 .loc 2 618 25
 2861 000c FB78     	 ldrb r3,[r7,#3]
 2862 000e 7A68     	 ldr r2,[r7,#4]
 2863 0010 5821     	 movs r1,#88
 2864 0012 01FB03F3 	 mul r3,r1,r3
 2865 0016 1344     	 add r3,r3,r2
 2866 0018 4033     	 adds r3,r3,#64
 2867 001a 1A68     	 ldr r2,[r3]
 2868 001c FB78     	 ldrb r3,[r7,#3]
 2869 001e 22F08042 	 bic r2,r2,#1073741824
 2870 0022 7968     	 ldr r1,[r7,#4]
 2871 0024 5820     	 movs r0,#88
 2872 0026 00FB03F3 	 mul r3,r0,r3
 2873 002a 0B44     	 add r3,r3,r1
 2874 002c 4033     	 adds r3,r3,#64
 2875 002e 1A60     	 str r2,[r3]
 619:../Libraries/XMCLib/src/xmc_dma.c **** }
 2876              	 .loc 2 619 1
 2877 0030 00BF     	 nop
 2878 0032 0C37     	 adds r7,r7,#12
 2879              	.LCFI190:
 2880              	 .cfi_def_cfa_offset 4
 2881 0034 BD46     	 mov sp,r7
 2882              	.LCFI191:
 2883              	 .cfi_def_cfa_register 13
 2884              	 
 2885 0036 5DF8047B 	 ldr r7,[sp],#4
 2886              	.LCFI192:
 2887              	 .cfi_restore 7
 2888              	 .cfi_def_cfa_offset 0
 2889 003a 7047     	 bx lr
 2890              	 .cfi_endproc
 2891              	.LFE211:
 2893              	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2894              	 .align 1
 2895              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2896              	 .syntax unified
 2897              	 .thumb
 2898              	 .thumb_func
 2899              	 .fpu fpv4-sp-d16
 2901              	XMC_DMA_CH_EnableDestinationAddressReload:
 2902              	.LFB212:
 620:../Libraries/XMCLib/src/xmc_dma.c **** 
 621:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 622:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 623:../Libraries/XMCLib/src/xmc_dma.c **** {
 2903              	 .loc 2 623 1
 2904              	 .cfi_startproc
 2905              	 
 2906              	 
 2907              	 
 2908 0000 80B4     	 push {r7}
 2909              	.LCFI193:
 2910              	 .cfi_def_cfa_offset 4
 2911              	 .cfi_offset 7,-4
 2912 0002 83B0     	 sub sp,sp,#12
 2913              	.LCFI194:
 2914              	 .cfi_def_cfa_offset 16
 2915 0004 00AF     	 add r7,sp,#0
 2916              	.LCFI195:
 2917              	 .cfi_def_cfa_register 7
 2918 0006 7860     	 str r0,[r7,#4]
 2919 0008 0B46     	 mov r3,r1
 2920 000a FB70     	 strb r3,[r7,#3]
 624:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2921              	 .loc 2 624 25
 2922 000c FB78     	 ldrb r3,[r7,#3]
 2923 000e 7A68     	 ldr r2,[r7,#4]
 2924 0010 5821     	 movs r1,#88
 2925 0012 01FB03F3 	 mul r3,r1,r3
 2926 0016 1344     	 add r3,r3,r2
 2927 0018 4033     	 adds r3,r3,#64
 2928 001a 1A68     	 ldr r2,[r3]
 2929 001c FB78     	 ldrb r3,[r7,#3]
 2930 001e 42F00042 	 orr r2,r2,#-2147483648
 2931 0022 7968     	 ldr r1,[r7,#4]
 2932 0024 5820     	 movs r0,#88
 2933 0026 00FB03F3 	 mul r3,r0,r3
 2934 002a 0B44     	 add r3,r3,r1
 2935 002c 4033     	 adds r3,r3,#64
 2936 002e 1A60     	 str r2,[r3]
 625:../Libraries/XMCLib/src/xmc_dma.c **** }
 2937              	 .loc 2 625 1
 2938 0030 00BF     	 nop
 2939 0032 0C37     	 adds r7,r7,#12
 2940              	.LCFI196:
 2941              	 .cfi_def_cfa_offset 4
 2942 0034 BD46     	 mov sp,r7
 2943              	.LCFI197:
 2944              	 .cfi_def_cfa_register 13
 2945              	 
 2946 0036 5DF8047B 	 ldr r7,[sp],#4
 2947              	.LCFI198:
 2948              	 .cfi_restore 7
 2949              	 .cfi_def_cfa_offset 0
 2950 003a 7047     	 bx lr
 2951              	 .cfi_endproc
 2952              	.LFE212:
 2954              	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2955              	 .align 1
 2956              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2957              	 .syntax unified
 2958              	 .thumb
 2959              	 .thumb_func
 2960              	 .fpu fpv4-sp-d16
 2962              	XMC_DMA_CH_DisableDestinationAddressReload:
 2963              	.LFB213:
 626:../Libraries/XMCLib/src/xmc_dma.c **** 
 627:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 628:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 629:../Libraries/XMCLib/src/xmc_dma.c **** {
 2964              	 .loc 2 629 1
 2965              	 .cfi_startproc
 2966              	 
 2967              	 
 2968              	 
 2969 0000 80B4     	 push {r7}
 2970              	.LCFI199:
 2971              	 .cfi_def_cfa_offset 4
 2972              	 .cfi_offset 7,-4
 2973 0002 83B0     	 sub sp,sp,#12
 2974              	.LCFI200:
 2975              	 .cfi_def_cfa_offset 16
 2976 0004 00AF     	 add r7,sp,#0
 2977              	.LCFI201:
 2978              	 .cfi_def_cfa_register 7
 2979 0006 7860     	 str r0,[r7,#4]
 2980 0008 0B46     	 mov r3,r1
 2981 000a FB70     	 strb r3,[r7,#3]
 630:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2982              	 .loc 2 630 25
 2983 000c FB78     	 ldrb r3,[r7,#3]
 2984 000e 7A68     	 ldr r2,[r7,#4]
 2985 0010 5821     	 movs r1,#88
 2986 0012 01FB03F3 	 mul r3,r1,r3
 2987 0016 1344     	 add r3,r3,r2
 2988 0018 4033     	 adds r3,r3,#64
 2989 001a 1A68     	 ldr r2,[r3]
 2990 001c FB78     	 ldrb r3,[r7,#3]
 2991 001e 22F00042 	 bic r2,r2,#-2147483648
 2992 0022 7968     	 ldr r1,[r7,#4]
 2993 0024 5820     	 movs r0,#88
 2994 0026 00FB03F3 	 mul r3,r0,r3
 2995 002a 0B44     	 add r3,r3,r1
 2996 002c 4033     	 adds r3,r3,#64
 2997 002e 1A60     	 str r2,[r3]
 631:../Libraries/XMCLib/src/xmc_dma.c **** }
 2998              	 .loc 2 631 1
 2999 0030 00BF     	 nop
 3000 0032 0C37     	 adds r7,r7,#12
 3001              	.LCFI202:
 3002              	 .cfi_def_cfa_offset 4
 3003 0034 BD46     	 mov sp,r7
 3004              	.LCFI203:
 3005              	 .cfi_def_cfa_register 13
 3006              	 
 3007 0036 5DF8047B 	 ldr r7,[sp],#4
 3008              	.LCFI204:
 3009              	 .cfi_restore 7
 3010              	 .cfi_def_cfa_offset 0
 3011 003a 7047     	 bx lr
 3012              	 .cfi_endproc
 3013              	.LFE213:
 3015              	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 3016              	 .align 1
 3017              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 3018              	 .syntax unified
 3019              	 .thumb
 3020              	 .thumb_func
 3021              	 .fpu fpv4-sp-d16
 3023              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 3024              	.LFB214:
 632:../Libraries/XMCLib/src/xmc_dma.c **** 
 633:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 634:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 635:../Libraries/XMCLib/src/xmc_dma.c **** {
 3025              	 .loc 2 635 1
 3026              	 .cfi_startproc
 3027              	 
 3028              	 
 3029              	 
 3030 0000 80B4     	 push {r7}
 3031              	.LCFI205:
 3032              	 .cfi_def_cfa_offset 4
 3033              	 .cfi_offset 7,-4
 3034 0002 83B0     	 sub sp,sp,#12
 3035              	.LCFI206:
 3036              	 .cfi_def_cfa_offset 16
 3037 0004 00AF     	 add r7,sp,#0
 3038              	.LCFI207:
 3039              	 .cfi_def_cfa_register 7
 3040 0006 7860     	 str r0,[r7,#4]
 3041 0008 0B46     	 mov r3,r1
 3042 000a FB70     	 strb r3,[r7,#3]
 636:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 3043              	 .loc 2 636 25
 3044 000c FB78     	 ldrb r3,[r7,#3]
 3045 000e 7A68     	 ldr r2,[r7,#4]
 3046 0010 5821     	 movs r1,#88
 3047 0012 01FB03F3 	 mul r3,r1,r3
 3048 0016 1344     	 add r3,r3,r2
 3049 0018 4033     	 adds r3,r3,#64
 3050 001a 1A68     	 ldr r2,[r3]
 3051 001c FB78     	 ldrb r3,[r7,#3]
 3052 001e 22F04042 	 bic r2,r2,#-1073741824
 3053 0022 7968     	 ldr r1,[r7,#4]
 3054 0024 5820     	 movs r0,#88
 3055 0026 00FB03F3 	 mul r3,r0,r3
 3056 002a 0B44     	 add r3,r3,r1
 3057 002c 4033     	 adds r3,r3,#64
 3058 002e 1A60     	 str r2,[r3]
 637:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 3059              	 .loc 2 637 25
 3060 0030 FB78     	 ldrb r3,[r7,#3]
 3061 0032 7A68     	 ldr r2,[r7,#4]
 3062 0034 5821     	 movs r1,#88
 3063 0036 01FB03F3 	 mul r3,r1,r3
 3064 003a 1344     	 add r3,r3,r2
 3065 003c 1833     	 adds r3,r3,#24
 3066 003e 1A68     	 ldr r2,[r3]
 3067 0040 FB78     	 ldrb r3,[r7,#3]
 3068 0042 22F0C052 	 bic r2,r2,#402653184
 3069 0046 7968     	 ldr r1,[r7,#4]
 3070 0048 5820     	 movs r0,#88
 3071 004a 00FB03F3 	 mul r3,r0,r3
 3072 004e 0B44     	 add r3,r3,r1
 3073 0050 1833     	 adds r3,r3,#24
 3074 0052 1A60     	 str r2,[r3]
 638:../Libraries/XMCLib/src/xmc_dma.c **** }
 3075              	 .loc 2 638 1
 3076 0054 00BF     	 nop
 3077 0056 0C37     	 adds r7,r7,#12
 3078              	.LCFI208:
 3079              	 .cfi_def_cfa_offset 4
 3080 0058 BD46     	 mov sp,r7
 3081              	.LCFI209:
 3082              	 .cfi_def_cfa_register 13
 3083              	 
 3084 005a 5DF8047B 	 ldr r7,[sp],#4
 3085              	.LCFI210:
 3086              	 .cfi_restore 7
 3087              	 .cfi_def_cfa_offset 0
 3088 005e 7047     	 bx lr
 3089              	 .cfi_endproc
 3090              	.LFE214:
 3092              	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 3093              	 .align 1
 3094              	 .global XMC_DMA_CH_SetEventHandler
 3095              	 .syntax unified
 3096              	 .thumb
 3097              	 .thumb_func
 3098              	 .fpu fpv4-sp-d16
 3100              	XMC_DMA_CH_SetEventHandler:
 3101              	.LFB215:
 639:../Libraries/XMCLib/src/xmc_dma.c **** 
 640:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 641:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 642:../Libraries/XMCLib/src/xmc_dma.c **** {
 3102              	 .loc 2 642 1
 3103              	 .cfi_startproc
 3104              	 
 3105              	 
 3106              	 
 3107 0000 80B4     	 push {r7}
 3108              	.LCFI211:
 3109              	 .cfi_def_cfa_offset 4
 3110              	 .cfi_offset 7,-4
 3111 0002 85B0     	 sub sp,sp,#20
 3112              	.LCFI212:
 3113              	 .cfi_def_cfa_offset 24
 3114 0004 00AF     	 add r7,sp,#0
 3115              	.LCFI213:
 3116              	 .cfi_def_cfa_register 7
 3117 0006 F860     	 str r0,[r7,#12]
 3118 0008 0B46     	 mov r3,r1
 3119 000a 7A60     	 str r2,[r7,#4]
 3120 000c FB72     	 strb r3,[r7,#11]
 643:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 644:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3121              	 .loc 2 644 6
 3122 000e FB68     	 ldr r3,[r7,#12]
 3123 0010 094A     	 ldr r2,.L138
 3124 0012 9342     	 cmp r3,r2
 3125 0014 05D1     	 bne .L135
 645:../Libraries/XMCLib/src/xmc_dma.c ****   {
 646:../Libraries/XMCLib/src/xmc_dma.c **** #else
 647:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 648:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 649:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 3126              	 .loc 2 649 24
 3127 0016 FB7A     	 ldrb r3,[r7,#11]
 3128              	 .loc 2 649 34
 3129 0018 0849     	 ldr r1,.L138+4
 3130 001a 7A68     	 ldr r2,[r7,#4]
 3131 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 650:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 651:../Libraries/XMCLib/src/xmc_dma.c ****   }
 652:../Libraries/XMCLib/src/xmc_dma.c ****   else
 653:../Libraries/XMCLib/src/xmc_dma.c ****   {
 654:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 655:../Libraries/XMCLib/src/xmc_dma.c ****   }
 656:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 657:../Libraries/XMCLib/src/xmc_dma.c **** }
 3132              	 .loc 2 657 1
 3133 0020 04E0     	 b .L137
 3134              	.L135:
 654:../Libraries/XMCLib/src/xmc_dma.c ****   }
 3135              	 .loc 2 654 24
 3136 0022 FB7A     	 ldrb r3,[r7,#11]
 654:../Libraries/XMCLib/src/xmc_dma.c ****   }
 3137              	 .loc 2 654 34
 3138 0024 0649     	 ldr r1,.L138+8
 3139 0026 7A68     	 ldr r2,[r7,#4]
 3140 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 3141              	.L137:
 3142              	 .loc 2 657 1
 3143 002c 00BF     	 nop
 3144 002e 1437     	 adds r7,r7,#20
 3145              	.LCFI214:
 3146              	 .cfi_def_cfa_offset 4
 3147 0030 BD46     	 mov sp,r7
 3148              	.LCFI215:
 3149              	 .cfi_def_cfa_register 13
 3150              	 
 3151 0032 5DF8047B 	 ldr r7,[sp],#4
 3152              	.LCFI216:
 3153              	 .cfi_restore 7
 3154              	 .cfi_def_cfa_offset 0
 3155 0036 7047     	 bx lr
 3156              	.L139:
 3157              	 .align 2
 3158              	.L138:
 3159 0038 00400150 	 .word 1342259200
 3160 003c 00000000 	 .word dma0_event_handlers
 3161 0040 00000000 	 .word dma1_event_handlers
 3162              	 .cfi_endproc
 3163              	.LFE215:
 3165              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 3166              	 .align 1
 3167              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 3168              	 .syntax unified
 3169              	 .thumb
 3170              	 .thumb_func
 3171              	 .fpu fpv4-sp-d16
 3173              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 3174              	.LFB216:
 658:../Libraries/XMCLib/src/xmc_dma.c **** 
 659:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 660:../Libraries/XMCLib/src/xmc_dma.c **** {
 3175              	 .loc 2 660 1
 3176              	 .cfi_startproc
 3177              	 
 3178              	 
 3179 0000 80B5     	 push {r7,lr}
 3180              	.LCFI217:
 3181              	 .cfi_def_cfa_offset 8
 3182              	 .cfi_offset 7,-8
 3183              	 .cfi_offset 14,-4
 3184 0002 84B0     	 sub sp,sp,#16
 3185              	.LCFI218:
 3186              	 .cfi_def_cfa_offset 24
 3187 0004 00AF     	 add r7,sp,#0
 3188              	.LCFI219:
 3189              	 .cfi_def_cfa_register 7
 3190 0006 7860     	 str r0,[r7,#4]
 3191 0008 0B46     	 mov r3,r1
 3192 000a FB70     	 strb r3,[r7,#3]
 661:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 662:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 3193              	 .loc 2 662 27
 3194 000c FB78     	 ldrb r3,[r7,#3]
 3195 000e 7A68     	 ldr r2,[r7,#4]
 3196 0010 5821     	 movs r1,#88
 3197 0012 01FB03F3 	 mul r3,r1,r3
 3198 0016 1344     	 add r3,r3,r2
 3199 0018 4433     	 adds r3,r3,#68
 3200 001a 1B68     	 ldr r3,[r3]
 3201              	 .loc 2 662 63
 3202 001c DB09     	 lsrs r3,r3,#7
 3203              	 .loc 2 662 8
 3204 001e 03F00F03 	 and r3,r3,#15
 3205 0022 FB60     	 str r3,[r7,#12]
 663:../Libraries/XMCLib/src/xmc_dma.c **** 
 664:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3206              	 .loc 2 664 3
 3207 0024 FB68     	 ldr r3,[r7,#12]
 3208 0026 DBB2     	 uxtb r3,r3
 3209 0028 1946     	 mov r1,r3
 3210 002a 7868     	 ldr r0,[r7,#4]
 3211 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 665:../Libraries/XMCLib/src/xmc_dma.c **** }
 3212              	 .loc 2 665 1
 3213 0030 00BF     	 nop
 3214 0032 1037     	 adds r7,r7,#16
 3215              	.LCFI220:
 3216              	 .cfi_def_cfa_offset 8
 3217 0034 BD46     	 mov sp,r7
 3218              	.LCFI221:
 3219              	 .cfi_def_cfa_register 13
 3220              	 
 3221 0036 80BD     	 pop {r7,pc}
 3222              	 .cfi_endproc
 3223              	.LFE216:
 3225              	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 3226              	 .align 1
 3227              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 3228              	 .syntax unified
 3229              	 .thumb
 3230              	 .thumb_func
 3231              	 .fpu fpv4-sp-d16
 3233              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 3234              	.LFB217:
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 668:../Libraries/XMCLib/src/xmc_dma.c **** {
 3235              	 .loc 2 668 1
 3236              	 .cfi_startproc
 3237              	 
 3238              	 
 3239 0000 80B5     	 push {r7,lr}
 3240              	.LCFI222:
 3241              	 .cfi_def_cfa_offset 8
 3242              	 .cfi_offset 7,-8
 3243              	 .cfi_offset 14,-4
 3244 0002 84B0     	 sub sp,sp,#16
 3245              	.LCFI223:
 3246              	 .cfi_def_cfa_offset 24
 3247 0004 00AF     	 add r7,sp,#0
 3248              	.LCFI224:
 3249              	 .cfi_def_cfa_register 7
 3250 0006 7860     	 str r0,[r7,#4]
 3251 0008 0B46     	 mov r3,r1
 3252 000a FB70     	 strb r3,[r7,#3]
 669:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 670:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 3253              	 .loc 2 670 27
 3254 000c FB78     	 ldrb r3,[r7,#3]
 3255 000e 7A68     	 ldr r2,[r7,#4]
 3256 0010 5821     	 movs r1,#88
 3257 0012 01FB03F3 	 mul r3,r1,r3
 3258 0016 1344     	 add r3,r3,r2
 3259 0018 4433     	 adds r3,r3,#68
 3260 001a 1B68     	 ldr r3,[r3]
 3261              	 .loc 2 670 64
 3262 001c DB0A     	 lsrs r3,r3,#11
 3263              	 .loc 2 670 8
 3264 001e 03F00F03 	 and r3,r3,#15
 3265 0022 FB60     	 str r3,[r7,#12]
 671:../Libraries/XMCLib/src/xmc_dma.c **** 
 672:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3266              	 .loc 2 672 3
 3267 0024 FB68     	 ldr r3,[r7,#12]
 3268 0026 DBB2     	 uxtb r3,r3
 3269 0028 1946     	 mov r1,r3
 3270 002a 7868     	 ldr r0,[r7,#4]
 3271 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 673:../Libraries/XMCLib/src/xmc_dma.c **** }
 3272              	 .loc 2 673 1
 3273 0030 00BF     	 nop
 3274 0032 1037     	 adds r7,r7,#16
 3275              	.LCFI225:
 3276              	 .cfi_def_cfa_offset 8
 3277 0034 BD46     	 mov sp,r7
 3278              	.LCFI226:
 3279              	 .cfi_def_cfa_register 13
 3280              	 
 3281 0036 80BD     	 pop {r7,pc}
 3282              	 .cfi_endproc
 3283              	.LFE217:
 3285              	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 3286              	 .align 1
 3287              	 .global XMC_DMA_IRQHandler
 3288              	 .syntax unified
 3289              	 .thumb
 3290              	 .thumb_func
 3291              	 .fpu fpv4-sp-d16
 3293              	XMC_DMA_IRQHandler:
 3294              	.LFB218:
 674:../Libraries/XMCLib/src/xmc_dma.c **** 
 675:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 676:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 677:../Libraries/XMCLib/src/xmc_dma.c **** {
 3295              	 .loc 2 677 1
 3296              	 .cfi_startproc
 3297              	 
 3298              	 
 3299 0000 80B5     	 push {r7,lr}
 3300              	.LCFI227:
 3301              	 .cfi_def_cfa_offset 8
 3302              	 .cfi_offset 7,-8
 3303              	 .cfi_offset 14,-4
 3304 0002 88B0     	 sub sp,sp,#32
 3305              	.LCFI228:
 3306              	 .cfi_def_cfa_offset 40
 3307 0004 00AF     	 add r7,sp,#0
 3308              	.LCFI229:
 3309              	 .cfi_def_cfa_register 7
 3310 0006 7860     	 str r0,[r7,#4]
 678:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 679:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 680:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 681:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 682:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 683:../Libraries/XMCLib/src/xmc_dma.c **** 
 684:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 685:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3311              	 .loc 2 685 6
 3312 0008 7B68     	 ldr r3,[r7,#4]
 3313 000a 844A     	 ldr r2,.L181
 3314 000c 9342     	 cmp r3,r2
 3315 000e 02D1     	 bne .L143
 686:../Libraries/XMCLib/src/xmc_dma.c ****   {
 687:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 688:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 3316              	 .loc 2 688 24
 3317 0010 834B     	 ldr r3,.L181+4
 3318 0012 BB61     	 str r3,[r7,#24]
 3319 0014 01E0     	 b .L144
 3320              	.L143:
 689:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 690:../Libraries/XMCLib/src/xmc_dma.c ****   }
 691:../Libraries/XMCLib/src/xmc_dma.c ****   else
 692:../Libraries/XMCLib/src/xmc_dma.c ****   {
 693:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 3321              	 .loc 2 693 24
 3322 0016 834B     	 ldr r3,.L181+8
 3323 0018 BB61     	 str r3,[r7,#24]
 3324              	.L144:
 694:../Libraries/XMCLib/src/xmc_dma.c ****   }
 695:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 696:../Libraries/XMCLib/src/xmc_dma.c **** 
 697:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 3325              	 .loc 2 697 11
 3326 001a 7868     	 ldr r0,[r7,#4]
 3327 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 3328 0020 7861     	 str r0,[r7,#20]
 698:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 3329              	 .loc 2 698 11
 3330 0022 0023     	 movs r3,#0
 3331 0024 FB61     	 str r3,[r7,#28]
 699:../Libraries/XMCLib/src/xmc_dma.c **** 
 700:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 3332              	 .loc 2 700 14
 3333 0026 7B69     	 ldr r3,[r7,#20]
 3334 0028 03F01003 	 and r3,r3,#16
 3335              	 .loc 2 700 6
 3336 002c 002B     	 cmp r3,#0
 3337 002e 2AD0     	 beq .L145
 701:../Libraries/XMCLib/src/xmc_dma.c ****   {
 702:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 3338              	 .loc 2 702 13
 3339 0030 7868     	 ldr r0,[r7,#4]
 3340 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 3341 0036 7861     	 str r0,[r7,#20]
 703:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3342              	 .loc 2 703 11
 3343 0038 21E0     	 b .L146
 3344              	.L150:
 704:../Libraries/XMCLib/src/xmc_dma.c ****     {
 705:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3345              	 .loc 2 705 12
 3346 003a 0122     	 movs r2,#1
 3347 003c FB69     	 ldr r3,[r7,#28]
 3348 003e 02FA03F3 	 lsl r3,r2,r3
 3349 0042 3B61     	 str r3,[r7,#16]
 706:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 3350              	 .loc 2 706 18
 3351 0044 7A69     	 ldr r2,[r7,#20]
 3352 0046 3B69     	 ldr r3,[r7,#16]
 3353 0048 1340     	 ands r3,r3,r2
 3354              	 .loc 2 706 10
 3355 004a 002B     	 cmp r3,#0
 3356 004c 14D0     	 beq .L147
 707:../Libraries/XMCLib/src/xmc_dma.c ****       {
 708:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 3357              	 .loc 2 708 9
 3358 004e FB69     	 ldr r3,[r7,#28]
 3359 0050 DBB2     	 uxtb r3,r3
 3360 0052 1022     	 movs r2,#16
 3361 0054 1946     	 mov r1,r3
 3362 0056 7868     	 ldr r0,[r7,#4]
 3363 0058 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 709:../Libraries/XMCLib/src/xmc_dma.c **** 
 710:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 711:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3364              	 .loc 2 711 43
 3365 005c FB69     	 ldr r3,[r7,#28]
 3366 005e 9B00     	 lsls r3,r3,#2
 3367 0060 BA69     	 ldr r2,[r7,#24]
 3368 0062 1344     	 add r3,r3,r2
 3369              	 .loc 2 711 23
 3370 0064 1B68     	 ldr r3,[r3]
 3371 0066 FB60     	 str r3,[r7,#12]
 712:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3372              	 .loc 2 712 12
 3373 0068 FB68     	 ldr r3,[r7,#12]
 3374 006a 002B     	 cmp r3,#0
 3375 006c 00F0C880 	 beq .L175
 713:../Libraries/XMCLib/src/xmc_dma.c ****         {
 714:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 3376              	 .loc 2 714 11
 3377 0070 FB68     	 ldr r3,[r7,#12]
 3378 0072 1020     	 movs r0,#16
 3379 0074 9847     	 blx r3
 3380              	.LVL0:
 715:../Libraries/XMCLib/src/xmc_dma.c ****         }
 716:../Libraries/XMCLib/src/xmc_dma.c **** 
 717:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3381              	 .loc 2 717 9
 3382 0076 C3E0     	 b .L175
 3383              	.L147:
 718:../Libraries/XMCLib/src/xmc_dma.c ****       }
 719:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3384              	 .loc 2 719 7
 3385 0078 FB69     	 ldr r3,[r7,#28]
 3386 007a 0133     	 adds r3,r3,#1
 3387 007c FB61     	 str r3,[r7,#28]
 3388              	.L146:
 703:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3389              	 .loc 2 703 11
 3390 007e 7B69     	 ldr r3,[r7,#20]
 3391 0080 002B     	 cmp r3,#0
 3392 0082 DAD1     	 bne .L150
 720:../Libraries/XMCLib/src/xmc_dma.c ****     }
 721:../Libraries/XMCLib/src/xmc_dma.c ****   }
 722:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 723:../Libraries/XMCLib/src/xmc_dma.c ****   {
 724:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 725:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 726:../Libraries/XMCLib/src/xmc_dma.c ****     {
 727:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 728:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 729:../Libraries/XMCLib/src/xmc_dma.c ****       {
 730:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 731:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 732:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 733:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
 734:../Libraries/XMCLib/src/xmc_dma.c **** 
 735:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 736:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 737:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 738:../Libraries/XMCLib/src/xmc_dma.c ****         {
 739:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 740:../Libraries/XMCLib/src/xmc_dma.c ****         }
 741:../Libraries/XMCLib/src/xmc_dma.c **** 
 742:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 743:../Libraries/XMCLib/src/xmc_dma.c ****       }
 744:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 745:../Libraries/XMCLib/src/xmc_dma.c ****     }
 746:../Libraries/XMCLib/src/xmc_dma.c ****   }
 747:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 748:../Libraries/XMCLib/src/xmc_dma.c ****   {
 749:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 750:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 751:../Libraries/XMCLib/src/xmc_dma.c ****     {
 752:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 753:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 754:../Libraries/XMCLib/src/xmc_dma.c ****       {
 755:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 756:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 757:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
 758:../Libraries/XMCLib/src/xmc_dma.c **** 
 759:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 760:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 761:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 762:../Libraries/XMCLib/src/xmc_dma.c ****         {
 763:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 764:../Libraries/XMCLib/src/xmc_dma.c ****         }
 765:../Libraries/XMCLib/src/xmc_dma.c **** 
 766:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 767:../Libraries/XMCLib/src/xmc_dma.c ****       }
 768:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 769:../Libraries/XMCLib/src/xmc_dma.c ****     }
 770:../Libraries/XMCLib/src/xmc_dma.c ****   }
 771:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 772:../Libraries/XMCLib/src/xmc_dma.c ****   {
 773:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 774:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 775:../Libraries/XMCLib/src/xmc_dma.c ****     {
 776:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 777:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 778:../Libraries/XMCLib/src/xmc_dma.c ****       {
 779:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 780:../Libraries/XMCLib/src/xmc_dma.c **** 
 781:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 782:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 783:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 784:../Libraries/XMCLib/src/xmc_dma.c ****         {
 785:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 786:../Libraries/XMCLib/src/xmc_dma.c ****         }
 787:../Libraries/XMCLib/src/xmc_dma.c **** 
 788:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 789:../Libraries/XMCLib/src/xmc_dma.c ****       }
 790:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 791:../Libraries/XMCLib/src/xmc_dma.c ****     }
 792:../Libraries/XMCLib/src/xmc_dma.c ****   }
 793:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 794:../Libraries/XMCLib/src/xmc_dma.c ****   {
 795:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 796:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 797:../Libraries/XMCLib/src/xmc_dma.c ****     {
 798:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 799:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 800:../Libraries/XMCLib/src/xmc_dma.c ****       {
 801:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 802:../Libraries/XMCLib/src/xmc_dma.c **** 
 803:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 804:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 805:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 806:../Libraries/XMCLib/src/xmc_dma.c ****         {
 807:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 808:../Libraries/XMCLib/src/xmc_dma.c ****         }
 809:../Libraries/XMCLib/src/xmc_dma.c **** 
 810:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 811:../Libraries/XMCLib/src/xmc_dma.c ****       }
 812:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 813:../Libraries/XMCLib/src/xmc_dma.c ****     }
 814:../Libraries/XMCLib/src/xmc_dma.c ****   }
 815:../Libraries/XMCLib/src/xmc_dma.c ****   else
 816:../Libraries/XMCLib/src/xmc_dma.c ****   {
 817:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 818:../Libraries/XMCLib/src/xmc_dma.c ****   }
 819:../Libraries/XMCLib/src/xmc_dma.c **** 
 820:../Libraries/XMCLib/src/xmc_dma.c **** }
 3393              	 .loc 2 820 1
 3394 0084 C5E0     	 b .L179
 3395              	.L145:
 722:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3396              	 .loc 2 722 19
 3397 0086 7B69     	 ldr r3,[r7,#20]
 3398 0088 03F00103 	 and r3,r3,#1
 722:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3399              	 .loc 2 722 11
 3400 008c 002B     	 cmp r3,#0
 3401 008e 2AD0     	 beq .L152
 724:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3402              	 .loc 2 724 13
 3403 0090 7868     	 ldr r0,[r7,#4]
 3404 0092 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 3405 0096 7861     	 str r0,[r7,#20]
 725:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3406              	 .loc 2 725 11
 3407 0098 21E0     	 b .L153
 3408              	.L157:
 727:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3409              	 .loc 2 727 12
 3410 009a 0122     	 movs r2,#1
 3411 009c FB69     	 ldr r3,[r7,#28]
 3412 009e 02FA03F3 	 lsl r3,r2,r3
 3413 00a2 3B61     	 str r3,[r7,#16]
 728:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3414              	 .loc 2 728 17
 3415 00a4 7A69     	 ldr r2,[r7,#20]
 3416 00a6 3B69     	 ldr r3,[r7,#16]
 3417 00a8 1340     	 ands r3,r3,r2
 728:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3418              	 .loc 2 728 10
 3419 00aa 002B     	 cmp r3,#0
 3420 00ac 14D0     	 beq .L154
 730:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 3421              	 .loc 2 730 9
 3422 00ae FB69     	 ldr r3,[r7,#28]
 3423 00b0 DBB2     	 uxtb r3,r3
 3424 00b2 0F22     	 movs r2,#15
 3425 00b4 1946     	 mov r1,r3
 3426 00b6 7868     	 ldr r0,[r7,#4]
 3427 00b8 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 736:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3428              	 .loc 2 736 43
 3429 00bc FB69     	 ldr r3,[r7,#28]
 3430 00be 9B00     	 lsls r3,r3,#2
 3431 00c0 BA69     	 ldr r2,[r7,#24]
 3432 00c2 1344     	 add r3,r3,r2
 736:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3433              	 .loc 2 736 23
 3434 00c4 1B68     	 ldr r3,[r3]
 3435 00c6 FB60     	 str r3,[r7,#12]
 737:../Libraries/XMCLib/src/xmc_dma.c ****         {
 3436              	 .loc 2 737 12
 3437 00c8 FB68     	 ldr r3,[r7,#12]
 3438 00ca 002B     	 cmp r3,#0
 3439 00cc 00F09A80 	 beq .L176
 739:../Libraries/XMCLib/src/xmc_dma.c ****         }
 3440              	 .loc 2 739 11
 3441 00d0 FB68     	 ldr r3,[r7,#12]
 3442 00d2 0120     	 movs r0,#1
 3443 00d4 9847     	 blx r3
 3444              	.LVL1:
 742:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3445              	 .loc 2 742 9
 3446 00d6 95E0     	 b .L176
 3447              	.L154:
 744:../Libraries/XMCLib/src/xmc_dma.c ****     }
 3448              	 .loc 2 744 7
 3449 00d8 FB69     	 ldr r3,[r7,#28]
 3450 00da 0133     	 adds r3,r3,#1
 3451 00dc FB61     	 str r3,[r7,#28]
 3452              	.L153:
 725:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3453              	 .loc 2 725 11
 3454 00de 7B69     	 ldr r3,[r7,#20]
 3455 00e0 002B     	 cmp r3,#0
 3456 00e2 DAD1     	 bne .L157
 3457              	 .loc 2 820 1
 3458 00e4 95E0     	 b .L179
 3459              	.L152:
 747:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3460              	 .loc 2 747 19
 3461 00e6 7B69     	 ldr r3,[r7,#20]
 3462 00e8 03F00203 	 and r3,r3,#2
 747:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3463              	 .loc 2 747 11
 3464 00ec 002B     	 cmp r3,#0
 3465 00ee 29D0     	 beq .L158
 749:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3466              	 .loc 2 749 13
 3467 00f0 7868     	 ldr r0,[r7,#4]
 3468 00f2 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3469 00f6 7861     	 str r0,[r7,#20]
 750:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3470              	 .loc 2 750 11
 3471 00f8 20E0     	 b .L159
 3472              	.L163:
 752:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3473              	 .loc 2 752 12
 3474 00fa 0122     	 movs r2,#1
 3475 00fc FB69     	 ldr r3,[r7,#28]
 3476 00fe 02FA03F3 	 lsl r3,r2,r3
 3477 0102 3B61     	 str r3,[r7,#16]
 753:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3478              	 .loc 2 753 17
 3479 0104 7A69     	 ldr r2,[r7,#20]
 3480 0106 3B69     	 ldr r3,[r7,#16]
 3481 0108 1340     	 ands r3,r3,r2
 753:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3482              	 .loc 2 753 10
 3483 010a 002B     	 cmp r3,#0
 3484 010c 13D0     	 beq .L160
 755:../Libraries/XMCLib/src/xmc_dma.c ****                                     (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
 3485              	 .loc 2 755 9
 3486 010e FB69     	 ldr r3,[r7,#28]
 3487 0110 DBB2     	 uxtb r3,r3
 3488 0112 0E22     	 movs r2,#14
 3489 0114 1946     	 mov r1,r3
 3490 0116 7868     	 ldr r0,[r7,#4]
 3491 0118 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 760:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3492              	 .loc 2 760 43
 3493 011c FB69     	 ldr r3,[r7,#28]
 3494 011e 9B00     	 lsls r3,r3,#2
 3495 0120 BA69     	 ldr r2,[r7,#24]
 3496 0122 1344     	 add r3,r3,r2
 760:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3497              	 .loc 2 760 23
 3498 0124 1B68     	 ldr r3,[r3]
 3499 0126 FB60     	 str r3,[r7,#12]
 761:../Libraries/XMCLib/src/xmc_dma.c ****         {
 3500              	 .loc 2 761 12
 3501 0128 FB68     	 ldr r3,[r7,#12]
 3502 012a 002B     	 cmp r3,#0
 3503 012c 6CD0     	 beq .L177
 763:../Libraries/XMCLib/src/xmc_dma.c ****         }
 3504              	 .loc 2 763 11
 3505 012e FB68     	 ldr r3,[r7,#12]
 3506 0130 0220     	 movs r0,#2
 3507 0132 9847     	 blx r3
 3508              	.LVL2:
 766:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3509              	 .loc 2 766 9
 3510 0134 68E0     	 b .L177
 3511              	.L160:
 768:../Libraries/XMCLib/src/xmc_dma.c ****     }
 3512              	 .loc 2 768 7
 3513 0136 FB69     	 ldr r3,[r7,#28]
 3514 0138 0133     	 adds r3,r3,#1
 3515 013a FB61     	 str r3,[r7,#28]
 3516              	.L159:
 750:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3517              	 .loc 2 750 11
 3518 013c 7B69     	 ldr r3,[r7,#20]
 3519 013e 002B     	 cmp r3,#0
 3520 0140 DBD1     	 bne .L163
 3521              	 .loc 2 820 1
 3522 0142 66E0     	 b .L179
 3523              	.L158:
 771:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3524              	 .loc 2 771 19
 3525 0144 7B69     	 ldr r3,[r7,#20]
 3526 0146 03F00403 	 and r3,r3,#4
 771:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3527              	 .loc 2 771 11
 3528 014a 002B     	 cmp r3,#0
 3529 014c 29D0     	 beq .L164
 773:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3530              	 .loc 2 773 13
 3531 014e 7868     	 ldr r0,[r7,#4]
 3532 0150 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3533 0154 7861     	 str r0,[r7,#20]
 774:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3534              	 .loc 2 774 11
 3535 0156 20E0     	 b .L165
 3536              	.L169:
 776:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3537              	 .loc 2 776 12
 3538 0158 0122     	 movs r2,#1
 3539 015a FB69     	 ldr r3,[r7,#28]
 3540 015c 02FA03F3 	 lsl r3,r2,r3
 3541 0160 3B61     	 str r3,[r7,#16]
 777:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3542              	 .loc 2 777 17
 3543 0162 7A69     	 ldr r2,[r7,#20]
 3544 0164 3B69     	 ldr r3,[r7,#16]
 3545 0166 1340     	 ands r3,r3,r2
 777:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3546              	 .loc 2 777 10
 3547 0168 002B     	 cmp r3,#0
 3548 016a 13D0     	 beq .L166
 779:../Libraries/XMCLib/src/xmc_dma.c **** 
 3549              	 .loc 2 779 9
 3550 016c FB69     	 ldr r3,[r7,#28]
 3551 016e DBB2     	 uxtb r3,r3
 3552 0170 0422     	 movs r2,#4
 3553 0172 1946     	 mov r1,r3
 3554 0174 7868     	 ldr r0,[r7,#4]
 3555 0176 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 782:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3556              	 .loc 2 782 43
 3557 017a FB69     	 ldr r3,[r7,#28]
 3558 017c 9B00     	 lsls r3,r3,#2
 3559 017e BA69     	 ldr r2,[r7,#24]
 3560 0180 1344     	 add r3,r3,r2
 782:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3561              	 .loc 2 782 23
 3562 0182 1B68     	 ldr r3,[r3]
 3563 0184 FB60     	 str r3,[r7,#12]
 783:../Libraries/XMCLib/src/xmc_dma.c ****         {
 3564              	 .loc 2 783 12
 3565 0186 FB68     	 ldr r3,[r7,#12]
 3566 0188 002B     	 cmp r3,#0
 3567 018a 3FD0     	 beq .L178
 785:../Libraries/XMCLib/src/xmc_dma.c ****         }
 3568              	 .loc 2 785 11
 3569 018c FB68     	 ldr r3,[r7,#12]
 3570 018e 0420     	 movs r0,#4
 3571 0190 9847     	 blx r3
 3572              	.LVL3:
 788:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3573              	 .loc 2 788 9
 3574 0192 3BE0     	 b .L178
 3575              	.L166:
 790:../Libraries/XMCLib/src/xmc_dma.c ****     }
 3576              	 .loc 2 790 7
 3577 0194 FB69     	 ldr r3,[r7,#28]
 3578 0196 0133     	 adds r3,r3,#1
 3579 0198 FB61     	 str r3,[r7,#28]
 3580              	.L165:
 774:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3581              	 .loc 2 774 11
 3582 019a 7B69     	 ldr r3,[r7,#20]
 3583 019c 002B     	 cmp r3,#0
 3584 019e DBD1     	 bne .L169
 3585              	 .loc 2 820 1
 3586 01a0 37E0     	 b .L179
 3587              	.L164:
 793:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3588              	 .loc 2 793 19
 3589 01a2 7B69     	 ldr r3,[r7,#20]
 3590 01a4 03F00803 	 and r3,r3,#8
 793:../Libraries/XMCLib/src/xmc_dma.c ****   {
 3591              	 .loc 2 793 11
 3592 01a8 002B     	 cmp r3,#0
 3593 01aa 32D0     	 beq .L179
 795:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3594              	 .loc 2 795 13
 3595 01ac 7868     	 ldr r0,[r7,#4]
 3596 01ae FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3597 01b2 7861     	 str r0,[r7,#20]
 796:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3598              	 .loc 2 796 11
 3599 01b4 20E0     	 b .L170
 3600              	.L174:
 798:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3601              	 .loc 2 798 12
 3602 01b6 0122     	 movs r2,#1
 3603 01b8 FB69     	 ldr r3,[r7,#28]
 3604 01ba 02FA03F3 	 lsl r3,r2,r3
 3605 01be 3B61     	 str r3,[r7,#16]
 799:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3606              	 .loc 2 799 17
 3607 01c0 7A69     	 ldr r2,[r7,#20]
 3608 01c2 3B69     	 ldr r3,[r7,#16]
 3609 01c4 1340     	 ands r3,r3,r2
 799:../Libraries/XMCLib/src/xmc_dma.c ****       {
 3610              	 .loc 2 799 10
 3611 01c6 002B     	 cmp r3,#0
 3612 01c8 13D0     	 beq .L171
 801:../Libraries/XMCLib/src/xmc_dma.c **** 
 3613              	 .loc 2 801 9
 3614 01ca FB69     	 ldr r3,[r7,#28]
 3615 01cc DBB2     	 uxtb r3,r3
 3616 01ce 0822     	 movs r2,#8
 3617 01d0 1946     	 mov r1,r3
 3618 01d2 7868     	 ldr r0,[r7,#4]
 3619 01d4 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 804:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3620              	 .loc 2 804 43
 3621 01d8 FB69     	 ldr r3,[r7,#28]
 3622 01da 9B00     	 lsls r3,r3,#2
 3623 01dc BA69     	 ldr r2,[r7,#24]
 3624 01de 1344     	 add r3,r3,r2
 804:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3625              	 .loc 2 804 23
 3626 01e0 1B68     	 ldr r3,[r3]
 3627 01e2 FB60     	 str r3,[r7,#12]
 805:../Libraries/XMCLib/src/xmc_dma.c ****         {
 3628              	 .loc 2 805 12
 3629 01e4 FB68     	 ldr r3,[r7,#12]
 3630 01e6 002B     	 cmp r3,#0
 3631 01e8 12D0     	 beq .L180
 807:../Libraries/XMCLib/src/xmc_dma.c ****         }
 3632              	 .loc 2 807 11
 3633 01ea FB68     	 ldr r3,[r7,#12]
 3634 01ec 0820     	 movs r0,#8
 3635 01ee 9847     	 blx r3
 3636              	.LVL4:
 810:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3637              	 .loc 2 810 9
 3638 01f0 0EE0     	 b .L180
 3639              	.L171:
 812:../Libraries/XMCLib/src/xmc_dma.c ****     }
 3640              	 .loc 2 812 7
 3641 01f2 FB69     	 ldr r3,[r7,#28]
 3642 01f4 0133     	 adds r3,r3,#1
 3643 01f6 FB61     	 str r3,[r7,#28]
 3644              	.L170:
 796:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3645              	 .loc 2 796 11
 3646 01f8 7B69     	 ldr r3,[r7,#20]
 3647 01fa 002B     	 cmp r3,#0
 3648 01fc DBD1     	 bne .L174
 3649              	 .loc 2 820 1
 3650 01fe 08E0     	 b .L179
 3651              	.L175:
 717:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3652              	 .loc 2 717 9
 3653 0200 00BF     	 nop
 3654 0202 06E0     	 b .L179
 3655              	.L176:
 742:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3656              	 .loc 2 742 9
 3657 0204 00BF     	 nop
 3658 0206 04E0     	 b .L179
 3659              	.L177:
 766:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3660              	 .loc 2 766 9
 3661 0208 00BF     	 nop
 3662 020a 02E0     	 b .L179
 3663              	.L178:
 788:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3664              	 .loc 2 788 9
 3665 020c 00BF     	 nop
 3666 020e 00E0     	 b .L179
 3667              	.L180:
 810:../Libraries/XMCLib/src/xmc_dma.c ****       }
 3668              	 .loc 2 810 9
 3669 0210 00BF     	 nop
 3670              	.L179:
 3671              	 .loc 2 820 1
 3672 0212 00BF     	 nop
 3673 0214 2037     	 adds r7,r7,#32
 3674              	.LCFI230:
 3675              	 .cfi_def_cfa_offset 8
 3676 0216 BD46     	 mov sp,r7
 3677              	.LCFI231:
 3678              	 .cfi_def_cfa_register 13
 3679              	 
 3680 0218 80BD     	 pop {r7,pc}
 3681              	.L182:
 3682 021a 00BF     	 .align 2
 3683              	.L181:
 3684 021c 00400150 	 .word 1342259200
 3685 0220 00000000 	 .word dma0_event_handlers
 3686 0224 00000000 	 .word dma1_event_handlers
 3687              	 .cfi_endproc
 3688              	.LFE218:
 3690              	 .text
 3691              	.Letext0:
 3692              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 3693              	 .file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 3694              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3695              	 .file 6 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_STAND/Libraries/XMCLib/inc/xmc4_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:17     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:70     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:109    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:115    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:160    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:199    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:205    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:244    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:250    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
    {standard input}:289    .bss.dma0_event_handlers:00000000 $d
    {standard input}:292    .bss.dma0_event_handlers:00000000 dma0_event_handlers
    {standard input}:295    .bss.dma1_event_handlers:00000000 $d
    {standard input}:298    .bss.dma1_event_handlers:00000000 dma1_event_handlers
    {standard input}:301    .text.XMC_DMA_Init:00000000 $t
    {standard input}:308    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:351    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:344    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:400    .text.XMC_DMA_Enable:00000030 $d
    {standard input}:407    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:414    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:464    .text.XMC_DMA_Disable:00000030 $d
    {standard input}:471    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:478    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:580    .text.XMC_DMA_IsEnabled:00000088 $d
    {standard input}:587    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:594    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:718    .text.XMC_DMA_EnableRequestLine:00000094 $d
    {standard input}:724    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:731    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:803    .text.XMC_DMA_DisableRequestLine:0000004c $d
    {standard input}:809    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:816    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:910    .text.XMC_DMA_ClearRequestLine:00000074 $d
    {standard input}:916    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:923    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:998    .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:1004   .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:1011   .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:1075   .text.XMC_DMA_ClearOverrunStatus:0000003c $d
    {standard input}:1081   .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:1088   .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:1147   .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:1154   .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:1204   .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1211   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:2153   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1565   .text.XMC_DMA_CH_Init:0000024c $d
    {standard input}:1574   .text.XMC_DMA_CH_Init:00000270 $t
    {standard input}:1708   .text.XMC_DMA_CH_Init:00000378 $d
    {standard input}:1711   .text.XMC_DMA_CH_Init:0000037c $t
    {standard input}:1797   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1804   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1858   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1865   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1919   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1926   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1980   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1987   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:2063   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:2070   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:2146   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:2229   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:2236   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:2322   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:2329   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2403   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2410   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2464   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2471   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2545   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2552   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2606   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2613   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2689   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2696   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2772   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2779   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2833   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2840   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2894   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2901   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2955   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2962   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:3016   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:3023   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:3093   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:3100   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:3159   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:3166   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:3173   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:3226   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:3233   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:3286   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:3293   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3684   .text.XMC_DMA_IRQHandler:0000021c $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_IsPeripheralResetAsserted
